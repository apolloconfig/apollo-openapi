/*
 * Apollo OpenAPI
 *
 * <p>Apollo配置中心OpenAPI接口文档</p>  <h2>认证方式</h2> <p>所有 API 接口都需要通过 <code>Authorization</code> header 进行身份验证。</p>  <h3>获取 Token 的方式：</h3> <ol>   <li><b>Portal 管理界面获取</b>：登录 Portal → 管理员工具 → 开放平台授权管理 → 创建第三方应用，获取 Token。</li>   <li><b>Token 格式</b>：<code>Authorization: token_value</code></li>   <li><b>Token 权限</b>：按应用/环境/命名空间授予，建议不同用途分别创建。</li> </ol>  <h3>使用示例</h3> <pre><code class=\"language-bash\">curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\ -H \"Authorization: your_token_here\"</code></pre>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

/// OpenReleaseDto : Apollo发布信息数据传输对象，表示一次配置发布的完整信息



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct OpenReleaseDto {
    /// 发布创建者用户名，记录是谁创建了这次发布
    #[serde(rename = "dataChangeCreatedBy", skip_serializing_if = "Option::is_none")]
    pub data_change_created_by: Option<String>,
    /// 发布最后修改者用户名，记录最后一次修改发布信息的用户
    #[serde(rename = "dataChangeLastModifiedBy", skip_serializing_if = "Option::is_none")]
    pub data_change_last_modified_by: Option<String>,
    /// 发布创建时间，ISO 8601格式的时间戳
    #[serde(rename = "dataChangeCreatedTime", skip_serializing_if = "Option::is_none")]
    pub data_change_created_time: Option<String>,
    /// 发布最后修改时间，ISO 8601格式的时间戳
    #[serde(rename = "dataChangeLastModifiedTime", skip_serializing_if = "Option::is_none")]
    pub data_change_last_modified_time: Option<String>,
    /// 发布记录的唯一标识符，系统自动生成
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    /// 所属应用的唯一标识符
    #[serde(rename = "appId", skip_serializing_if = "Option::is_none")]
    pub app_id: Option<String>,
    /// 所属集群的名称
    #[serde(rename = "clusterName", skip_serializing_if = "Option::is_none")]
    pub cluster_name: Option<String>,
    /// 所属命名空间的名称
    #[serde(rename = "namespaceName", skip_serializing_if = "Option::is_none")]
    pub namespace_name: Option<String>,
    /// 发布名称，用于标识这次发布的版本或描述
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "configurations", skip_serializing_if = "Option::is_none")]
    pub configurations: Option<::std::collections::HashMap<String, String>>,
    /// 发布备注，描述本次发布的变更内容和目的
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
}

impl OpenReleaseDto {
    /// Apollo发布信息数据传输对象，表示一次配置发布的完整信息
    pub fn new() -> OpenReleaseDto {
        OpenReleaseDto {
            data_change_created_by: None,
            data_change_last_modified_by: None,
            data_change_created_time: None,
            data_change_last_modified_time: None,
            id: None,
            app_id: None,
            cluster_name: None,
            namespace_name: None,
            name: None,
            configurations: None,
            comment: None,
        }
    }
}
