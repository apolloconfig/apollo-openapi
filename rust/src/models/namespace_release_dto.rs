/*
 * Apollo OpenAPI
 *
 * <p>Apollo配置中心OpenAPI接口文档</p>  <h2>认证方式</h2> <p>所有 API 接口都需要通过 <code>Authorization</code> header 进行身份验证。</p>  <h3>获取 Token 的方式：</h3> <ol>   <li><b>Portal 管理界面获取</b>：登录 Portal → 管理员工具 → 开放平台授权管理 → 创建第三方应用，获取 Token。</li>   <li><b>Token 格式</b>：<code>Authorization: token_value</code></li>   <li><b>Token 权限</b>：按应用/环境/命名空间授予，建议不同用途分别创建。</li> </ol>  <h3>使用示例</h3> <pre><code class=\"language-bash\">curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\ -H \"Authorization: your_token_here\"</code></pre>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

/// NamespaceReleaseDto : 命名空间发布请求数据传输对象，用于创建新的配置发布



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct NamespaceReleaseDto {
    /// 发布标题，用于标识这次发布的名称或版本号
    #[serde(rename = "releaseTitle", skip_serializing_if = "Option::is_none")]
    pub release_title: Option<String>,
    /// 发布备注，详细描述本次发布的变更内容和目的
    #[serde(rename = "releaseComment", skip_serializing_if = "Option::is_none")]
    pub release_comment: Option<String>,
    /// 发布操作者用户名，记录是谁执行了这次发布操作
    #[serde(rename = "releasedBy", skip_serializing_if = "Option::is_none")]
    pub released_by: Option<String>,
    /// 是否为紧急发布，紧急发布可能会跳过某些审核流程
    #[serde(rename = "isEmergencyPublish", skip_serializing_if = "Option::is_none")]
    pub is_emergency_publish: Option<bool>,
}

impl NamespaceReleaseDto {
    /// 命名空间发布请求数据传输对象，用于创建新的配置发布
    pub fn new() -> NamespaceReleaseDto {
        NamespaceReleaseDto {
            release_title: None,
            release_comment: None,
            released_by: None,
            is_emergency_publish: None,
        }
    }
}
