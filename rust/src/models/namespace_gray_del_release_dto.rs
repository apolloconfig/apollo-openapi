/*
 * Apollo OpenAPI
 *
 * Apollo配置中心OpenAPI接口文档  ## 认证方式  所有API接口都需要通过Authorization header进行身份验证。  ### 获取Token的方式：  1. **Portal管理界面获取**：    - 登录Apollo Portal管理界面    - 进入\"管理员工具\" -> \"开放平台授权管理\"    - 创建第三方应用，获取Token  2. **Token格式**：    ```    Authorization: token_value    ```  3. **Token权限**：    - Token具有对应应用的读写权限    - 不同Token可能有不同的环境和命名空间权限    - 建议为不同用途创建不同的Token  ### 使用示例： ```bash curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\      -H \"Authorization: your_token_here\" ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// NamespaceGrayDelReleaseDto : 命名空间灰度删除发布请求数据传输对象，用于创建删除特定配置项的灰度发布
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NamespaceGrayDelReleaseDto {
    /// 发布标题，用于标识这次灰度删除发布的名称或版本号
    #[serde(rename = "releaseTitle", skip_serializing_if = "Option::is_none")]
    pub release_title: Option<String>,
    /// 发布备注，详细描述本次灰度删除发布的目的和删除的配置项
    #[serde(rename = "releaseComment", skip_serializing_if = "Option::is_none")]
    pub release_comment: Option<String>,
    /// 发布操作者用户名，记录是谁执行了这次灰度删除发布操作
    #[serde(rename = "releasedBy", skip_serializing_if = "Option::is_none")]
    pub released_by: Option<String>,
    /// 是否为紧急发布，紧急发布可能会跳过某些审核流程
    #[serde(rename = "isEmergencyPublish", skip_serializing_if = "Option::is_none")]
    pub is_emergency_publish: Option<bool>,
    /// 需要在灰度发布中删除的配置项键名列表
    #[serde(rename = "grayDelKeys", skip_serializing_if = "Option::is_none")]
    pub gray_del_keys: Option<Vec<String>>,
}

impl NamespaceGrayDelReleaseDto {
    /// 命名空间灰度删除发布请求数据传输对象，用于创建删除特定配置项的灰度发布
    pub fn new() -> NamespaceGrayDelReleaseDto {
        NamespaceGrayDelReleaseDto {
            release_title: None,
            release_comment: None,
            released_by: None,
            is_emergency_publish: None,
            gray_del_keys: None,
        }
    }
}

