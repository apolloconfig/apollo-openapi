/*
 * Apollo OpenAPI
 *
 * <p>Apollo配置中心OpenAPI接口文档</p>  <h2>认证方式</h2> <p>所有 API 接口都需要通过 <code>Authorization</code> header 进行身份验证。</p>  <h3>获取 Token 的方式：</h3> <ol>   <li><b>Portal 管理界面获取</b>：登录 Portal → 管理员工具 → 开放平台授权管理 → 创建第三方应用，获取 Token。</li>   <li><b>Token 格式</b>：<code>Authorization: token_value</code></li>   <li><b>Token 权限</b>：按应用/环境/命名空间授予，建议不同用途分别创建。</li> </ol>  <h3>使用示例</h3> <pre><code class=\"language-bash\">curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\ -H \"Authorization: your_token_here\"</code></pre>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

/// OpenCreateAppDto : 创建Apollo应用的请求数据传输对象，包含创建应用所需的所有信息



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct OpenCreateAppDto {
    /// 是否将应用角色分配给当前用户。当设置为true时，当前token用户将获得该应用的完全操作权限
    #[serde(rename = "assignAppRoleToSelf", skip_serializing_if = "Option::is_none")]
    pub assign_app_role_to_self: Option<bool>,
    /// 应用管理员用户名列表。应用负责人默认具有项目管理员权限。管理员可以创建命名空间、集群并分配用户权限
    #[serde(rename = "admins", skip_serializing_if = "Option::is_none")]
    pub admins: Option<Vec<String>>,
    #[serde(rename = "app", skip_serializing_if = "Option::is_none")]
    pub app: Option<Box<crate::models::OpenAppDto>>,
}

impl OpenCreateAppDto {
    /// 创建Apollo应用的请求数据传输对象，包含创建应用所需的所有信息
    pub fn new() -> OpenCreateAppDto {
        OpenCreateAppDto {
            assign_app_role_to_self: None,
            admins: None,
            app: None,
        }
    }
}
