/*
 * Apollo OpenAPI
 *
 * Apollo配置中心OpenAPI接口文档  ## 认证方式  所有API接口都需要通过Authorization header进行身份验证。  ### 获取Token的方式：  1. **Portal管理界面获取**：    - 登录Apollo Portal管理界面    - 进入\"管理员工具\" -> \"开放平台授权管理\"    - 创建第三方应用，获取Token  2. **Token格式**：    ```    Authorization: token_value    ```  3. **Token权限**：    - Token具有对应应用的读写权限    - 不同Token可能有不同的环境和命名空间权限    - 建议为不同用途创建不同的Token  ### 使用示例： ```bash curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\      -H \"Authorization: your_token_here\" ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// OpenAppNamespaceDto : Apollo应用命名空间数据传输对象，表示应用级别的命名空间配置信息
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OpenAppNamespaceDto {
    /// 命名空间创建者用户名，记录是谁创建了这个应用命名空间
    #[serde(rename = "dataChangeCreatedBy", skip_serializing_if = "Option::is_none")]
    pub data_change_created_by: Option<String>,
    /// 命名空间最后修改者用户名，记录最后一次修改命名空间信息的用户
    #[serde(rename = "dataChangeLastModifiedBy", skip_serializing_if = "Option::is_none")]
    pub data_change_last_modified_by: Option<String>,
    /// 命名空间创建时间，ISO 8601格式的时间戳
    #[serde(rename = "dataChangeCreatedTime", skip_serializing_if = "Option::is_none")]
    pub data_change_created_time: Option<String>,
    /// 命名空间最后修改时间，ISO 8601格式的时间戳
    #[serde(rename = "dataChangeLastModifiedTime", skip_serializing_if = "Option::is_none")]
    pub data_change_last_modified_time: Option<String>,
    /// 命名空间名称，在同一应用内唯一标识一个命名空间
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// 所属应用的唯一标识符
    #[serde(rename = "appId", skip_serializing_if = "Option::is_none")]
    pub app_id: Option<String>,
    /// 命名空间格式类型，如properties、xml、json、yml等
    #[serde(rename = "format", skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    /// 是否为公共命名空间，公共命名空间可以被其他应用关联使用
    #[serde(rename = "isPublic", skip_serializing_if = "Option::is_none")]
    pub is_public: Option<bool>,
    /// 对于公共命名空间，是否在命名空间名称前添加前缀
    #[serde(rename = "appendNamespacePrefix", skip_serializing_if = "Option::is_none")]
    pub append_namespace_prefix: Option<bool>,
    /// 命名空间备注说明，描述命名空间的用途和包含的配置类型
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
}

impl OpenAppNamespaceDto {
    /// Apollo应用命名空间数据传输对象，表示应用级别的命名空间配置信息
    pub fn new() -> OpenAppNamespaceDto {
        OpenAppNamespaceDto {
            data_change_created_by: None,
            data_change_last_modified_by: None,
            data_change_created_time: None,
            data_change_last_modified_time: None,
            name: None,
            app_id: None,
            format: None,
            is_public: None,
            append_namespace_prefix: None,
            comment: None,
        }
    }
}

