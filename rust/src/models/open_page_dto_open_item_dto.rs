/*
 * Apollo OpenAPI
 *
 * Apollo配置中心OpenAPI接口文档  ## 认证方式  所有API接口都需要通过Authorization header进行身份验证。  ### 获取Token的方式：  1. **Portal管理界面获取**：    - 登录Apollo Portal管理界面    - 进入\"管理员工具\" -> \"开放平台授权管理\"    - 创建第三方应用，获取Token  2. **Token格式**：    ```    Authorization: token_value    ```  3. **Token权限**：    - Token具有对应应用的读写权限    - 不同Token可能有不同的环境和命名空间权限    - 建议为不同用途创建不同的Token  ### 使用示例： ```bash curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\      -H \"Authorization: your_token_here\" ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// OpenPageDtoOpenItemDto : 分页配置项数据传输对象，用于返回分页查询的配置项列表结果
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OpenPageDtoOpenItemDto {
    /// 当前页码，从0开始计数
    #[serde(rename = "page", skip_serializing_if = "Option::is_none")]
    pub page: Option<i32>,
    /// 每页显示的记录数量
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<i32>,
    /// 总记录数，符合查询条件的配置项总数量
    #[serde(rename = "total", skip_serializing_if = "Option::is_none")]
    pub total: Option<i64>,
    /// 当前页的配置项列表，包含具体的配置项数据
    #[serde(rename = "content", skip_serializing_if = "Option::is_none")]
    pub content: Option<Vec<models::OpenItemDto>>,
}

impl OpenPageDtoOpenItemDto {
    /// 分页配置项数据传输对象，用于返回分页查询的配置项列表结果
    pub fn new() -> OpenPageDtoOpenItemDto {
        OpenPageDtoOpenItemDto {
            page: None,
            size: None,
            total: None,
            content: None,
        }
    }
}

