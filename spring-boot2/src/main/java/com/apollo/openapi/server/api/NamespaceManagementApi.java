/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.apollo.openapi.server.api;

import java.util.Map;
import com.apollo.openapi.server.model.OpenAppNamespaceDTO;
import com.apollo.openapi.server.model.OpenNamespaceDTO;
import com.apollo.openapi.server.model.OpenNamespaceLockDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-19T21:51:06.429+08:00[Asia/Shanghai]")
@Validated
@Tag(name = "Namespace Management", description = "命名空间管理相关接口，包括命名空间的创建、查询、配置等操作")
public interface NamespaceManagementApi {

    default NamespaceManagementApiDelegate getDelegate() {
        return new NamespaceManagementApiDelegate() {};
    }

    /**
     * GET /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/integrity-check : 检查缺失的Namespace (new added)
     * GET /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/integrity-check
     *
     * @param appId 应用ID (required)
     * @param env 环境标识 (required)
     * @param clusterName 集群名称 (required)
     * @return 缺失的命名空间名称列表 (status code 200)
     */
    @Operation(
        operationId = "checkNamespaceIntegrity",
        summary = "检查缺失的Namespace (new added)",
        description = "GET /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/integrity-check",
        tags = { "Namespace Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "缺失的命名空间名称列表", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/integrity-check",
        produces = { "application/json" }
    )
    default ResponseEntity<List<String>> checkNamespaceIntegrity(
        @Parameter(name = "appId", description = "应用ID", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId,
        @Parameter(name = "env", description = "环境标识", required = true, in = ParameterIn.PATH) @PathVariable("env") String env,
        @Parameter(name = "clusterName", description = "集群名称", required = true, in = ParameterIn.PATH) @PathVariable("clusterName") String clusterName
    ) {
        return getDelegate().checkNamespaceIntegrity(appId, env, clusterName);
    }


    /**
     * POST /openapi/v1/apps/{appId}/appnamespaces : 创建AppNamespace (original openapi)
     * POST /openapi/v1/apps/{appId}/appnamespaces
     *
     * @param appId  (required)
     * @param openAppNamespaceDTO  (required)
     * @return AppNamespace创建成功 (status code 200)
     *         or 请求参数错误 (status code 400)
     *         or 权限不足 (status code 403)
     */
    @Operation(
        operationId = "createNamespace",
        summary = "创建AppNamespace (original openapi)",
        description = "POST /openapi/v1/apps/{appId}/appnamespaces",
        tags = { "Namespace Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "AppNamespace创建成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenAppNamespaceDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "请求参数错误", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Map.class))
            }),
            @ApiResponse(responseCode = "403", description = "权限不足", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Map.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/openapi/v1/apps/{appId}/appnamespaces",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<OpenAppNamespaceDTO> createNamespace(
        @Parameter(name = "appId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId,
        @Parameter(name = "OpenAppNamespaceDTO", description = "", required = true) @Valid @RequestBody OpenAppNamespaceDTO openAppNamespaceDTO
    ) {
        return getDelegate().createNamespace(appId, openAppNamespaceDTO);
    }


    /**
     * DELETE /openapi/v1/apps/{appId}/appnamespaces/{namespaceName} : 删除AppNamespace (new added)
     * DELETE /openapi/v1/apps/{appId}/appnamespaces/{namespaceName}
     *
     * @param appId 应用ID (required)
     * @param namespaceName 命名空间名称 (required)
     * @param operator 操作人用户名 (required)
     * @return AppNamespace删除成功 (status code 200)
     */
    @Operation(
        operationId = "deleteAppNamespace",
        summary = "删除AppNamespace (new added)",
        description = "DELETE /openapi/v1/apps/{appId}/appnamespaces/{namespaceName}",
        tags = { "Namespace Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "AppNamespace删除成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/openapi/v1/apps/{appId}/appnamespaces/{namespaceName}",
        produces = { "application/json" }
    )
    default ResponseEntity<Object> deleteAppNamespace(
        @Parameter(name = "appId", description = "应用ID", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId,
        @Parameter(name = "namespaceName", description = "命名空间名称", required = true, in = ParameterIn.PATH) @PathVariable("namespaceName") String namespaceName,
        @NotNull @Parameter(name = "operator", description = "操作人用户名", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "operator", required = true) String operator
    ) {
        return getDelegate().deleteAppNamespace(appId, namespaceName, operator);
    }


    /**
     * DELETE /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/links : 删除关联的Namespace (new added)
     * DELETE /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/links
     *
     * @param appId 应用ID (required)
     * @param env 环境标识 (required)
     * @param clusterName 集群名称 (required)
     * @param namespaceName 命名空间名称 (required)
     * @param operator 操作人用户名 (required)
     * @return 解除关联成功 (status code 200)
     */
    @Operation(
        operationId = "deleteNamespaceLinks",
        summary = "删除关联的Namespace (new added)",
        description = "DELETE /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/links",
        tags = { "Namespace Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "解除关联成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/links",
        produces = { "application/json" }
    )
    default ResponseEntity<Object> deleteNamespaceLinks(
        @Parameter(name = "appId", description = "应用ID", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId,
        @Parameter(name = "env", description = "环境标识", required = true, in = ParameterIn.PATH) @PathVariable("env") String env,
        @Parameter(name = "clusterName", description = "集群名称", required = true, in = ParameterIn.PATH) @PathVariable("clusterName") String clusterName,
        @Parameter(name = "namespaceName", description = "命名空间名称", required = true, in = ParameterIn.PATH) @PathVariable("namespaceName") String namespaceName,
        @NotNull @Parameter(name = "operator", description = "操作人用户名", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "operator", required = true) String operator
    ) {
        return getDelegate().deleteNamespaceLinks(appId, env, clusterName, namespaceName, operator);
    }


    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces : 获取指定集群下的所有Namespace (original openapi)
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces
     *
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param fillItemDetail  (required)
     * @return  (status code 200)
     */
    @Operation(
        operationId = "findNamespaces",
        summary = "获取指定集群下的所有Namespace (original openapi)",
        description = "GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces",
        tags = { "Namespace Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = OpenNamespaceDTO.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces",
        produces = { "application/json" }
    )
    default ResponseEntity<List<OpenNamespaceDTO>> findNamespaces(
        @Parameter(name = "appId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId,
        @Parameter(name = "env", description = "", required = true, in = ParameterIn.PATH) @PathVariable("env") String env,
        @Parameter(name = "clusterName", description = "", required = true, in = ParameterIn.PATH) @PathVariable("clusterName") String clusterName,
        @NotNull @Parameter(name = "fillItemDetail", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "fillItemDetail", required = true, defaultValue = "true") Boolean fillItemDetail
    ) {
        return getDelegate().findNamespaces(appId, env, clusterName, fillItemDetail);
    }


    /**
     * GET /openapi/v1/apps/{appId}/appnamespaces/{namespaceName} : 获取指定的AppNamespace (new added)
     * GET /openapi/v1/apps/{appId}/appnamespaces/{namespaceName}
     *
     * @param appId 应用ID (required)
     * @param namespaceName 命名空间名称 (required)
     * @return 成功获取AppNamespace (status code 200)
     */
    @Operation(
        operationId = "getAppNamespace",
        summary = "获取指定的AppNamespace (new added)",
        description = "GET /openapi/v1/apps/{appId}/appnamespaces/{namespaceName}",
        tags = { "Namespace Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "成功获取AppNamespace", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenAppNamespaceDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/openapi/v1/apps/{appId}/appnamespaces/{namespaceName}",
        produces = { "application/json" }
    )
    default ResponseEntity<OpenAppNamespaceDTO> getAppNamespace(
        @Parameter(name = "appId", description = "应用ID", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId,
        @Parameter(name = "namespaceName", description = "命名空间名称", required = true, in = ParameterIn.PATH) @PathVariable("namespaceName") String namespaceName
    ) {
        return getDelegate().getAppNamespace(appId, namespaceName);
    }


    /**
     * GET /openapi/v1/appnamespaces : 获取所有公共AppNamespace (new added)
     * GET /openapi/v1/appnamespaces?public&#x3D;true
     *
     * @param publicOnly  (required)
     * @return  (status code 200)
     */
    @Operation(
        operationId = "getAppNamespaces",
        summary = "获取所有公共AppNamespace (new added)",
        description = "GET /openapi/v1/appnamespaces?public=true",
        tags = { "Namespace Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = OpenAppNamespaceDTO.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/openapi/v1/appnamespaces",
        produces = { "application/json" }
    )
    default ResponseEntity<List<OpenAppNamespaceDTO>> getAppNamespaces(
        @NotNull @Parameter(name = "publicOnly", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "publicOnly", required = true) Boolean publicOnly
    ) {
        return getDelegate().getAppNamespaces(publicOnly);
    }


    /**
     * GET /openapi/v1/apps/{appId}/appnamespaces : 获取指定应用的AppNamespace (new added)
     * GET /openapi/v1/apps/{appId}/appnamespaces
     *
     * @param appId  (required)
     * @return  (status code 200)
     */
    @Operation(
        operationId = "getAppNamespacesByApp",
        summary = "获取指定应用的AppNamespace (new added)",
        description = "GET /openapi/v1/apps/{appId}/appnamespaces",
        tags = { "Namespace Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = OpenAppNamespaceDTO.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/openapi/v1/apps/{appId}/appnamespaces",
        produces = { "application/json" }
    )
    default ResponseEntity<List<OpenAppNamespaceDTO>> getAppNamespacesByApp(
        @Parameter(name = "appId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId
    ) {
        return getDelegate().getAppNamespacesByApp(appId);
    }


    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/lock : 获取Namespace的锁状态 (original openapi)
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/lock
     *
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @return  (status code 200)
     */
    @Operation(
        operationId = "getNamespaceLock",
        summary = "获取Namespace的锁状态 (original openapi)",
        description = "GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/lock",
        tags = { "Namespace Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenNamespaceLockDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/lock",
        produces = { "application/json" }
    )
    default ResponseEntity<OpenNamespaceLockDTO> getNamespaceLock(
        @Parameter(name = "appId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId,
        @Parameter(name = "env", description = "", required = true, in = ParameterIn.PATH) @PathVariable("env") String env,
        @Parameter(name = "clusterName", description = "", required = true, in = ParameterIn.PATH) @PathVariable("clusterName") String clusterName,
        @Parameter(name = "namespaceName", description = "", required = true, in = ParameterIn.PATH) @PathVariable("namespaceName") String namespaceName
    ) {
        return getDelegate().getNamespaceLock(appId, env, clusterName, namespaceName);
    }


    /**
     * GET /openapi/v1/apps/{appId}/namespaces/releases/status : 获取应用下所有Namespace的发布状态 (new added)
     * GET /openapi/v1/apps/{appId}/namespaces/releases/status
     *
     * @param appId 应用ID (required)
     * @return 成功获取发布状态映射 (status code 200)
     */
    @Operation(
        operationId = "getNamespacesReleaseStatus",
        summary = "获取应用下所有Namespace的发布状态 (new added)",
        description = "GET /openapi/v1/apps/{appId}/namespaces/releases/status",
        tags = { "Namespace Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "成功获取发布状态映射")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/openapi/v1/apps/{appId}/namespaces/releases/status",
        produces = { "application/json" }
    )
    default ResponseEntity<Map<String, Map<String, Boolean>>> getNamespacesReleaseStatus(
        @Parameter(name = "appId", description = "应用ID", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId
    ) {
        return getDelegate().getNamespacesReleaseStatus(appId);
    }


    /**
     * GET /openapi/v1/envs/{env}/appnamespaces/{publicNamespaceName}/instances : 获取公共AppNamespace的所有实例 (new added)
     * GET /openapi/v1/envs/{env}/appnamespaces/{publicNamespaceName}/instances
     *
     * @param env 环境标识 (required)
     * @param publicNamespaceName 公共命名空间名称 (required)
     * @param page 页码，从0开始 (required)
     * @param size 每页数量 (required)
     * @return 成功获取实例列表 (status code 200)
     */
    @Operation(
        operationId = "getPublicAppNamespaceInstances",
        summary = "获取公共AppNamespace的所有实例 (new added)",
        description = "GET /openapi/v1/envs/{env}/appnamespaces/{publicNamespaceName}/instances",
        tags = { "Namespace Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "成功获取实例列表", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = OpenNamespaceDTO.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/openapi/v1/envs/{env}/appnamespaces/{publicNamespaceName}/instances",
        produces = { "application/json" }
    )
    default ResponseEntity<List<OpenNamespaceDTO>> getPublicAppNamespaceInstances(
        @Parameter(name = "env", description = "环境标识", required = true, in = ParameterIn.PATH) @PathVariable("env") String env,
        @Parameter(name = "publicNamespaceName", description = "公共命名空间名称", required = true, in = ParameterIn.PATH) @PathVariable("publicNamespaceName") String publicNamespaceName,
        @NotNull @Parameter(name = "page", description = "页码，从0开始", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = true) Integer page,
        @NotNull @Parameter(name = "size", description = "每页数量", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = true) Integer size
    ) {
        return getDelegate().getPublicAppNamespaceInstances(env, publicNamespaceName, page, size);
    }


    /**
     * GET /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/public-association : 获取关联的公共Namespace (new added)
     * GET /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/public-association
     *
     * @param appId 应用ID (required)
     * @param env 环境标识 (required)
     * @param clusterName 集群名称 (required)
     * @param namespaceName 命名空间名称 (required)
     * @return 成功获取关联的公共Namespace (status code 200)
     */
    @Operation(
        operationId = "getPublicNamespaceAssociation",
        summary = "获取关联的公共Namespace (new added)",
        description = "GET /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/public-association",
        tags = { "Namespace Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "成功获取关联的公共Namespace", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenNamespaceDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/public-association",
        produces = { "application/json" }
    )
    default ResponseEntity<OpenNamespaceDTO> getPublicNamespaceAssociation(
        @Parameter(name = "appId", description = "应用ID", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId,
        @Parameter(name = "env", description = "环境标识", required = true, in = ParameterIn.PATH) @PathVariable("env") String env,
        @Parameter(name = "clusterName", description = "集群名称", required = true, in = ParameterIn.PATH) @PathVariable("clusterName") String clusterName,
        @Parameter(name = "namespaceName", description = "命名空间名称", required = true, in = ParameterIn.PATH) @PathVariable("namespaceName") String namespaceName
    ) {
        return getDelegate().getPublicNamespaceAssociation(appId, env, clusterName, namespaceName);
    }


    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName} : 获取指定的Namespace (original openapi)
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}
     *
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param fillItemDetail  (required)
     * @return  (status code 200)
     */
    @Operation(
        operationId = "loadNamespace",
        summary = "获取指定的Namespace (original openapi)",
        description = "GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}",
        tags = { "Namespace Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenNamespaceDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}",
        produces = { "application/json" }
    )
    default ResponseEntity<OpenNamespaceDTO> loadNamespace(
        @Parameter(name = "appId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId,
        @Parameter(name = "env", description = "", required = true, in = ParameterIn.PATH) @PathVariable("env") String env,
        @Parameter(name = "clusterName", description = "", required = true, in = ParameterIn.PATH) @PathVariable("clusterName") String clusterName,
        @Parameter(name = "namespaceName", description = "", required = true, in = ParameterIn.PATH) @PathVariable("namespaceName") String namespaceName,
        @NotNull @Parameter(name = "fillItemDetail", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "fillItemDetail", required = true, defaultValue = "true") Boolean fillItemDetail
    ) {
        return getDelegate().loadNamespace(appId, env, clusterName, namespaceName, fillItemDetail);
    }

}
