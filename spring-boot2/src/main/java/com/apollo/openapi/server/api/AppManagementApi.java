/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.apollo.openapi.server.api;

import java.util.Map;
import com.apollo.openapi.server.model.MultiResponseEntity;
import com.apollo.openapi.server.model.OpenAppDTO;
import com.apollo.openapi.server.model.OpenCreateAppDTO;
import com.apollo.openapi.server.model.OpenEnvClusterDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-19T21:51:06.429+08:00[Asia/Shanghai]")
@Validated
@Tag(name = "App Management", description = "应用管理相关接口，包括应用的创建、查询、更新、删除等操作")
public interface AppManagementApi {

    default AppManagementApiDelegate getDelegate() {
        return new AppManagementApiDelegate() {};
    }

    /**
     * POST /openapi/v1/apps : 创建应用 (original openapi)
     * POST /openapi/v1/apps
     *
     * @param openCreateAppDTO  (required)
     * @return 应用创建成功 (status code 200)
     *         or 请求参数错误 (status code 400)
     *         or 权限不足 (status code 403)
     */
    @Operation(
        operationId = "createApp",
        summary = "创建应用 (original openapi)",
        description = "POST /openapi/v1/apps",
        tags = { "App Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "应用创建成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "请求参数错误", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Map.class))
            }),
            @ApiResponse(responseCode = "403", description = "权限不足", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Map.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/openapi/v1/apps",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Object> createApp(
        @Parameter(name = "OpenCreateAppDTO", description = "", required = true) @Valid @RequestBody OpenCreateAppDTO openCreateAppDTO
    ) {
        return getDelegate().createApp(openCreateAppDTO);
    }


    /**
     * POST /openapi/v1/apps/envs/{env} : 在指定环境创建应用(new added)
     * POST /openapi/v1/apps/envs/{env}
     *
     * @param env 环境标识，例如 DEV、FAT、UAT、PROD (required)
     * @param operator 操作人用户名 (required)
     * @param openAppDTO  (required)
     * @return 应用在指定环境创建成功 (status code 200)
     *         or 请求参数错误 (status code 400)
     *         or 权限不足 (status code 403)
     */
    @Operation(
        operationId = "createAppInEnv",
        summary = "在指定环境创建应用(new added)",
        description = "POST /openapi/v1/apps/envs/{env}",
        tags = { "App Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "应用在指定环境创建成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "请求参数错误", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Map.class))
            }),
            @ApiResponse(responseCode = "403", description = "权限不足", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Map.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/openapi/v1/apps/envs/{env}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Object> createAppInEnv(
        @Parameter(name = "env", description = "环境标识，例如 DEV、FAT、UAT、PROD", required = true, in = ParameterIn.PATH) @PathVariable("env") String env,
        @NotNull @Parameter(name = "operator", description = "操作人用户名", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "operator", required = true) String operator,
        @Parameter(name = "OpenAppDTO", description = "", required = true) @Valid @RequestBody OpenAppDTO openAppDTO
    ) {
        return getDelegate().createAppInEnv(env, operator, openAppDTO);
    }


    /**
     * DELETE /openapi/v1/apps/{appId} : 删除应用(new added)
     * DELETE /openapi/v1/apps/{appId}
     *
     * @param appId 应用ID (required)
     * @param operator 操作人用户名 (required)
     * @return 应用删除成功 (status code 200)
     *         or 权限不足，需要超级管理员权限 (status code 403)
     *         or 应用不存在 (status code 404)
     */
    @Operation(
        operationId = "deleteApp",
        summary = "删除应用(new added)",
        description = "DELETE /openapi/v1/apps/{appId}",
        tags = { "App Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "应用删除成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "403", description = "权限不足，需要超级管理员权限", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Map.class))
            }),
            @ApiResponse(responseCode = "404", description = "应用不存在", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Map.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/openapi/v1/apps/{appId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Object> deleteApp(
        @Parameter(name = "appId", description = "应用ID", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId,
        @NotNull @Parameter(name = "operator", description = "操作人用户名", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "operator", required = true) String operator
    ) {
        return getDelegate().deleteApp(appId, operator);
    }


    /**
     * GET /openapi/v1/apps : 查找应用 (original openapi)
     * POST /openapi/v1/apps
     *
     * @param appIds 查找应用 (optional)
     * @return 成功获取应用列表 (status code 200)
     *         or 未授权访问 (status code 401)
     */
    @Operation(
        operationId = "findApps",
        summary = "查找应用 (original openapi)",
        description = "POST /openapi/v1/apps",
        tags = { "App Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "成功获取应用列表", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = OpenAppDTO.class)))
            }),
            @ApiResponse(responseCode = "401", description = "未授权访问", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Map.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/openapi/v1/apps",
        produces = { "application/json" }
    )
    default ResponseEntity<List<OpenAppDTO>> findApps(
        @Parameter(name = "appIds", description = "查找应用", in = ParameterIn.QUERY) @Valid @RequestParam(value = "appIds", required = false) String appIds
    ) {
        return getDelegate().findApps(appIds);
    }


    /**
     * GET /openapi/v1/apps/authorized : 获取当前Consumer授权的应用列表 (original openapi)
     * GET /openapi/v1/apps/authorized
     *
     * @return 成功获取授权应用列表 (status code 200)
     *         or 未授权访问 (status code 401)
     */
    @Operation(
        operationId = "findAppsAuthorized",
        summary = "获取当前Consumer授权的应用列表 (original openapi)",
        description = "GET /openapi/v1/apps/authorized",
        tags = { "App Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "成功获取授权应用列表", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = OpenAppDTO.class)))
            }),
            @ApiResponse(responseCode = "401", description = "未授权访问", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Map.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/openapi/v1/apps/authorized",
        produces = { "application/json" }
    )
    default ResponseEntity<List<OpenAppDTO>> findAppsAuthorized(

    ) {
        return getDelegate().findAppsAuthorized();
    }


    /**
     * GET /openapi/v1/apps/{appId}/miss_envs : 查找缺失的环境(new added)
     * GET /openapi/v1/apps/{appId}/miss_envs
     *
     * @param appId 应用ID (required)
     * @return 成功获取应用缺失的环境列表 (status code 200)
     *         or 应用不存在 (status code 404)
     */
    @Operation(
        operationId = "findMissEnvs",
        summary = "查找缺失的环境(new added)",
        description = "GET /openapi/v1/apps/{appId}/miss_envs",
        tags = { "App Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "成功获取应用缺失的环境列表", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MultiResponseEntity.class))
            }),
            @ApiResponse(responseCode = "404", description = "应用不存在", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Map.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/openapi/v1/apps/{appId}/miss_envs",
        produces = { "application/json" }
    )
    default ResponseEntity<MultiResponseEntity> findMissEnvs(
        @Parameter(name = "appId", description = "应用ID", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId
    ) {
        return getDelegate().findMissEnvs(appId);
    }


    /**
     * GET /openapi/v1/apps/{appId} : 获取单个应用信息(new added)
     * GET /openapi/v1/apps/{appId}
     *
     * @param appId  (required)
     * @return 成功获取应用信息 (status code 200)
     *         or 应用不存在 (status code 404)
     */
    @Operation(
        operationId = "getApp",
        summary = "获取单个应用信息(new added)",
        description = "GET /openapi/v1/apps/{appId}",
        tags = { "App Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "成功获取应用信息", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenAppDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "应用不存在", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Map.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/openapi/v1/apps/{appId}",
        produces = { "application/json" }
    )
    default ResponseEntity<OpenAppDTO> getApp(
        @Parameter(name = "appId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId
    ) {
        return getDelegate().getApp(appId);
    }


    /**
     * GET /openapi/v1/apps/{appId}/navtree : 获取应用导航树(new added)
     * GET /openapi/v1/apps/{appId}/navtree
     *
     * @param appId 应用ID (required)
     * @return 成功获取应用导航树 (status code 200)
     */
    @Operation(
        operationId = "getAppNavTree",
        summary = "获取应用导航树(new added)",
        description = "GET /openapi/v1/apps/{appId}/navtree",
        tags = { "App Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "成功获取应用导航树", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MultiResponseEntity.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/openapi/v1/apps/{appId}/navtree",
        produces = { "application/json" }
    )
    default ResponseEntity<MultiResponseEntity> getAppNavTree(
        @Parameter(name = "appId", description = "应用ID", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId
    ) {
        return getDelegate().getAppNavTree(appId);
    }


    /**
     * GET /openapi/v1/apps/by-self : 获取当前Consumer的应用列表（分页）(new added)
     * GET /openapi/v1/apps/by-self
     *
     * @param page 页数 (required)
     * @param size 页大小 (required)
     * @return 成功获取Consumer的应用列表 (status code 200)
     *         or 未授权访问 (status code 401)
     */
    @Operation(
        operationId = "getAppsBySelf",
        summary = "获取当前Consumer的应用列表（分页）(new added)",
        description = "GET /openapi/v1/apps/by-self",
        tags = { "App Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "成功获取Consumer的应用列表", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = OpenAppDTO.class)))
            }),
            @ApiResponse(responseCode = "401", description = "未授权访问", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Map.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/openapi/v1/apps/by-self",
        produces = { "application/json" }
    )
    default ResponseEntity<List<OpenAppDTO>> getAppsBySelf(
        @NotNull @Min(0) @Parameter(name = "page", description = "页数", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = true) Integer page,
        @NotNull @Min(0) @Parameter(name = "size", description = "页大小", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = true) Integer size
    ) {
        return getDelegate().getAppsBySelf(page, size);
    }


    /**
     * GET /openapi/v1/apps/{appId}/envclusters : 获取应用的环境集群信息 (original openapi)
     * GET /openapi/v1/apps/{appId}/envclusters
     *
     * @param appId 应用ID (required)
     * @return 成功获取应用环境集群信息 (status code 200)
     *         or 应用不存在 (status code 404)
     */
    @Operation(
        operationId = "getEnvClusterInfo",
        summary = "获取应用的环境集群信息 (original openapi)",
        description = "GET /openapi/v1/apps/{appId}/envclusters",
        tags = { "App Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "成功获取应用环境集群信息", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = OpenEnvClusterDTO.class)))
            }),
            @ApiResponse(responseCode = "404", description = "应用不存在", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Map.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/openapi/v1/apps/{appId}/envclusters",
        produces = { "application/json" }
    )
    default ResponseEntity<List<OpenEnvClusterDTO>> getEnvClusterInfo(
        @Parameter(name = "appId", description = "应用ID", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId
    ) {
        return getDelegate().getEnvClusterInfo(appId);
    }


    /**
     * PUT /openapi/v1/apps/{appId} : 更新应用(new added)
     * PUT /openapi/v1/apps/{appId}
     *
     * @param appId 应用ID (required)
     * @param operator 操作人用户名 (required)
     * @param openAppDTO  (required)
     * @return 应用更新成功 (status code 200)
     *         or 请求参数错误 (status code 400)
     *         or 权限不足 (status code 403)
     */
    @Operation(
        operationId = "updateApp",
        summary = "更新应用(new added)",
        description = "PUT /openapi/v1/apps/{appId}",
        tags = { "App Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "应用更新成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenAppDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "请求参数错误", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Map.class))
            }),
            @ApiResponse(responseCode = "403", description = "权限不足", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Map.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/openapi/v1/apps/{appId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<OpenAppDTO> updateApp(
        @Parameter(name = "appId", description = "应用ID", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId,
        @NotNull @Parameter(name = "operator", description = "操作人用户名", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "operator", required = true) String operator,
        @Parameter(name = "OpenAppDTO", description = "", required = true) @Valid @RequestBody OpenAppDTO openAppDTO
    ) {
        return getDelegate().updateApp(appId, operator, openAppDTO);
    }

}
