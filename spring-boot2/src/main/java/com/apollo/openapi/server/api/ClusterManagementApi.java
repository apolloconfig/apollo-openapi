/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.apollo.openapi.server.api;

import java.util.Map;
import com.apollo.openapi.server.model.OpenClusterDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "Cluster Management", description = "集群管理相关接口，包括集群的创建、查询、删除等操作")
public interface ClusterManagementApi {

    default ClusterManagementApiDelegate getDelegate() {
        return new ClusterManagementApiDelegate() {};
    }

    /**
     * POST /openapi/v1/envs/{env}/apps/{appId}/clusters : 创建集群 (original openapi)
     * POST /openapi/v1/envs/{env}/apps/{appId}/clusters
     *
     * @param appId 应用ID (required)
     * @param env  (required)
     * @param openClusterDTO  (required)
     * @return 集群创建成功 (status code 200)
     *         or 请求参数错误 (status code 400)
     *         or 权限不足 (status code 403)
     */
    @Operation(
        operationId = "createCluster",
        summary = "创建集群 (original openapi)",
        description = "POST /openapi/v1/envs/{env}/apps/{appId}/clusters",
        tags = { "Cluster Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "集群创建成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenClusterDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "请求参数错误", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Map.class))
            }),
            @ApiResponse(responseCode = "403", description = "权限不足", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Map.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/openapi/v1/envs/{env}/apps/{appId}/clusters",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<OpenClusterDTO> createCluster(
        @Parameter(name = "appId", description = "应用ID", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId,
        @Parameter(name = "env", description = "", required = true, in = ParameterIn.PATH) @PathVariable("env") String env,
        @Parameter(name = "OpenClusterDTO", description = "", required = true) @Valid @RequestBody OpenClusterDTO openClusterDTO
    ) {
        return getDelegate().createCluster(appId, env, openClusterDTO);
    }


    /**
     * DELETE /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName} : 删除集群 (new added)
     * DELETE /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}
     *
     * @param env  (required)
     * @param appId  (required)
     * @param clusterName  (required)
     * @param operator 操作人用户名，openapi外部调用时需传入 (optional)
     * @return 集群删除成功 (status code 200)
     *         or 删除失败，集群可能包含配置 (status code 400)
     *         or 权限不足 (status code 403)
     *         or 集群不存在 (status code 404)
     */
    @Operation(
        operationId = "deleteCluster",
        summary = "删除集群 (new added)",
        description = "DELETE /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}",
        tags = { "Cluster Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "集群删除成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "删除失败，集群可能包含配置", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Map.class))
            }),
            @ApiResponse(responseCode = "403", description = "权限不足", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Map.class))
            }),
            @ApiResponse(responseCode = "404", description = "集群不存在", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Map.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}",
        produces = { "application/json" }
    )
    default ResponseEntity<Object> deleteCluster(
        @Parameter(name = "env", description = "", required = true, in = ParameterIn.PATH) @PathVariable("env") String env,
        @Parameter(name = "appId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId,
        @Parameter(name = "clusterName", description = "", required = true, in = ParameterIn.PATH) @PathVariable("clusterName") String clusterName,
        @Parameter(name = "operator", description = "操作人用户名，openapi外部调用时需传入", in = ParameterIn.QUERY) @Valid @RequestParam(value = "operator", required = false) String operator
    ) {
        return getDelegate().deleteCluster(env, appId, clusterName, operator);
    }


    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName} : 获取指定集群信息 (original openapi)
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}
     *
     * @param appId  (required)
     * @param clusterName  (required)
     * @param env  (required)
     * @return 成功获取集群信息 (status code 200)
     *         or 集群不存在 (status code 404)
     */
    @Operation(
        operationId = "getCluster",
        summary = "获取指定集群信息 (original openapi)",
        description = "GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}",
        tags = { "Cluster Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "成功获取集群信息", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenClusterDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "集群不存在", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Map.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}",
        produces = { "application/json" }
    )
    default ResponseEntity<OpenClusterDTO> getCluster(
        @Parameter(name = "appId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId,
        @Parameter(name = "clusterName", description = "", required = true, in = ParameterIn.PATH) @PathVariable("clusterName") String clusterName,
        @Parameter(name = "env", description = "", required = true, in = ParameterIn.PATH) @PathVariable("env") String env
    ) {
        return getDelegate().getCluster(appId, clusterName, env);
    }

}
