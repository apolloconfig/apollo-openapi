# coding: utf-8

"""
    Apollo OpenAPI

    <p>Apollo配置中心OpenAPI接口文档</p>  <h2>认证方式</h2> <p>所有 API 接口都需要通过 <code>Authorization</code> header 进行身份验证。</p>  <h3>获取 Token 的方式：</h3> <ol>   <li><b>Portal 管理界面获取</b>：登录 Portal → 管理员工具 → 开放平台授权管理 → 创建第三方应用，获取 Token。</li>   <li><b>Token 格式</b>：<code>Authorization: token_value</code></li>   <li><b>Token 权限</b>：按应用/环境/命名空间授予，建议不同用途分别创建。</li> </ol>  <h3>使用示例</h3> <pre><code class=\"language-bash\">curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\ -H \"Authorization: your_token_here\"</code></pre>   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from apollo_openapi import schemas  # noqa: F401


class MultiResponseEntity(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A response container holding multiple RichResponseEntity objects
    """


    class MetaOapg:
        required = {
            "code",
            "entities",
        }

        class properties:
            code = schemas.IntSchema


            class entities(
                schemas.ListSchema
            ):


                class MetaOapg:

                    @staticmethod
                    def items() -> typing.Type['RichResponseEntity']:
                        return RichResponseEntity

                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['RichResponseEntity'], typing.List['RichResponseEntity']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'entities':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> 'RichResponseEntity':
                    return super().__getitem__(i)
            __annotations__ = {
                "code": code,
                "entities": entities,
            }

    code: MetaOapg.properties.code
    entities: MetaOapg.properties.entities

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entities"]) -> MetaOapg.properties.entities: ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...

    def __getitem__(self, name: typing.Union[typing_extensions.Literal["code", "entities", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)


    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entities"]) -> MetaOapg.properties.entities: ...

    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...

    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["code", "entities", ], str]):
        return super().get_item_oapg(name)


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        code: typing.Union[MetaOapg.properties.code, decimal.Decimal, int, ],
        entities: typing.Union[MetaOapg.properties.entities, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MultiResponseEntity':
        return super().__new__(
            cls,
            *_args,
            code=code,
            entities=entities,
            _configuration=_configuration,
            **kwargs,
        )

from apollo_openapi.model.rich_response_entity import RichResponseEntity
