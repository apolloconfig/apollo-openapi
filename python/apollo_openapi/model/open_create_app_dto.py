# coding: utf-8

"""
    Apollo OpenAPI

    <p>Apollo配置中心OpenAPI接口文档</p>  <h2>认证方式</h2> <p>所有 API 接口都需要通过 <code>Authorization</code> header 进行身份验证。</p>  <h3>获取 Token 的方式：</h3> <ol>   <li><b>Portal 管理界面获取</b>：登录 Portal → 管理员工具 → 开放平台授权管理 → 创建第三方应用，获取 Token。</li>   <li><b>Token 格式</b>：<code>Authorization: token_value</code></li>   <li><b>Token 权限</b>：按应用/环境/命名空间授予，建议不同用途分别创建。</li> </ol>  <h3>使用示例</h3> <pre><code class=\"language-bash\">curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\ -H \"Authorization: your_token_here\"</code></pre>   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from apollo_openapi import schemas  # noqa: F401


class OpenCreateAppDTO(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    创建Apollo应用的请求数据传输对象，包含创建应用所需的所有信息
    """


    class MetaOapg:

        class properties:
            assignAppRoleToSelf = schemas.BoolSchema


            class admins(
                schemas.ListSchema
            ):


                class MetaOapg:
                    unique_items = True
                    items = schemas.StrSchema

                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'admins':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)

            @staticmethod
            def app() -> typing.Type['OpenAppDTO']:
                return OpenAppDTO
            __annotations__ = {
                "assignAppRoleToSelf": assignAppRoleToSelf,
                "admins": admins,
                "app": app,
            }

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assignAppRoleToSelf"]) -> MetaOapg.properties.assignAppRoleToSelf: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["admins"]) -> MetaOapg.properties.admins: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["app"]) -> 'OpenAppDTO': ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...

    def __getitem__(self, name: typing.Union[typing_extensions.Literal["assignAppRoleToSelf", "admins", "app", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)


    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assignAppRoleToSelf"]) -> typing.Union[MetaOapg.properties.assignAppRoleToSelf, schemas.Unset]: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["admins"]) -> typing.Union[MetaOapg.properties.admins, schemas.Unset]: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["app"]) -> typing.Union['OpenAppDTO', schemas.Unset]: ...

    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...

    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["assignAppRoleToSelf", "admins", "app", ], str]):
        return super().get_item_oapg(name)


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        assignAppRoleToSelf: typing.Union[MetaOapg.properties.assignAppRoleToSelf, bool, schemas.Unset] = schemas.unset,
        admins: typing.Union[MetaOapg.properties.admins, list, tuple, schemas.Unset] = schemas.unset,
        app: typing.Union['OpenAppDTO', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OpenCreateAppDTO':
        return super().__new__(
            cls,
            *_args,
            assignAppRoleToSelf=assignAppRoleToSelf,
            admins=admins,
            app=app,
            _configuration=_configuration,
            **kwargs,
        )

from apollo_openapi.model.open_app_dto import OpenAppDTO
