/*
 * Apollo OpenAPI
 * <p>Apollo配置中心OpenAPI接口文档</p>  <h2>认证方式</h2> <p>所有 API 接口都需要通过 <code>Authorization</code> header 进行身份验证。</p>  <h3>获取 Token 的方式：</h3> <ol>   <li><b>Portal 管理界面获取</b>：登录 Portal → 管理员工具 → 开放平台授权管理 → 创建第三方应用，获取 Token。</li>   <li><b>Token 格式</b>：<code>Authorization: token_value</code></li>   <li><b>Token 权限</b>：按应用/环境/命名空间授予，建议不同用途分别创建。</li> </ol>  <h3>使用示例</h3> <pre><code class=\"language-bash\">curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\ -H \"Authorization: your_token_here\"</code></pre>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 命名空间灰度删除发布请求数据传输对象，用于创建删除特定配置项的灰度发布
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class NamespaceGrayDelReleaseDTO {
  public static final String SERIALIZED_NAME_RELEASE_TITLE = "releaseTitle";
  @SerializedName(SERIALIZED_NAME_RELEASE_TITLE)
  private String releaseTitle;

  public static final String SERIALIZED_NAME_RELEASE_COMMENT = "releaseComment";
  @SerializedName(SERIALIZED_NAME_RELEASE_COMMENT)
  private String releaseComment;

  public static final String SERIALIZED_NAME_RELEASED_BY = "releasedBy";
  @SerializedName(SERIALIZED_NAME_RELEASED_BY)
  private String releasedBy;

  public static final String SERIALIZED_NAME_IS_EMERGENCY_PUBLISH = "isEmergencyPublish";
  @SerializedName(SERIALIZED_NAME_IS_EMERGENCY_PUBLISH)
  private Boolean isEmergencyPublish;

  public static final String SERIALIZED_NAME_GRAY_DEL_KEYS = "grayDelKeys";
  @SerializedName(SERIALIZED_NAME_GRAY_DEL_KEYS)
  private List<String> grayDelKeys;

  public NamespaceGrayDelReleaseDTO() {
  }

  public NamespaceGrayDelReleaseDTO releaseTitle(String releaseTitle) {

    this.releaseTitle = releaseTitle;
    return this;
  }

   /**
   * 发布标题，用于标识这次灰度删除发布的名称或版本号
   * @return releaseTitle
  **/
  @javax.annotation.Nullable
  public String getReleaseTitle() {
    return releaseTitle;
  }


  public void setReleaseTitle(String releaseTitle) {
    this.releaseTitle = releaseTitle;
  }


  public NamespaceGrayDelReleaseDTO releaseComment(String releaseComment) {

    this.releaseComment = releaseComment;
    return this;
  }

   /**
   * 发布备注，详细描述本次灰度删除发布的目的和删除的配置项
   * @return releaseComment
  **/
  @javax.annotation.Nullable
  public String getReleaseComment() {
    return releaseComment;
  }


  public void setReleaseComment(String releaseComment) {
    this.releaseComment = releaseComment;
  }


  public NamespaceGrayDelReleaseDTO releasedBy(String releasedBy) {

    this.releasedBy = releasedBy;
    return this;
  }

   /**
   * 发布操作者用户名，记录是谁执行了这次灰度删除发布操作
   * @return releasedBy
  **/
  @javax.annotation.Nullable
  public String getReleasedBy() {
    return releasedBy;
  }


  public void setReleasedBy(String releasedBy) {
    this.releasedBy = releasedBy;
  }


  public NamespaceGrayDelReleaseDTO isEmergencyPublish(Boolean isEmergencyPublish) {

    this.isEmergencyPublish = isEmergencyPublish;
    return this;
  }

   /**
   * 是否为紧急发布，紧急发布可能会跳过某些审核流程
   * @return isEmergencyPublish
  **/
  @javax.annotation.Nullable
  public Boolean getIsEmergencyPublish() {
    return isEmergencyPublish;
  }


  public void setIsEmergencyPublish(Boolean isEmergencyPublish) {
    this.isEmergencyPublish = isEmergencyPublish;
  }


  public NamespaceGrayDelReleaseDTO grayDelKeys(List<String> grayDelKeys) {

    this.grayDelKeys = grayDelKeys;
    return this;
  }

  public NamespaceGrayDelReleaseDTO addGrayDelKeysItem(String grayDelKeysItem) {
    if (this.grayDelKeys == null) {
      this.grayDelKeys = new ArrayList<>();
    }
    this.grayDelKeys.add(grayDelKeysItem);
    return this;
  }

   /**
   * 需要在灰度发布中删除的配置项键名列表
   * @return grayDelKeys
  **/
  @javax.annotation.Nullable
  public List<String> getGrayDelKeys() {
    return grayDelKeys;
  }


  public void setGrayDelKeys(List<String> grayDelKeys) {
    this.grayDelKeys = grayDelKeys;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NamespaceGrayDelReleaseDTO namespaceGrayDelReleaseDTO = (NamespaceGrayDelReleaseDTO) o;
    return Objects.equals(this.releaseTitle, namespaceGrayDelReleaseDTO.releaseTitle) &&
        Objects.equals(this.releaseComment, namespaceGrayDelReleaseDTO.releaseComment) &&
        Objects.equals(this.releasedBy, namespaceGrayDelReleaseDTO.releasedBy) &&
        Objects.equals(this.isEmergencyPublish, namespaceGrayDelReleaseDTO.isEmergencyPublish) &&
        Objects.equals(this.grayDelKeys, namespaceGrayDelReleaseDTO.grayDelKeys);
  }

  @Override
  public int hashCode() {
    return Objects.hash(releaseTitle, releaseComment, releasedBy, isEmergencyPublish, grayDelKeys);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NamespaceGrayDelReleaseDTO {\n");
    sb.append("    releaseTitle: ").append(toIndentedString(releaseTitle)).append("\n");
    sb.append("    releaseComment: ").append(toIndentedString(releaseComment)).append("\n");
    sb.append("    releasedBy: ").append(toIndentedString(releasedBy)).append("\n");
    sb.append("    isEmergencyPublish: ").append(toIndentedString(isEmergencyPublish)).append("\n");
    sb.append("    grayDelKeys: ").append(toIndentedString(grayDelKeys)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("releaseTitle");
    openapiFields.add("releaseComment");
    openapiFields.add("releasedBy");
    openapiFields.add("isEmergencyPublish");
    openapiFields.add("grayDelKeys");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to NamespaceGrayDelReleaseDTO
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!NamespaceGrayDelReleaseDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NamespaceGrayDelReleaseDTO is not found in the empty JSON string", NamespaceGrayDelReleaseDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!NamespaceGrayDelReleaseDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NamespaceGrayDelReleaseDTO` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("releaseTitle") != null && !jsonObj.get("releaseTitle").isJsonNull()) && !jsonObj.get("releaseTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `releaseTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("releaseTitle").toString()));
      }
      if ((jsonObj.get("releaseComment") != null && !jsonObj.get("releaseComment").isJsonNull()) && !jsonObj.get("releaseComment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `releaseComment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("releaseComment").toString()));
      }
      if ((jsonObj.get("releasedBy") != null && !jsonObj.get("releasedBy").isJsonNull()) && !jsonObj.get("releasedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `releasedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("releasedBy").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("grayDelKeys") != null && !jsonObj.get("grayDelKeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `grayDelKeys` to be an array in the JSON string but got `%s`", jsonObj.get("grayDelKeys").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NamespaceGrayDelReleaseDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NamespaceGrayDelReleaseDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NamespaceGrayDelReleaseDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NamespaceGrayDelReleaseDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<NamespaceGrayDelReleaseDTO>() {
           @Override
           public void write(JsonWriter out, NamespaceGrayDelReleaseDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NamespaceGrayDelReleaseDTO read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NamespaceGrayDelReleaseDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NamespaceGrayDelReleaseDTO
  * @throws IOException if the JSON string is invalid with respect to NamespaceGrayDelReleaseDTO
  */
  public static NamespaceGrayDelReleaseDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NamespaceGrayDelReleaseDTO.class);
  }

 /**
  * Convert an instance of NamespaceGrayDelReleaseDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
