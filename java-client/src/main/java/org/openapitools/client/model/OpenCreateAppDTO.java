/*
 * Apollo OpenAPI
 * <p>Apollo配置中心OpenAPI接口文档</p>  <h2>认证方式</h2> <p>所有 API 接口都需要通过 <code>Authorization</code> header 进行身份验证。</p>  <h3>获取 Token 的方式：</h3> <ol>   <li><b>Portal 管理界面获取</b>：登录 Portal → 管理员工具 → 开放平台授权管理 → 创建第三方应用，获取 Token。</li>   <li><b>Token 格式</b>：<code>Authorization: token_value</code></li>   <li><b>Token 权限</b>：按应用/环境/命名空间授予，建议不同用途分别创建。</li> </ol>  <h3>使用示例</h3> <pre><code class=\"language-bash\">curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\ -H \"Authorization: your_token_here\"</code></pre>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.OpenAppDTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 创建Apollo应用的请求数据传输对象，包含创建应用所需的所有信息
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class OpenCreateAppDTO {
  public static final String SERIALIZED_NAME_ASSIGN_APP_ROLE_TO_SELF = "assignAppRoleToSelf";
  @SerializedName(SERIALIZED_NAME_ASSIGN_APP_ROLE_TO_SELF)
  private Boolean assignAppRoleToSelf;

  public static final String SERIALIZED_NAME_ADMINS = "admins";
  @SerializedName(SERIALIZED_NAME_ADMINS)
  private List<String> admins;

  public static final String SERIALIZED_NAME_APP = "app";
  @SerializedName(SERIALIZED_NAME_APP)
  private OpenAppDTO app;

  public OpenCreateAppDTO() {
  }

  public OpenCreateAppDTO assignAppRoleToSelf(Boolean assignAppRoleToSelf) {

    this.assignAppRoleToSelf = assignAppRoleToSelf;
    return this;
  }

   /**
   * 是否将应用角色分配给当前用户。当设置为true时，当前token用户将获得该应用的完全操作权限
   * @return assignAppRoleToSelf
  **/
  @javax.annotation.Nullable
  public Boolean getAssignAppRoleToSelf() {
    return assignAppRoleToSelf;
  }


  public void setAssignAppRoleToSelf(Boolean assignAppRoleToSelf) {
    this.assignAppRoleToSelf = assignAppRoleToSelf;
  }


  public OpenCreateAppDTO admins(List<String> admins) {

    this.admins = admins;
    return this;
  }

  public OpenCreateAppDTO addAdminsItem(String adminsItem) {
    if (this.admins == null) {
      this.admins = new ArrayList<>();
    }
    this.admins.add(adminsItem);
    return this;
  }

   /**
   * 应用管理员用户名列表。应用负责人默认具有项目管理员权限。管理员可以创建命名空间、集群并分配用户权限
   * @return admins
  **/
  @javax.annotation.Nullable
  public List<String> getAdmins() {
    return admins;
  }


  public void setAdmins(List<String> admins) {
    this.admins = admins;
  }


  public OpenCreateAppDTO app(OpenAppDTO app) {

    this.app = app;
    return this;
  }

   /**
   * Get app
   * @return app
  **/
  @javax.annotation.Nullable
  public OpenAppDTO getApp() {
    return app;
  }


  public void setApp(OpenAppDTO app) {
    this.app = app;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OpenCreateAppDTO openCreateAppDTO = (OpenCreateAppDTO) o;
    return Objects.equals(this.assignAppRoleToSelf, openCreateAppDTO.assignAppRoleToSelf) &&
        Objects.equals(this.admins, openCreateAppDTO.admins) &&
        Objects.equals(this.app, openCreateAppDTO.app);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assignAppRoleToSelf, admins, app);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OpenCreateAppDTO {\n");
    sb.append("    assignAppRoleToSelf: ").append(toIndentedString(assignAppRoleToSelf)).append("\n");
    sb.append("    admins: ").append(toIndentedString(admins)).append("\n");
    sb.append("    app: ").append(toIndentedString(app)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assignAppRoleToSelf");
    openapiFields.add("admins");
    openapiFields.add("app");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OpenCreateAppDTO
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OpenCreateAppDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OpenCreateAppDTO is not found in the empty JSON string", OpenCreateAppDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OpenCreateAppDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OpenCreateAppDTO` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("admins") != null && !jsonObj.get("admins").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `admins` to be an array in the JSON string but got `%s`", jsonObj.get("admins").toString()));
      }
      // validate the optional field `app`
      if (jsonObj.get("app") != null && !jsonObj.get("app").isJsonNull()) {
        OpenAppDTO.validateJsonObject(jsonObj.getAsJsonObject("app"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OpenCreateAppDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OpenCreateAppDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OpenCreateAppDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OpenCreateAppDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<OpenCreateAppDTO>() {
           @Override
           public void write(JsonWriter out, OpenCreateAppDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OpenCreateAppDTO read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OpenCreateAppDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OpenCreateAppDTO
  * @throws IOException if the JSON string is invalid with respect to OpenCreateAppDTO
  */
  public static OpenCreateAppDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OpenCreateAppDTO.class);
  }

 /**
  * Convert an instance of OpenCreateAppDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
