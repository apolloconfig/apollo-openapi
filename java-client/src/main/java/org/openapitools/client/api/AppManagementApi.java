/*
 * Apollo OpenAPI
 * <p>Apollo配置中心OpenAPI接口文档</p>  <h2>认证方式</h2> <p>所有 API 接口都需要通过 <code>Authorization</code> header 进行身份验证。</p>  <h3>获取 Token 的方式：</h3> <ol>   <li><b>Portal 管理界面获取</b>：登录 Portal → 管理员工具 → 开放平台授权管理 → 创建第三方应用，获取 Token。</li>   <li><b>Token 格式</b>：<code>Authorization: token_value</code></li>   <li><b>Token 权限</b>：按应用/环境/命名空间授予，建议不同用途分别创建。</li> </ol>  <h3>使用示例</h3> <pre><code class=\"language-bash\">curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\ -H \"Authorization: your_token_here\"</code></pre>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.MultiResponseEntity;
import org.openapitools.client.model.OpenAppDTO;
import org.openapitools.client.model.OpenCreateAppDTO;
import org.openapitools.client.model.OpenEnvClusterDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AppManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AppManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AppManagementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createApp
     * @param openCreateAppDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 应用创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAppCall(OpenCreateAppDTO openCreateAppDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = openCreateAppDTO;

        // create path and map variables
        String localVarPath = "/openapi/v1/apps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAppValidateBeforeCall(OpenCreateAppDTO openCreateAppDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'openCreateAppDTO' is set
        if (openCreateAppDTO == null) {
            throw new ApiException("Missing the required parameter 'openCreateAppDTO' when calling createApp(Async)");
        }

        return createAppCall(openCreateAppDTO, _callback);

    }

    /**
     * 创建应用 (original openapi)
     * POST /openapi/v1/apps
     * @param openCreateAppDTO  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 应用创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public Object createApp(OpenCreateAppDTO openCreateAppDTO) throws ApiException {
        ApiResponse<Object> localVarResp = createAppWithHttpInfo(openCreateAppDTO);
        return localVarResp.getData();
    }

    /**
     * 创建应用 (original openapi)
     * POST /openapi/v1/apps
     * @param openCreateAppDTO  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 应用创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createAppWithHttpInfo(OpenCreateAppDTO openCreateAppDTO) throws ApiException {
        okhttp3.Call localVarCall = createAppValidateBeforeCall(openCreateAppDTO, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 创建应用 (original openapi) (asynchronously)
     * POST /openapi/v1/apps
     * @param openCreateAppDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 应用创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAppAsync(OpenCreateAppDTO openCreateAppDTO, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAppValidateBeforeCall(openCreateAppDTO, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAppInEnv
     * @param env 环境标识，例如 DEV、FAT、UAT、PROD (required)
     * @param operator 操作人用户名 (required)
     * @param openAppDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 应用在指定环境创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAppInEnvCall(String env, String operator, OpenAppDTO openAppDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = openAppDTO;

        // create path and map variables
        String localVarPath = "/openapi/v1/apps/envs/{env}"
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operator", operator));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAppInEnvValidateBeforeCall(String env, String operator, OpenAppDTO openAppDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling createAppInEnv(Async)");
        }

        // verify the required parameter 'operator' is set
        if (operator == null) {
            throw new ApiException("Missing the required parameter 'operator' when calling createAppInEnv(Async)");
        }

        // verify the required parameter 'openAppDTO' is set
        if (openAppDTO == null) {
            throw new ApiException("Missing the required parameter 'openAppDTO' when calling createAppInEnv(Async)");
        }

        return createAppInEnvCall(env, operator, openAppDTO, _callback);

    }

    /**
     * 在指定环境创建应用(new added)
     * POST /openapi/v1/apps/envs/{env}
     * @param env 环境标识，例如 DEV、FAT、UAT、PROD (required)
     * @param operator 操作人用户名 (required)
     * @param openAppDTO  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 应用在指定环境创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public Object createAppInEnv(String env, String operator, OpenAppDTO openAppDTO) throws ApiException {
        ApiResponse<Object> localVarResp = createAppInEnvWithHttpInfo(env, operator, openAppDTO);
        return localVarResp.getData();
    }

    /**
     * 在指定环境创建应用(new added)
     * POST /openapi/v1/apps/envs/{env}
     * @param env 环境标识，例如 DEV、FAT、UAT、PROD (required)
     * @param operator 操作人用户名 (required)
     * @param openAppDTO  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 应用在指定环境创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createAppInEnvWithHttpInfo(String env, String operator, OpenAppDTO openAppDTO) throws ApiException {
        okhttp3.Call localVarCall = createAppInEnvValidateBeforeCall(env, operator, openAppDTO, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 在指定环境创建应用(new added) (asynchronously)
     * POST /openapi/v1/apps/envs/{env}
     * @param env 环境标识，例如 DEV、FAT、UAT、PROD (required)
     * @param operator 操作人用户名 (required)
     * @param openAppDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 应用在指定环境创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAppInEnvAsync(String env, String operator, OpenAppDTO openAppDTO, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAppInEnvValidateBeforeCall(env, operator, openAppDTO, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteApp
     * @param appId 应用ID (required)
     * @param operator 操作人用户名 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 应用删除成功 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足，需要超级管理员权限 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 应用不存在 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAppCall(String appId, String operator, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/apps/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operator", operator));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAppValidateBeforeCall(String appId, String operator, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteApp(Async)");
        }

        // verify the required parameter 'operator' is set
        if (operator == null) {
            throw new ApiException("Missing the required parameter 'operator' when calling deleteApp(Async)");
        }

        return deleteAppCall(appId, operator, _callback);

    }

    /**
     * 删除应用(new added)
     * DELETE /openapi/v1/apps/{appId}
     * @param appId 应用ID (required)
     * @param operator 操作人用户名 (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 应用删除成功 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足，需要超级管理员权限 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 应用不存在 </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteApp(String appId, String operator) throws ApiException {
        ApiResponse<Object> localVarResp = deleteAppWithHttpInfo(appId, operator);
        return localVarResp.getData();
    }

    /**
     * 删除应用(new added)
     * DELETE /openapi/v1/apps/{appId}
     * @param appId 应用ID (required)
     * @param operator 操作人用户名 (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 应用删除成功 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足，需要超级管理员权限 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 应用不存在 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteAppWithHttpInfo(String appId, String operator) throws ApiException {
        okhttp3.Call localVarCall = deleteAppValidateBeforeCall(appId, operator, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 删除应用(new added) (asynchronously)
     * DELETE /openapi/v1/apps/{appId}
     * @param appId 应用ID (required)
     * @param operator 操作人用户名 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 应用删除成功 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足，需要超级管理员权限 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 应用不存在 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAppAsync(String appId, String operator, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAppValidateBeforeCall(appId, operator, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findApps
     * @param appIds 查找应用 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取应用列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权访问 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAppsCall(String appIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/apps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("appIds", appIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findAppsValidateBeforeCall(String appIds, final ApiCallback _callback) throws ApiException {
        return findAppsCall(appIds, _callback);

    }

    /**
     * 查找应用 (original openapi)
     * POST /openapi/v1/apps
     * @param appIds 查找应用 (optional)
     * @return List&lt;OpenAppDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取应用列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权访问 </td><td>  -  </td></tr>
     </table>
     */
    public List<OpenAppDTO> findApps(String appIds) throws ApiException {
        ApiResponse<List<OpenAppDTO>> localVarResp = findAppsWithHttpInfo(appIds);
        return localVarResp.getData();
    }

    /**
     * 查找应用 (original openapi)
     * POST /openapi/v1/apps
     * @param appIds 查找应用 (optional)
     * @return ApiResponse&lt;List&lt;OpenAppDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取应用列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权访问 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OpenAppDTO>> findAppsWithHttpInfo(String appIds) throws ApiException {
        okhttp3.Call localVarCall = findAppsValidateBeforeCall(appIds, null);
        Type localVarReturnType = new TypeToken<List<OpenAppDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 查找应用 (original openapi) (asynchronously)
     * POST /openapi/v1/apps
     * @param appIds 查找应用 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取应用列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权访问 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAppsAsync(String appIds, final ApiCallback<List<OpenAppDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findAppsValidateBeforeCall(appIds, _callback);
        Type localVarReturnType = new TypeToken<List<OpenAppDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findAppsAuthorized
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取授权应用列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权访问 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAppsAuthorizedCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/apps/authorized";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findAppsAuthorizedValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return findAppsAuthorizedCall(_callback);

    }

    /**
     * 获取当前Consumer授权的应用列表 (original openapi)
     * GET /openapi/v1/apps/authorized
     * @return List&lt;OpenAppDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取授权应用列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权访问 </td><td>  -  </td></tr>
     </table>
     */
    public List<OpenAppDTO> findAppsAuthorized() throws ApiException {
        ApiResponse<List<OpenAppDTO>> localVarResp = findAppsAuthorizedWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 获取当前Consumer授权的应用列表 (original openapi)
     * GET /openapi/v1/apps/authorized
     * @return ApiResponse&lt;List&lt;OpenAppDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取授权应用列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权访问 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OpenAppDTO>> findAppsAuthorizedWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = findAppsAuthorizedValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<OpenAppDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取当前Consumer授权的应用列表 (original openapi) (asynchronously)
     * GET /openapi/v1/apps/authorized
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取授权应用列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权访问 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAppsAuthorizedAsync(final ApiCallback<List<OpenAppDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findAppsAuthorizedValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<OpenAppDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findMissEnvs
     * @param appId 应用ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取应用缺失的环境列表 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 应用不存在 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findMissEnvsCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/apps/{appId}/miss_envs"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findMissEnvsValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling findMissEnvs(Async)");
        }

        return findMissEnvsCall(appId, _callback);

    }

    /**
     * 查找缺失的环境(new added)
     * GET /openapi/v1/apps/{appId}/miss_envs
     * @param appId 应用ID (required)
     * @return MultiResponseEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取应用缺失的环境列表 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 应用不存在 </td><td>  -  </td></tr>
     </table>
     */
    public MultiResponseEntity findMissEnvs(String appId) throws ApiException {
        ApiResponse<MultiResponseEntity> localVarResp = findMissEnvsWithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 查找缺失的环境(new added)
     * GET /openapi/v1/apps/{appId}/miss_envs
     * @param appId 应用ID (required)
     * @return ApiResponse&lt;MultiResponseEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取应用缺失的环境列表 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 应用不存在 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MultiResponseEntity> findMissEnvsWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = findMissEnvsValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<MultiResponseEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 查找缺失的环境(new added) (asynchronously)
     * GET /openapi/v1/apps/{appId}/miss_envs
     * @param appId 应用ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取应用缺失的环境列表 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 应用不存在 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findMissEnvsAsync(String appId, final ApiCallback<MultiResponseEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = findMissEnvsValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<MultiResponseEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApp
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取应用信息 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 应用不存在 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAppCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/apps/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAppValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getApp(Async)");
        }

        return getAppCall(appId, _callback);

    }

    /**
     * 获取单个应用信息(new added)
     * GET /openapi/v1/apps/{appId}
     * @param appId  (required)
     * @return OpenAppDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取应用信息 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 应用不存在 </td><td>  -  </td></tr>
     </table>
     */
    public OpenAppDTO getApp(String appId) throws ApiException {
        ApiResponse<OpenAppDTO> localVarResp = getAppWithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 获取单个应用信息(new added)
     * GET /openapi/v1/apps/{appId}
     * @param appId  (required)
     * @return ApiResponse&lt;OpenAppDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取应用信息 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 应用不存在 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenAppDTO> getAppWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = getAppValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<OpenAppDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取单个应用信息(new added) (asynchronously)
     * GET /openapi/v1/apps/{appId}
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取应用信息 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 应用不存在 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAppAsync(String appId, final ApiCallback<OpenAppDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAppValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<OpenAppDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAppNavTree
     * @param appId 应用ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取应用导航树 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAppNavTreeCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/apps/{appId}/navtree"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAppNavTreeValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getAppNavTree(Async)");
        }

        return getAppNavTreeCall(appId, _callback);

    }

    /**
     * 获取应用导航树(new added)
     * GET /openapi/v1/apps/{appId}/navtree
     * @param appId 应用ID (required)
     * @return MultiResponseEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取应用导航树 </td><td>  -  </td></tr>
     </table>
     */
    public MultiResponseEntity getAppNavTree(String appId) throws ApiException {
        ApiResponse<MultiResponseEntity> localVarResp = getAppNavTreeWithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 获取应用导航树(new added)
     * GET /openapi/v1/apps/{appId}/navtree
     * @param appId 应用ID (required)
     * @return ApiResponse&lt;MultiResponseEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取应用导航树 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MultiResponseEntity> getAppNavTreeWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = getAppNavTreeValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<MultiResponseEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取应用导航树(new added) (asynchronously)
     * GET /openapi/v1/apps/{appId}/navtree
     * @param appId 应用ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取应用导航树 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAppNavTreeAsync(String appId, final ApiCallback<MultiResponseEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAppNavTreeValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<MultiResponseEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAppsBySelf
     * @param page 页数 (required)
     * @param size 页大小 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取Consumer的应用列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权访问 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAppsBySelfCall(Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/apps/by-self";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAppsBySelfValidateBeforeCall(Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling getAppsBySelf(Async)");
        }

        // verify the required parameter 'size' is set
        if (size == null) {
            throw new ApiException("Missing the required parameter 'size' when calling getAppsBySelf(Async)");
        }

        return getAppsBySelfCall(page, size, _callback);

    }

    /**
     * 获取当前Consumer的应用列表（分页）(new added)
     * GET /openapi/v1/apps/by-self
     * @param page 页数 (required)
     * @param size 页大小 (required)
     * @return List&lt;OpenAppDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取Consumer的应用列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权访问 </td><td>  -  </td></tr>
     </table>
     */
    public List<OpenAppDTO> getAppsBySelf(Integer page, Integer size) throws ApiException {
        ApiResponse<List<OpenAppDTO>> localVarResp = getAppsBySelfWithHttpInfo(page, size);
        return localVarResp.getData();
    }

    /**
     * 获取当前Consumer的应用列表（分页）(new added)
     * GET /openapi/v1/apps/by-self
     * @param page 页数 (required)
     * @param size 页大小 (required)
     * @return ApiResponse&lt;List&lt;OpenAppDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取Consumer的应用列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权访问 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OpenAppDTO>> getAppsBySelfWithHttpInfo(Integer page, Integer size) throws ApiException {
        okhttp3.Call localVarCall = getAppsBySelfValidateBeforeCall(page, size, null);
        Type localVarReturnType = new TypeToken<List<OpenAppDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取当前Consumer的应用列表（分页）(new added) (asynchronously)
     * GET /openapi/v1/apps/by-self
     * @param page 页数 (required)
     * @param size 页大小 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取Consumer的应用列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权访问 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAppsBySelfAsync(Integer page, Integer size, final ApiCallback<List<OpenAppDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAppsBySelfValidateBeforeCall(page, size, _callback);
        Type localVarReturnType = new TypeToken<List<OpenAppDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEnvClusterInfo
     * @param appId 应用ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取应用环境集群信息 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 应用不存在 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEnvClusterInfoCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/apps/{appId}/envclusters"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEnvClusterInfoValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getEnvClusterInfo(Async)");
        }

        return getEnvClusterInfoCall(appId, _callback);

    }

    /**
     * 获取应用的环境集群信息 (original openapi)
     * GET /openapi/v1/apps/{appId}/envclusters
     * @param appId 应用ID (required)
     * @return List&lt;OpenEnvClusterDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取应用环境集群信息 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 应用不存在 </td><td>  -  </td></tr>
     </table>
     */
    public List<OpenEnvClusterDTO> getEnvClusterInfo(String appId) throws ApiException {
        ApiResponse<List<OpenEnvClusterDTO>> localVarResp = getEnvClusterInfoWithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 获取应用的环境集群信息 (original openapi)
     * GET /openapi/v1/apps/{appId}/envclusters
     * @param appId 应用ID (required)
     * @return ApiResponse&lt;List&lt;OpenEnvClusterDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取应用环境集群信息 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 应用不存在 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OpenEnvClusterDTO>> getEnvClusterInfoWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = getEnvClusterInfoValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<List<OpenEnvClusterDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取应用的环境集群信息 (original openapi) (asynchronously)
     * GET /openapi/v1/apps/{appId}/envclusters
     * @param appId 应用ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取应用环境集群信息 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 应用不存在 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEnvClusterInfoAsync(String appId, final ApiCallback<List<OpenEnvClusterDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEnvClusterInfoValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<List<OpenEnvClusterDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateApp
     * @param appId 应用ID (required)
     * @param operator 操作人用户名 (required)
     * @param openAppDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 应用更新成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAppCall(String appId, String operator, OpenAppDTO openAppDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = openAppDTO;

        // create path and map variables
        String localVarPath = "/openapi/v1/apps/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operator", operator));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAppValidateBeforeCall(String appId, String operator, OpenAppDTO openAppDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling updateApp(Async)");
        }

        // verify the required parameter 'operator' is set
        if (operator == null) {
            throw new ApiException("Missing the required parameter 'operator' when calling updateApp(Async)");
        }

        // verify the required parameter 'openAppDTO' is set
        if (openAppDTO == null) {
            throw new ApiException("Missing the required parameter 'openAppDTO' when calling updateApp(Async)");
        }

        return updateAppCall(appId, operator, openAppDTO, _callback);

    }

    /**
     * 更新应用(new added)
     * PUT /openapi/v1/apps/{appId}
     * @param appId 应用ID (required)
     * @param operator 操作人用户名 (required)
     * @param openAppDTO  (required)
     * @return OpenAppDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 应用更新成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public OpenAppDTO updateApp(String appId, String operator, OpenAppDTO openAppDTO) throws ApiException {
        ApiResponse<OpenAppDTO> localVarResp = updateAppWithHttpInfo(appId, operator, openAppDTO);
        return localVarResp.getData();
    }

    /**
     * 更新应用(new added)
     * PUT /openapi/v1/apps/{appId}
     * @param appId 应用ID (required)
     * @param operator 操作人用户名 (required)
     * @param openAppDTO  (required)
     * @return ApiResponse&lt;OpenAppDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 应用更新成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenAppDTO> updateAppWithHttpInfo(String appId, String operator, OpenAppDTO openAppDTO) throws ApiException {
        okhttp3.Call localVarCall = updateAppValidateBeforeCall(appId, operator, openAppDTO, null);
        Type localVarReturnType = new TypeToken<OpenAppDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 更新应用(new added) (asynchronously)
     * PUT /openapi/v1/apps/{appId}
     * @param appId 应用ID (required)
     * @param operator 操作人用户名 (required)
     * @param openAppDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 应用更新成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAppAsync(String appId, String operator, OpenAppDTO openAppDTO, final ApiCallback<OpenAppDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAppValidateBeforeCall(appId, operator, openAppDTO, _callback);
        Type localVarReturnType = new TypeToken<OpenAppDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
