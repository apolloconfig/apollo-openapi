/*
 * Apollo OpenAPI
 * <p>Apollo配置中心OpenAPI接口文档</p>  <h2>认证方式</h2> <p>所有 API 接口都需要通过 <code>Authorization</code> header 进行身份验证。</p>  <h3>获取 Token 的方式：</h3> <ol>   <li><b>Portal 管理界面获取</b>：登录 Portal → 管理员工具 → 开放平台授权管理 → 创建第三方应用，获取 Token。</li>   <li><b>Token 格式</b>：<code>Authorization: token_value</code></li>   <li><b>Token 权限</b>：按应用/环境/命名空间授予，建议不同用途分别创建。</li> </ol>  <h3>使用示例</h3> <pre><code class=\"language-bash\">curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\ -H \"Authorization: your_token_here\"</code></pre>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.OpenClusterDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ClusterManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ClusterManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClusterManagementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createCluster
     * @param appId 应用ID (required)
     * @param env  (required)
     * @param openClusterDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 集群创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createClusterCall(String appId, String env, OpenClusterDTO openClusterDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = openClusterDTO;

        // create path and map variables
        String localVarPath = "/openapi/v1/envs/{env}/apps/{appId}/clusters"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createClusterValidateBeforeCall(String appId, String env, OpenClusterDTO openClusterDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling createCluster(Async)");
        }

        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling createCluster(Async)");
        }

        // verify the required parameter 'openClusterDTO' is set
        if (openClusterDTO == null) {
            throw new ApiException("Missing the required parameter 'openClusterDTO' when calling createCluster(Async)");
        }

        return createClusterCall(appId, env, openClusterDTO, _callback);

    }

    /**
     * 创建集群 (original openapi)
     * POST /openapi/v1/envs/{env}/apps/{appId}/clusters
     * @param appId 应用ID (required)
     * @param env  (required)
     * @param openClusterDTO  (required)
     * @return OpenClusterDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 集群创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public OpenClusterDTO createCluster(String appId, String env, OpenClusterDTO openClusterDTO) throws ApiException {
        ApiResponse<OpenClusterDTO> localVarResp = createClusterWithHttpInfo(appId, env, openClusterDTO);
        return localVarResp.getData();
    }

    /**
     * 创建集群 (original openapi)
     * POST /openapi/v1/envs/{env}/apps/{appId}/clusters
     * @param appId 应用ID (required)
     * @param env  (required)
     * @param openClusterDTO  (required)
     * @return ApiResponse&lt;OpenClusterDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 集群创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenClusterDTO> createClusterWithHttpInfo(String appId, String env, OpenClusterDTO openClusterDTO) throws ApiException {
        okhttp3.Call localVarCall = createClusterValidateBeforeCall(appId, env, openClusterDTO, null);
        Type localVarReturnType = new TypeToken<OpenClusterDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 创建集群 (original openapi) (asynchronously)
     * POST /openapi/v1/envs/{env}/apps/{appId}/clusters
     * @param appId 应用ID (required)
     * @param env  (required)
     * @param openClusterDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 集群创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createClusterAsync(String appId, String env, OpenClusterDTO openClusterDTO, final ApiCallback<OpenClusterDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createClusterValidateBeforeCall(appId, env, openClusterDTO, _callback);
        Type localVarReturnType = new TypeToken<OpenClusterDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCluster
     * @param env  (required)
     * @param appId  (required)
     * @param clusterName  (required)
     * @param operator 操作人用户名 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 集群删除成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 删除失败，集群可能包含配置 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 集群不存在 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteClusterCall(String env, String appId, String clusterName, String operator, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}"
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operator", operator));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteClusterValidateBeforeCall(String env, String appId, String clusterName, String operator, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling deleteCluster(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteCluster(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling deleteCluster(Async)");
        }

        // verify the required parameter 'operator' is set
        if (operator == null) {
            throw new ApiException("Missing the required parameter 'operator' when calling deleteCluster(Async)");
        }

        return deleteClusterCall(env, appId, clusterName, operator, _callback);

    }

    /**
     * 删除集群 (new added)
     * DELETE /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}
     * @param env  (required)
     * @param appId  (required)
     * @param clusterName  (required)
     * @param operator 操作人用户名 (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 集群删除成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 删除失败，集群可能包含配置 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 集群不存在 </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteCluster(String env, String appId, String clusterName, String operator) throws ApiException {
        ApiResponse<Object> localVarResp = deleteClusterWithHttpInfo(env, appId, clusterName, operator);
        return localVarResp.getData();
    }

    /**
     * 删除集群 (new added)
     * DELETE /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}
     * @param env  (required)
     * @param appId  (required)
     * @param clusterName  (required)
     * @param operator 操作人用户名 (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 集群删除成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 删除失败，集群可能包含配置 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 集群不存在 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteClusterWithHttpInfo(String env, String appId, String clusterName, String operator) throws ApiException {
        okhttp3.Call localVarCall = deleteClusterValidateBeforeCall(env, appId, clusterName, operator, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 删除集群 (new added) (asynchronously)
     * DELETE /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}
     * @param env  (required)
     * @param appId  (required)
     * @param clusterName  (required)
     * @param operator 操作人用户名 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 集群删除成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 删除失败，集群可能包含配置 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 集群不存在 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteClusterAsync(String env, String appId, String clusterName, String operator, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteClusterValidateBeforeCall(env, appId, clusterName, operator, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCluster
     * @param appId  (required)
     * @param clusterName  (required)
     * @param env  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取集群信息 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 集群不存在 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClusterCall(String appId, String clusterName, String env, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClusterValidateBeforeCall(String appId, String clusterName, String env, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getCluster(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling getCluster(Async)");
        }

        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling getCluster(Async)");
        }

        return getClusterCall(appId, clusterName, env, _callback);

    }

    /**
     * 获取指定集群信息 (original openapi)
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}
     * @param appId  (required)
     * @param clusterName  (required)
     * @param env  (required)
     * @return OpenClusterDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取集群信息 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 集群不存在 </td><td>  -  </td></tr>
     </table>
     */
    public OpenClusterDTO getCluster(String appId, String clusterName, String env) throws ApiException {
        ApiResponse<OpenClusterDTO> localVarResp = getClusterWithHttpInfo(appId, clusterName, env);
        return localVarResp.getData();
    }

    /**
     * 获取指定集群信息 (original openapi)
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}
     * @param appId  (required)
     * @param clusterName  (required)
     * @param env  (required)
     * @return ApiResponse&lt;OpenClusterDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取集群信息 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 集群不存在 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenClusterDTO> getClusterWithHttpInfo(String appId, String clusterName, String env) throws ApiException {
        okhttp3.Call localVarCall = getClusterValidateBeforeCall(appId, clusterName, env, null);
        Type localVarReturnType = new TypeToken<OpenClusterDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指定集群信息 (original openapi) (asynchronously)
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}
     * @param appId  (required)
     * @param clusterName  (required)
     * @param env  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取集群信息 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 集群不存在 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClusterAsync(String appId, String clusterName, String env, final ApiCallback<OpenClusterDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClusterValidateBeforeCall(appId, clusterName, env, _callback);
        Type localVarReturnType = new TypeToken<OpenClusterDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
