/*
 * Apollo OpenAPI
 * <p>Apollo配置中心OpenAPI接口文档</p>  <h2>认证方式</h2> <p>所有 API 接口都需要通过 <code>Authorization</code> header 进行身份验证。</p>  <h3>获取 Token 的方式：</h3> <ol>   <li><b>Portal 管理界面获取</b>：登录 Portal → 管理员工具 → 开放平台授权管理 → 创建第三方应用，获取 Token。</li>   <li><b>Token 格式</b>：<code>Authorization: token_value</code></li>   <li><b>Token 权限</b>：按应用/环境/命名空间授予，建议不同用途分别创建。</li> </ol>  <h3>使用示例</h3> <pre><code class=\"language-bash\">curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\ -H \"Authorization: your_token_here\"</code></pre>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.OpenItemDTO;
import org.openapitools.client.model.OpenItemDiffs;
import org.openapitools.client.model.OpenNamespaceSyncModel;
import org.openapitools.client.model.OpenNamespaceTextModel;
import org.openapitools.client.model.OpenPageDTOOpenItemDTO;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ItemManagementApi
 */
@Disabled
public class ItemManagementApiTest {

    private final ItemManagementApi api = new ItemManagementApi();

    /**
     * 通过文本批量修改配置项 (new added)
     *
     * PUT /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/batchUpdate:
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchUpdateItemsByTextTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        String operator = null;
        OpenNamespaceTextModel openNamespaceTextModel = null;
        Object response = api.batchUpdateItemsByText(appId, env, clusterName, namespaceName, operator, openNamespaceTextModel);
        // TODO: test validations
    }

    /**
     * 对比命名空间配置差异 (new added)
     *
     * POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/compare
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void compareItemsTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        OpenNamespaceSyncModel openNamespaceSyncModel = null;
        List<OpenItemDiffs> response = api.compareItems(appId, env, clusterName, namespaceName, openNamespaceSyncModel);
        // TODO: test validations
    }

    /**
     * 创建新的配置项 (original openapi)
     *
     * POST /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createItemTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        String operator = null;
        OpenItemDTO openItemDTO = null;
        OpenItemDTO response = api.createItem(appId, env, clusterName, namespaceName, operator, openItemDTO);
        // TODO: test validations
    }

    /**
     * 删除配置项 (original openapi)
     *
     * DELETE /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteItemTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        String key = null;
        String operator = null;
        Object response = api.deleteItem(appId, env, clusterName, namespaceName, key, operator);
        // TODO: test validations
    }

    /**
     * 通过编码的key删除配置项 (original openapi)
     *
     * DELETE /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteItemByEncodedKeyTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        String key = null;
        String operator = null;
        Object response = api.deleteItemByEncodedKey(appId, env, clusterName, namespaceName, key, operator);
        // TODO: test validations
    }

    /**
     * 获取命名空间下的配置项列表 (original openapi)
     *
     * 获取指定命名空间的配置项列表，支持分页
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findItemsByNamespaceTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        Integer page = null;
        Integer size = null;
        OpenPageDTOOpenItemDTO response = api.findItemsByNamespace(appId, env, clusterName, namespaceName, page, size);
        // TODO: test validations
    }

    /**
     * 获取分支下的配置项 (new added)
     *
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/items:
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBranchItemsTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        String branchName = null;
        List<OpenItemDTO> response = api.getBranchItems(appId, env, clusterName, namespaceName, branchName);
        // TODO: test validations
    }

    /**
     * 获取单个配置项 (original openapi)
     *
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getItemTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        String key = null;
        OpenItemDTO response = api.getItem(appId, env, clusterName, namespaceName, key);
        // TODO: test validations
    }

    /**
     * 通过查询参数获取配置项（支持编码的key） (original openapi)
     *
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getItemByEncodedKeyTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        String key = null;
        OpenItemDTO response = api.getItemByEncodedKey(appId, env, clusterName, namespaceName, key);
        // TODO: test validations
    }

    /**
     * 撤销配置项更改 (new added)
     *
     * POST /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/revert
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revertItemsTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        String operator = null;
        Object response = api.revertItems(appId, env, clusterName, namespaceName, operator);
        // TODO: test validations
    }

    /**
     * 同步配置项到多个命名空间 (new added)
     *
     * POST /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/sync:
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void syncItemsTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        String operator = null;
        OpenNamespaceSyncModel openNamespaceSyncModel = null;
        Object response = api.syncItems(appId, env, clusterName, namespaceName, operator, openNamespaceSyncModel);
        // TODO: test validations
    }

    /**
     * 更新配置项 (original openapi)
     *
     * PUT /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateItemTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        String key = null;
        Boolean createIfNotExists = null;
        OpenItemDTO openItemDTO = null;
        Object response = api.updateItem(appId, env, clusterName, namespaceName, key, createIfNotExists, openItemDTO);
        // TODO: test validations
    }

    /**
     * 通过编码的key更新配置项 (original openapi)
     *
     * PUT /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateItemByEncodedKeyTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        String key = null;
        Boolean createIfNotExists = null;
        OpenItemDTO openItemDTO = null;
        Object response = api.updateItemByEncodedKey(appId, env, clusterName, namespaceName, key, createIfNotExists, openItemDTO);
        // TODO: test validations
    }

    /**
     * 验证配置文本语法 (new added)
     *
     * POST /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/validate
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateItemsTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        OpenNamespaceTextModel openNamespaceTextModel = null;
        Object response = api.validateItems(appId, env, clusterName, namespaceName, openNamespaceTextModel);
        // TODO: test validations
    }

}
