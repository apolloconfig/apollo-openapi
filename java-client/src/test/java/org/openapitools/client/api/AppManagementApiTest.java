/*
 * Apollo OpenAPI
 * <p>Apollo配置中心OpenAPI接口文档</p>  <h2>认证方式</h2> <p>所有 API 接口都需要通过 <code>Authorization</code> header 进行身份验证。</p>  <h3>获取 Token 的方式：</h3> <ol>   <li><b>Portal 管理界面获取</b>：登录 Portal → 管理员工具 → 开放平台授权管理 → 创建第三方应用，获取 Token。</li>   <li><b>Token 格式</b>：<code>Authorization: token_value</code></li>   <li><b>Token 权限</b>：按应用/环境/命名空间授予，建议不同用途分别创建。</li> </ol>  <h3>使用示例</h3> <pre><code class=\"language-bash\">curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\ -H \"Authorization: your_token_here\"</code></pre>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.MultiResponseEntity;
import org.openapitools.client.model.OpenAppDTO;
import org.openapitools.client.model.OpenCreateAppDTO;
import org.openapitools.client.model.OpenEnvClusterDTO;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AppManagementApi
 */
@Disabled
public class AppManagementApiTest {

    private final AppManagementApi api = new AppManagementApi();

    /**
     * 创建应用 (original openapi)
     *
     * POST /openapi/v1/apps
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAppTest() throws ApiException {
        OpenCreateAppDTO openCreateAppDTO = null;
        Object response = api.createApp(openCreateAppDTO);
        // TODO: test validations
    }

    /**
     * 在指定环境创建应用(new added)
     *
     * POST /openapi/v1/apps/envs/{env}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAppInEnvTest() throws ApiException {
        String env = null;
        String operator = null;
        OpenAppDTO openAppDTO = null;
        Object response = api.createAppInEnv(env, operator, openAppDTO);
        // TODO: test validations
    }

    /**
     * 删除应用(new added)
     *
     * DELETE /openapi/v1/apps/{appId}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAppTest() throws ApiException {
        String appId = null;
        String operator = null;
        Object response = api.deleteApp(appId, operator);
        // TODO: test validations
    }

    /**
     * 查找应用 (original openapi)
     *
     * POST /openapi/v1/apps
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findAppsTest() throws ApiException {
        String appIds = null;
        List<OpenAppDTO> response = api.findApps(appIds);
        // TODO: test validations
    }

    /**
     * 获取当前Consumer授权的应用列表 (original openapi)
     *
     * GET /openapi/v1/apps/authorized
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findAppsAuthorizedTest() throws ApiException {
        List<OpenAppDTO> response = api.findAppsAuthorized();
        // TODO: test validations
    }

    /**
     * 查找缺失的环境(new added)
     *
     * GET /openapi/v1/apps/{appId}/miss_envs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findMissEnvsTest() throws ApiException {
        String appId = null;
        MultiResponseEntity response = api.findMissEnvs(appId);
        // TODO: test validations
    }

    /**
     * 获取单个应用信息(new added)
     *
     * GET /openapi/v1/apps/{appId}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAppTest() throws ApiException {
        String appId = null;
        OpenAppDTO response = api.getApp(appId);
        // TODO: test validations
    }

    /**
     * 获取应用导航树(new added)
     *
     * GET /openapi/v1/apps/{appId}/navtree
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAppNavTreeTest() throws ApiException {
        String appId = null;
        MultiResponseEntity response = api.getAppNavTree(appId);
        // TODO: test validations
    }

    /**
     * 获取当前Consumer的应用列表（分页）(new added)
     *
     * GET /openapi/v1/apps/by-self
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAppsBySelfTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        List<OpenAppDTO> response = api.getAppsBySelf(page, size);
        // TODO: test validations
    }

    /**
     * 获取应用的环境集群信息 (original openapi)
     *
     * GET /openapi/v1/apps/{appId}/envclusters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEnvClusterInfoTest() throws ApiException {
        String appId = null;
        List<OpenEnvClusterDTO> response = api.getEnvClusterInfo(appId);
        // TODO: test validations
    }

    /**
     * 更新应用(new added)
     *
     * PUT /openapi/v1/apps/{appId}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAppTest() throws ApiException {
        String appId = null;
        String operator = null;
        OpenAppDTO openAppDTO = null;
        OpenAppDTO response = api.updateApp(appId, operator, openAppDTO);
        // TODO: test validations
    }

}
