/*
 * Apollo OpenAPI
 * <p>Apollo配置中心OpenAPI接口文档</p>  <h2>认证方式</h2> <p>所有 API 接口都需要通过 <code>Authorization</code> header 进行身份验证。</p>  <h3>获取 Token 的方式：</h3> <ol>   <li><b>Portal 管理界面获取</b>：登录 Portal → 管理员工具 → 开放平台授权管理 → 创建第三方应用，获取 Token。</li>   <li><b>Token 格式</b>：<code>Authorization: token_value</code></li>   <li><b>Token 权限</b>：按应用/环境/命名空间授予，建议不同用途分别创建。</li> </ol>  <h3>使用示例</h3> <pre><code class=\"language-bash\">curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\ -H \"Authorization: your_token_here\"</code></pre>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.OpenAppNamespaceDTO;
import org.openapitools.client.model.OpenNamespaceDTO;
import org.openapitools.client.model.OpenNamespaceLockDTO;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NamespaceManagementApi
 */
@Disabled
public class NamespaceManagementApiTest {

    private final NamespaceManagementApi api = new NamespaceManagementApi();

    /**
     * 检查缺失的Namespace (new added)
     *
     * GET /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/integrity-check
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkNamespaceIntegrityTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        List<String> response = api.checkNamespaceIntegrity(appId, env, clusterName);
        // TODO: test validations
    }

    /**
     * 创建AppNamespace (original openapi)
     *
     * POST /openapi/v1/apps/{appId}/appnamespaces
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNamespaceTest() throws ApiException {
        String appId = null;
        OpenAppNamespaceDTO openAppNamespaceDTO = null;
        OpenAppNamespaceDTO response = api.createNamespace(appId, openAppNamespaceDTO);
        // TODO: test validations
    }

    /**
     * 删除AppNamespace (new added)
     *
     * DELETE /openapi/v1/apps/{appId}/appnamespaces/{namespaceName}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAppNamespaceTest() throws ApiException {
        String appId = null;
        String namespaceName = null;
        String operator = null;
        Object response = api.deleteAppNamespace(appId, namespaceName, operator);
        // TODO: test validations
    }

    /**
     * 删除关联的Namespace (new added)
     *
     * DELETE /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/links
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNamespaceLinksTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        String operator = null;
        Object response = api.deleteNamespaceLinks(appId, env, clusterName, namespaceName, operator);
        // TODO: test validations
    }

    /**
     * 获取指定集群下的所有Namespace (original openapi)
     *
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findNamespacesTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        Boolean fillItemDetail = null;
        List<OpenNamespaceDTO> response = api.findNamespaces(appId, env, clusterName, fillItemDetail);
        // TODO: test validations
    }

    /**
     * 获取指定的AppNamespace (new added)
     *
     * GET /openapi/v1/apps/{appId}/appnamespaces/{namespaceName}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAppNamespaceTest() throws ApiException {
        String appId = null;
        String namespaceName = null;
        OpenAppNamespaceDTO response = api.getAppNamespace(appId, namespaceName);
        // TODO: test validations
    }

    /**
     * 获取所有公共AppNamespace (new added)
     *
     * GET /openapi/v1/appnamespaces?public&#x3D;true
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAppNamespacesTest() throws ApiException {
        Boolean publicOnly = null;
        List<OpenAppNamespaceDTO> response = api.getAppNamespaces(publicOnly);
        // TODO: test validations
    }

    /**
     * 获取指定应用的AppNamespace (new added)
     *
     * GET /openapi/v1/apps/{appId}/appnamespaces
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAppNamespacesByAppTest() throws ApiException {
        String appId = null;
        List<OpenAppNamespaceDTO> response = api.getAppNamespacesByApp(appId);
        // TODO: test validations
    }

    /**
     * 获取Namespace的锁状态 (original openapi)
     *
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/lock
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNamespaceLockTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        OpenNamespaceLockDTO response = api.getNamespaceLock(appId, env, clusterName, namespaceName);
        // TODO: test validations
    }

    /**
     * 获取应用下所有Namespace的发布状态 (new added)
     *
     * GET /openapi/v1/apps/{appId}/namespaces/releases/status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNamespacesReleaseStatusTest() throws ApiException {
        String appId = null;
        Map<String, Map<String, Boolean>> response = api.getNamespacesReleaseStatus(appId);
        // TODO: test validations
    }

    /**
     * 获取公共AppNamespace的所有实例 (new added)
     *
     * GET /openapi/v1/envs/{env}/appnamespaces/{publicNamespaceName}/instances
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPublicAppNamespaceInstancesTest() throws ApiException {
        String env = null;
        String publicNamespaceName = null;
        Integer page = null;
        Integer size = null;
        List<OpenNamespaceDTO> response = api.getPublicAppNamespaceInstances(env, publicNamespaceName, page, size);
        // TODO: test validations
    }

    /**
     * 获取关联的公共Namespace (new added)
     *
     * GET /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/public-association
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPublicNamespaceAssociationTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        OpenNamespaceDTO response = api.getPublicNamespaceAssociation(appId, env, clusterName, namespaceName);
        // TODO: test validations
    }

    /**
     * 获取指定的Namespace (original openapi)
     *
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loadNamespaceTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        Boolean fillItemDetail = null;
        OpenNamespaceDTO response = api.loadNamespace(appId, env, clusterName, namespaceName, fillItemDetail);
        // TODO: test validations
    }

}
