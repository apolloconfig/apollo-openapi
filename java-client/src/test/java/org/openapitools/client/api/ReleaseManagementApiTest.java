/*
 * Apollo OpenAPI
 * <p>Apollo配置中心OpenAPI接口文档</p>  <h2>认证方式</h2> <p>所有 API 接口都需要通过 <code>Authorization</code> header 进行身份验证。</p>  <h3>获取 Token 的方式：</h3> <ol>   <li><b>Portal 管理界面获取</b>：登录 Portal → 管理员工具 → 开放平台授权管理 → 创建第三方应用，获取 Token。</li>   <li><b>Token 格式</b>：<code>Authorization: token_value</code></li>   <li><b>Token 权限</b>：按应用/环境/命名空间授予，建议不同用途分别创建。</li> </ol>  <h3>使用示例</h3> <pre><code class=\"language-bash\">curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\ -H \"Authorization: your_token_here\"</code></pre>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.NamespaceGrayDelReleaseDTO;
import org.openapitools.client.model.NamespaceReleaseDTO;
import org.openapitools.client.model.OpenReleaseBO;
import org.openapitools.client.model.OpenReleaseDTO;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReleaseManagementApi
 */
@Disabled
public class ReleaseManagementApiTest {

    private final ReleaseManagementApi api = new ReleaseManagementApi();

    /**
     * 创建灰度删除发布 (original openapi)
     *
     *
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGrayDelReleaseTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        String branchName = null;
        NamespaceGrayDelReleaseDTO namespaceGrayDelReleaseDTO = null;
        OpenReleaseDTO response = api.createGrayDelRelease(appId, env, clusterName, namespaceName, branchName, namespaceGrayDelReleaseDTO);
        // TODO: test validations
    }

    /**
     * 创建灰度发布 (original openapi)
     *
     * 创建灰度发布
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGrayReleaseTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        String branchName = null;
        NamespaceReleaseDTO namespaceReleaseDTO = null;
        OpenReleaseDTO response = api.createGrayRelease(appId, env, clusterName, namespaceName, branchName, namespaceReleaseDTO);
        // TODO: test validations
    }

    /**
     * 创建发布 (original openapi)
     *
     * 创建发布
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createReleaseTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        NamespaceReleaseDTO namespaceReleaseDTO = null;
        OpenReleaseDTO response = api.createRelease(appId, env, clusterName, namespaceName, namespaceReleaseDTO);
        // TODO: test validations
    }

    /**
     * 获取活跃发布（分页） (new added)
     *
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases/active
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findActiveReleasesTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        Integer page = null;
        Integer size = null;
        List<OpenReleaseDTO> response = api.findActiveReleases(appId, env, clusterName, namespaceName, page, size);
        // TODO: test validations
    }

    /**
     * 获取所有发布（分页） (new added)
     *
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases/all
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findAllReleasesTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        Integer page = null;
        Integer size = null;
        List<OpenReleaseBO> response = api.findAllReleases(appId, env, clusterName, namespaceName, page, size);
        // TODO: test validations
    }

    /**
     * 获取发布详情 (new added)
     *
     * GET /openapi/v1/envs/{env}/releases/{releaseId}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReleaseByIdTest() throws ApiException {
        String env = null;
        Integer releaseId = null;
        OpenReleaseDTO response = api.getReleaseById(env, releaseId);
        // TODO: test validations
    }

    /**
     * 获取最新活跃发布 (original openapi)
     *
     * 查询命名空间最新活跃发布
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loadLatestActiveReleaseTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        OpenReleaseDTO response = api.loadLatestActiveRelease(appId, env, clusterName, namespaceName);
        // TODO: test validations
    }

    /**
     * 合并分支 (original openapi)
     *
     * 合并灰度分支并可选择删除分支
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mergeTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        String branchName = null;
        Boolean deleteBranch = null;
        NamespaceReleaseDTO namespaceReleaseDTO = null;
        OpenReleaseDTO response = api.merge(appId, env, clusterName, namespaceName, branchName, deleteBranch, namespaceReleaseDTO);
        // TODO: test validations
    }

    /**
     * 回滚发布 (original openapi)
     *
     * 回滚到指定的发布版本
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rollbackTest() throws ApiException {
        String env = null;
        Long releaseId = null;
        String operator = null;
        Object response = api.rollback(env, releaseId, operator);
        // TODO: test validations
    }

}
