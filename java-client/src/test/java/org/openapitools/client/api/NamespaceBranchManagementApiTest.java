/*
 * Apollo OpenAPI
 * <p>Apollo配置中心OpenAPI接口文档</p>  <h2>认证方式</h2> <p>所有 API 接口都需要通过 <code>Authorization</code> header 进行身份验证。</p>  <h3>获取 Token 的方式：</h3> <ol>   <li><b>Portal 管理界面获取</b>：登录 Portal → 管理员工具 → 开放平台授权管理 → 创建第三方应用，获取 Token。</li>   <li><b>Token 格式</b>：<code>Authorization: token_value</code></li>   <li><b>Token 权限</b>：按应用/环境/命名空间授予，建议不同用途分别创建。</li> </ol>  <h3>使用示例</h3> <pre><code class=\"language-bash\">curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\ -H \"Authorization: your_token_here\"</code></pre>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.NamespaceReleaseDTO;
import org.openapitools.client.model.OpenGrayReleaseRuleDTO;
import org.openapitools.client.model.OpenNamespaceDTO;
import org.openapitools.client.model.OpenReleaseDTO;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NamespaceBranchManagementApi
 */
@Disabled
public class NamespaceBranchManagementApiTest {

    private final NamespaceBranchManagementApi api = new NamespaceBranchManagementApi();

    /**
     * 创建命名空间分支 (original openapi)
     *
     * POST /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBranchTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        String operator = null;
        OpenNamespaceDTO response = api.createBranch(appId, env, clusterName, namespaceName, operator);
        // TODO: test validations
    }

    /**
     * 删除命名空间分支 (original openapi)
     *
     * DELETE /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBranchTest() throws ApiException {
        String env = null;
        String appId = null;
        String clusterName = null;
        String namespaceName = null;
        String branchName = null;
        String operator = null;
        Object response = api.deleteBranch(env, appId, clusterName, namespaceName, branchName, operator);
        // TODO: test validations
    }

    /**
     * 获取命名空间分支信息 (original openapi)
     *
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findBranchTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        OpenNamespaceDTO response = api.findBranch(appId, env, clusterName, namespaceName);
        // TODO: test validations
    }

    /**
     * 获取分支灰度发布规则 (original openapi)
     *
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/rules
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBranchGrayRulesTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        String branchName = null;
        OpenGrayReleaseRuleDTO response = api.getBranchGrayRules(appId, env, clusterName, namespaceName, branchName);
        // TODO: test validations
    }

    /**
     * 合并分支到主分支 (new added)
     *
     * PATCH /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}  使用 PATCH 方法表示部分更新操作（将分支状态从\&quot;独立\&quot;更新为\&quot;合并\&quot;）
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mergeBranchTest() throws ApiException {
        String env = null;
        String appId = null;
        String clusterName = null;
        String namespaceName = null;
        String branchName = null;
        Boolean deleteBranch = null;
        String operator = null;
        NamespaceReleaseDTO namespaceReleaseDTO = null;
        OpenReleaseDTO response = api.mergeBranch(env, appId, clusterName, namespaceName, branchName, deleteBranch, operator, namespaceReleaseDTO);
        // TODO: test validations
    }

    /**
     * 更新分支灰度发布规则 (original openapi)
     *
     * PUT /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/rules
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBranchRulesTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        String branchName = null;
        String operator = null;
        OpenGrayReleaseRuleDTO openGrayReleaseRuleDTO = null;
        Object response = api.updateBranchRules(appId, env, clusterName, namespaceName, branchName, operator, openGrayReleaseRuleDTO);
        // TODO: test validations
    }

}
