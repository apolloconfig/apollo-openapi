openapi: 3.0.1
info:
  title: Apollo OpenAPI
  description: |
    <p>Apollo配置中心OpenAPI接口文档</p>

    <h2>认证方式</h2>
    <p>所有 API 接口都需要通过 <code>Authorization</code> header 进行身份验证。</p>

    <h3>获取 Token 的方式：</h3>
    <ol>
      <li><b>Portal 管理界面获取</b>：登录 Portal → 管理员工具 → 开放平台授权管理 → 创建第三方应用，获取 Token。</li>
      <li><b>Token 格式</b>：<code>Authorization: token_value</code></li>
      <li><b>Token 权限</b>：按应用/环境/命名空间授予，建议不同用途分别创建。</li>
    </ol>

    <h3>使用示例</h3>
    <pre><code class="language-bash">curl -X GET "http://localhost:8070/openapi/v1/apps" \
    -H "Authorization: your_token_here"</code></pre>

  version: 1.0.0
security:
  - ApiKeyAuth: []
tags:
  - name: App Management
    description: 应用管理相关接口，包括应用的创建、查询、更新、删除等操作
  - name: Item Management
    description: 配置项管理相关接口，包括配置的增删改查、批量操作、同步等功能
  - name: Release Management
    description: 发布管理相关接口，包括配置发布、发布历史、灰度发布等功能
  - name: Cluster Management
    description: 集群管理相关接口，包括集群的创建、查询、删除等操作
  - name: Namespace Management
    description: 命名空间管理相关接口，包括命名空间的创建、查询、配置等操作
  - name: Namespace Namespace Branch Management
    description: 命名空间分支管理相关接口，包括分支创建、合并、灰度发布等功能
  - name: Instance Management
    description: 实例管理相关接口，包括实例查询、配置生效状态等功能
  - name: Organization Management
    description: 组织管理相关接口，包括组织信息查询等功能
  - name: Environment Management
    description: 环境管理相关接口，包括环境查询等功能
paths:
  /openapi/v1/apps:
    post:
      summary: 创建应用 (original openapi) # which means this belongs to initial openapi endpoints and should not be modified this time
      operationId: createApp
      deprecated: false
      description: POST /openapi/v1/apps
      tags:
        - App Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenCreateAppDTO' # this is for avoiding openapi-generator of generating a new schema(OpenAppDTO with restriction)
        required: true
      responses:
        '200':
          description: '应用创建成功'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessEmptyResponse'
          headers: {}
        '400':
          description: '请求参数错误'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse' # This is to avoid openapi-generator generating completely different error responses for each error
        '403':
          description: 权限不足
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
    get:
      summary: 查找应用 (original openapi)
      operationId: findApps
      deprecated: false
      description: POST /openapi/v1/apps
      tags:
        - App Management
      parameters:
        - name: appIds
          in: query
          description: 查找应用
          required: false
          example: '123'
          schema:
            type: string
      responses:
        '200':
          description: 成功获取应用列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OpenAppDTO'
              example:
                - dataChangeCreatedBy: 'apollo'
                  dataChangeLastModifiedBy: 'apollo'
                  dataChangeCreatedTime: '2024-01-15T10:30:00.000Z'
                  dataChangeLastModifiedTime: '2024-01-15T10:30:00.000Z'
                  name: 'Sample Application'
                  appId: 'sample-app'
                  orgId: 'default'
                  orgName: 'Default Organization'
                  ownerName: 'Apollo Admin'
                  ownerEmail: 'admin@apollo.com'
                - dataChangeCreatedBy: 'apollo'
                  dataChangeLastModifiedBy: 'apollo'
                  dataChangeCreatedTime: '2024-01-10T14:20:00.000Z'
                  dataChangeLastModifiedTime: '2024-01-12T16:45:00.000Z'
                  name: 'User Service'
                  appId: 'user-service'
                  orgId: 'microservices'
                  orgName: 'Microservices Team'
                  ownerName: 'Dev Team'
                  ownerEmail: 'dev@company.com'
          headers: {}
        '401':
          description: '未授权访问'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
  /openapi/v1/apps/authorized:
    get:
      summary: 获取当前Consumer授权的应用列表 (original openapi)
      operationId: findAppsAuthorized
      deprecated: false
      description: GET /openapi/v1/apps/authorized
      tags:
        - App Management
      responses:
        '200':
          description: 成功获取授权应用列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OpenAppDTO'
              example:
                - dataChangeCreatedBy: 'apollo'
                  dataChangeLastModifiedBy: 'apollo'
                  dataChangeCreatedTime: '2024-01-15T10:30:00.000Z'
                  dataChangeLastModifiedTime: '2024-01-15T10:30:00.000Z'
                  name: 'Sample Application'
                  appId: 'sample-app'
                  orgId: 'default'
                  orgName: 'Default Organization'
                  ownerName: 'Apollo Admin'
                  ownerEmail: 'admin@apollo.com'
                - dataChangeCreatedBy: 'apollo'
                  dataChangeLastModifiedBy: 'apollo'
                  dataChangeCreatedTime: '2024-01-10T14:20:00.000Z'
                  dataChangeLastModifiedTime: '2024-01-12T16:45:00.000Z'
                  name: 'User Service'
                  appId: 'user-service'
                  orgId: 'microservices'
                  orgName: 'Microservices Team'
                  ownerName: 'Dev Team'
                  ownerEmail: 'dev@company.com'
          headers: { }
        '401':
          description: '未授权访问'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
  /openapi/v1/apps/{appId}/envclusters:
    get:
      summary: 获取应用的环境集群信息 (original openapi)
      operationId: getEnvClusterInfo
      deprecated: false
      description: GET /openapi/v1/apps/{appId}/envclusters
      tags:
        - App Management
      parameters:
        - name: appId
          in: path
          description: 应用ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '成功获取应用环境集群信息'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OpenEnvClusterDTO'
              example:
                - env: 'DEV'
                  clusters:
                    - 'default'
                    - 'test-cluster'
                - env: 'UAT'
                  clusters:
                    - 'default'
                - env: 'PRO'
                  clusters:
                    - 'default'
                    - 'backup'
          headers: {}
        '404':
          description: '应用不存在'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
  /openapi/v1/apps/{appId}:
    get:
      summary: 获取单个应用信息(new added) # which means this is a new added openapi endpoint
      operationId: getApp
      deprecated: false
      description: GET /openapi/v1/apps/{appId}
      tags:
        - App Management
      parameters:
        - name: appId
          in: path
          description: ''
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '成功获取应用信息'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenAppDTO'
              example:
                dataChangeCreatedBy: 'apollo'
                dataChangeLastModifiedBy: 'dev-user'
                dataChangeCreatedTime: '2024-01-15T10:30:00.000Z'
                dataChangeLastModifiedTime: '2024-01-20T15:45:00.000Z'
                name: 'Sample Application'
                appId: 'sample-app'
                orgId: 'default'
                orgName: 'Default Organization'
                ownerName: 'Apollo Admin'
                ownerEmail: 'admin@apollo.com'
          headers: {}
        '404':
          description: '应用不存在'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
    put:
      summary: 更新应用(new added)
      operationId: updateApp
      deprecated: false
      description: PUT /openapi/v1/apps/{appId}
      tags:
        - App Management
      parameters:
        - name: appId
          in: path
          description: '应用ID'
          required: true
          schema:
            type: string
        - name: operator
          in: query
          description: '操作人用户名'
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenAppDTO'
        required: true
      responses:
        '200':
          description: '应用更新成功'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenAppDTO'
              example:
                dataChangeCreatedBy: 'apollo'
                dataChangeLastModifiedBy: 'dev-user'
                dataChangeCreatedTime: '2024-01-15T10:30:00.000Z'
                dataChangeLastModifiedTime: '2024-01-20T16:45:00.000Z'
                name: 'Updated Sample Application'
                appId: 'sample-app'
                orgId: 'default'
                orgName: 'Default Organization'
                ownerName: 'Apollo Admin'
                ownerEmail: 'admin@apollo.com'
          headers: {}
        '400':
          description: '请求参数错误'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
        '403':
          description: '权限不足'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
    delete:
      summary: 删除应用(new added)
      operationId: deleteApp
      deprecated: false
      description: DELETE /openapi/v1/apps/{appId}
      tags:
        - App Management
      parameters:
        - name: appId
          in: path
          description: '应用ID'
          required: true
          schema:
            type: string
        - name: operator
          in: query
          description: '操作人用户名'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '应用删除成功'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/SuccessEmptyResponse'
        '403':
          description: '权限不足，需要超级管理员权限'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
        '404':
          description: '应用不存在'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
          headers: {}
  /openapi/v1/apps/by-self:
    get:
      summary: 获取当前Consumer的应用列表（分页）(new added)
      operationId: getAppsBySelf
      deprecated: false
      description: GET /openapi/v1/apps/by-self
      tags:
        - App Management
      parameters:
        - name: page
          in: query
          description: '页数'
          required: true
          schema:
            type: integer
            minimum: 0
        - name: size
          in: query
          description: '页大小'
          required: true
          schema:
            type: integer
            minimum: 0
      responses:
        '200':
          description: '成功获取Consumer的应用列表'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OpenAppDTO'
              example:
                - dataChangeCreatedBy: 'apollo'
                  dataChangeLastModifiedBy: 'dev-user'
                  dataChangeCreatedTime: '2024-01-15T10:30:00.000Z'
                  dataChangeLastModifiedTime: '2024-01-20T16:45:00.000Z'
                  name: 'User Service'
                  appId: 'user-service'
                  orgId: 'microservices'
                  orgName: 'Microservices Team'
                  ownerName: 'Dev Team'
                  ownerEmail: 'dev@company.com'
                - dataChangeCreatedBy: 'apollo'
                  dataChangeLastModifiedBy: 'ops-user'
                  dataChangeCreatedTime: '2024-01-10T09:15:00.000Z'
                  dataChangeLastModifiedTime: '2024-01-18T14:30:00.000Z'
                  name: 'Order Service'
                  appId: 'order-service'
                  orgId: 'business'
                  orgName: 'Business Team'
                  ownerName: 'Business Team'
                  ownerEmail: 'business@company.com'
          headers: {}
        '401':
          description: '未授权访问'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
  /openapi/v1/apps/{appId}/navtree:
    get:
      summary: 获取应用导航树(new added)
      operationId: getAppNavTree
      deprecated: false
      description: GET /openapi/v1/apps/{appId}/navtree
      tags:
        - App Management
      parameters:
        - name: appId
          in: path
          description: '应用ID'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '成功获取应用导航树'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiResponseEntity'
              example:
                - env: 'DEV'
                  clusters:
                    - dataChangeCreatedBy: 'apollo'
                      dataChangeLastModifiedBy: 'apollo'
                      dataChangeCreatedByDisplayName: 'apollo'
                      dataChangeLastModifiedByDisplayName: 'apollo'
                      dataChangeCreatedTime: '2023-01-01T00:00:00.000Z'
                      dataChangeLastModifiedTime: '2023-01-01T00:00:00.000Z'
                      id: 1
                      name: 'default'
                      appId: 'sample-app'
                      parentClusterId: 0
                      comment: 'Default cluster'
          headers: {}
  /openapi/v1/apps/envs/{env}:
    post:
      summary: 在指定环境创建应用(new added)
      operationId: createAppInEnv
      deprecated: false
      description: POST /openapi/v1/apps/envs/{env}
      tags:
        - App Management
      parameters:
        - name: env
          in: path
          description: 环境标识，例如 DEV、FAT、UAT、PROD
          required: true
          schema:
            type: string
        - name: operator
          in: query
          description: '操作人用户名'
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenAppDTO'
        required: true
      responses:
        '200':
          description: '应用在指定环境创建成功'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/SuccessEmptyResponse'
        '400':
          description: '请求参数错误'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
        '403':
          description: '权限不足'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
          headers: {}
  /openapi/v1/apps/{appId}/miss_envs:
    get:
      summary: 查找缺失的环境(new added)
      operationId: findMissEnvs
      deprecated: false
      description: GET /openapi/v1/apps/{appId}/miss_envs
      tags:
        - App Management
      parameters:
        - name: appId
          in: path
          description: '应用ID'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '成功获取应用缺失的环境列表'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiResponseEntity'
          headers: {}
        '404':
          description: '应用不存在'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
  /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}:
    get:
      summary: 获取单个配置项 (original openapi)
      operationId: getItem
      deprecated: false
      description: GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}
      tags:
        - Item Management
      parameters:
        - name: appId
          in: path
          description: '应用ID'
          required: true
          schema:
            type: string
        - name: env
          in: path
          description: '环境标识'
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: '集群名称'
          required: true
          schema:
            type: string
        - name: namespaceName
          in: path
          description: '命名空间名称'
          required: true
          schema:
            type: string
        - name: key
          in: path
          description: '配置项键名'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '成功获取配置项'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenItemDTO'
              example:
                dataChangeCreatedBy: 'apollo'
                dataChangeLastModifiedBy: 'dev-user'
                dataChangeCreatedTime: '2024-01-15T10:30:00.000Z'
                dataChangeLastModifiedTime: '2024-01-20T14:25:00.000Z'
                key: 'server.port'
                type: 0
                value: '8080'
                comment: '服务器端口配置'
          headers: {}
        '404':
          description: '配置项不存在'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
    put:
      summary: 更新配置项 (original openapi)
      operationId: updateItem
      deprecated: false
      description: PUT /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}
      tags:
        - Item Management
      parameters:
        - name: appId
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: env
          in: path
          description: '环境标识'
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: '集群名称'
          required: true
          schema:
            type: string
        - name: namespaceName
          in: path
          description: '命名空间名称'
          required: true
          schema:
            type: string
        - name: key
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: createIfNotExists
          in: query
          description: ''
          required: true
          example: 'false'
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenItemDTO'
        required: true
      responses:
        '200':
          description: '配置项更新成功'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/SuccessEmptyResponse'
        '400':
          description: '请求参数错误'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
        '403':
          description: '权限不足'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
        '404':
          description: '配置项不存在'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
          headers: {}
    delete:
      summary: 删除配置项 (original openapi)
      operationId: deleteItem
      deprecated: false
      description: DELETE /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}
      tags:
        - Item Management
      parameters:
        - name: appId
          in: path
          description: '应用ID'
          required: true
          schema:
            type: string
        - name: env
          in: path
          description: '环境标识'
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: '集群名称'
          required: true
          schema:
            type: string
        - name: namespaceName
          in: path
          description: '命名空间名称'
          required: true
          schema:
            type: string
        - name: key
          in: path
          description: '配置项键名'
          required: true
          schema:
            type: string
        - name: operator
          in: query
          description: '操作人用户名'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '配置项删除成功'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/SuccessEmptyResponse'
          headers: {}
  /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:
    get:
      summary: 获取命名空间下的配置项列表 (original openapi)
      operationId: findItemsByNamespace
      deprecated: false
      description: 获取指定命名空间的配置项列表，支持分页
      tags:
        - Item Management
      parameters:
        - name: appId
          in: path
          description: '应用ID'
          required: true
          schema:
            type: string
        - name: env
          in: path
          description: '环境标识'
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: '集群名称'
          required: true
          schema:
            type: string
        - name: namespaceName
          in: path
          description: '命名空间名称'
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: '页码，从0开始'
          required: true
          example: 0
          schema:
            type: integer
            minimum: 0
        - name: size
          in: query
          description: '每页数量'
          required: true
          example: 50
          schema:
            type: integer
            minimum: 0
      responses:
        '200':
          description: '成功获取配置项列表'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenPageDTOOpenItemDTO'
              example:
                page: 0
                size: 50
                total: 3
                content:
                  - dataChangeCreatedBy: 'apollo'
                    dataChangeLastModifiedBy: 'dev-user'
                    dataChangeCreatedTime: '2024-01-15T10:30:00.000Z'
                    dataChangeLastModifiedTime: '2024-01-20T14:25:00.000Z'
                    key: 'server.port'
                    type: 0
                    value: '8080'
                    comment: '服务器端口配置'
                  - dataChangeCreatedBy: 'apollo'
                    dataChangeLastModifiedBy: 'apollo'
                    dataChangeCreatedTime: '2024-01-15T10:30:00.000Z'
                    dataChangeLastModifiedTime: '2024-01-15T10:30:00.000Z'
                    key: 'spring.datasource.url'
                    type: 0
                    value: 'jdbc:mysql://localhost:3306/apollo'
                    comment: '数据库连接地址'
                  - dataChangeCreatedBy: 'apollo'
                    dataChangeLastModifiedBy: 'ops-user'
                    dataChangeCreatedTime: '2024-01-15T10:30:00.000Z'
                    dataChangeLastModifiedTime: '2024-01-18T09:15:00.000Z'
                    key: 'logging.level.root'
                    type: 0
                    value: 'INFO'
                    comment: '日志级别配置'
          headers: {}
        '404':
          description: '命名空间不存在'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
    post:
      summary: 创建新的配置项 (original openapi)
      operationId: createItem
      deprecated: false
      description: POST /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items
      tags:
        - Item Management
      parameters:
        - name: appId
          in: path
          description: '应用ID'
          required: true
          schema:
            type: string
        - name: env
          in: path
          description: '环境标识'
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: '集群名称'
          required: true
          schema:
            type: string
        - name: namespaceName
          in: path
          description: '命名空间名称'
          required: true
          schema:
            type: string
        - name: operator
          in: query
          description: '操作人用户名'
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenItemDTO'
        required: true
      responses:
        '200':
          description: '配置项创建成功'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenItemDTO'
              example:
                dataChangeCreatedBy: 'apollo'
                dataChangeLastModifiedBy: 'apollo'
                dataChangeCreatedTime: '2024-01-15T10:30:00.000Z'
                dataChangeLastModifiedTime: '2024-01-15T10:30:00.000Z'
                key: 'server.port'
                type: 0
                value: '8080'
                comment: '服务器端口配置'
          headers: {}
        '400':
          description: '请求参数错误'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
        '403':
          description: '权限不足'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
  /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}:
    get:
      summary: 通过查询参数获取配置项（支持编码的key） (original openapi)
      operationId: getItemByEncodedKey
      deprecated: false
      description: GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}
      tags:
        - Item Management
      parameters:
        - name: appId
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: env
          in: path
          description: '环境标识'
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: '集群名称'
          required: true
          schema:
            type: string
        - name: namespaceName
          in: path
          description: '命名空间名称'
          required: true
          schema:
            type: string
        - name: key
          in: path
          description: '配置项键名（需要URL编码）'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '成功获取配置项（支持编码key）'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenItemDTO'
              example:
                dataChangeCreatedBy: 'apollo'
                dataChangeLastModifiedBy: 'dev-user'
                dataChangeCreatedTime: '2024-01-15T10:30:00.000Z'
                dataChangeLastModifiedTime: '2024-01-20T14:25:00.000Z'
                key: 'spring.datasource.url'
                type: 0
                value: 'jdbc:mysql://localhost:3306/apollo?useUnicode=true&characterEncoding=utf8'
                comment: '数据库连接地址，包含特殊字符'
          headers: {}
        '404':
          description: '配置项不存在'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
    put:
      summary: 通过编码的key更新配置项 (original openapi)
      operationId: updateItemByEncodedKey
      deprecated: false
      description: PUT /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}
      tags:
        - Item Management
      parameters:
        - name: appId
          in: path
          description: '应用ID'
          required: true
          schema:
            type: string
        - name: env
          in: path
          description: '环境标识'
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: '集群名称'
          required: true
          schema:
            type: string
        - name: namespaceName
          in: path
          description: '命名空间名称'
          required: true
          schema:
            type: string
        - name: key
          in: path
          description: '配置项键名（需要URL编码）'
          required: true
          schema:
            type: string
        - name: createIfNotExists
          in: query
          description: '若不存在则创建（true/false）'
          required: true
          example: 'false'
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenItemDTO'
        required: true
      responses:
        '200':
          description: '配置项更新成功（编码key）'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/SuccessEmptyResponse'
        '400':
          description: 请求参数错误
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
        '403':
          description: '权限不足'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
        '404':
          description: '配置项不存在'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
          headers: {}
    delete:
      summary: 通过编码的key删除配置项 (original openapi)
      operationId: deleteItemByEncodedKey
      deprecated: false
      description: DELETE /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}
      tags:
        - Item Management
      parameters:
        - name: appId
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: env
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: namespaceName
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: key
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: operator
          in: query
          description: ''
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/SuccessEmptyResponse'
          headers: {}
  /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/batchUpdate:
    put:
      summary: 通过文本批量修改配置项 (new added)
      operationId: batchUpdateItemsByText
      deprecated: false
      description: >-
        PUT
        /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/batchUpdate:
      tags:
        - Item Management
      parameters:
        - name: appId
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: env
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: namespaceName
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: operator
          in: query
          description: '操作人用户名'
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenNamespaceTextModel'
        required: true
      responses:
        '200':
          description: '批量更新配置项成功'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/SuccessEmptyResponse'
        '403':
          description: '权限不足'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
          headers: {}
  /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/items:
    get:
      summary: 获取分支下的配置项 (new added)
      operationId: getBranchItems
      deprecated: false
      description: >-
        GET
        /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/items:
      tags:
        - Item Management
      parameters:
        - name: appId
          in: path
          description: '应用ID'
          required: true
          schema:
            type: string
        - name: env
          in: path
          description: '环境标识'
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: '集群名称'
          required: true
          schema:
            type: string
        - name: namespaceName
          in: path
          description: '命名空间名称'
          required: true
          schema:
            type: string
        - name: branchName
          in: path
          description: '分支名称'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '成功获取分支下的配置项列表'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OpenItemDTO'
              example:
                - dataChangeCreatedBy: 'apollo'
                  dataChangeLastModifiedBy: 'dev-user'
                  dataChangeCreatedTime: '2024-01-15T10:30:00.000Z'
                  dataChangeLastModifiedTime: '2024-01-20T14:25:00.000Z'
                  key: 'feature.new-feature'
                  type: 0
                  value: 'enabled'
                  comment: '新功能开关，分支测试中'
                - dataChangeCreatedBy: 'apollo'
                  dataChangeLastModifiedBy: 'dev-user'
                  dataChangeCreatedTime: '2024-01-15T10:30:00.000Z'
                  dataChangeLastModifiedTime: '2024-01-20T14:25:00.000Z'
                  key: 'test.debug.level'
                  type: 0
                  value: 'verbose'
                  comment: '测试调试级别'
          headers: {}
        '404':
          description: '分支不存在'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
  /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/compare:
    post:
      summary: 对比命名空间配置差异 (new added)
      operationId: compareItems
      deprecated: false
      description: >-
        POST
        /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/compare
      tags:
        - Item Management
      parameters:
        - name: appId
          in: path
          description: '应用ID'
          required: true
          schema:
            type: string
        - name: env
          in: path
          description: '环境标识'
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: '集群名称'
          required: true
          schema:
            type: string
        - name: namespaceName
          in: path
          description: '命名空间名称'
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenNamespaceSyncModel'
        required: true
      responses:
        '200':
          description: '成功对比命名空间配置差异'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OpenItemDiffs'
              example:
                - namespace:
                    appId: ''
                    env: ''
                    clusterName: ''
                    namespaceName: ''
                  diffs:
                    dataChangeCreatedBy: ''
                    dataChangeLastModifiedBy: ''
                    dataChangeCreatedByDisplayName: ''
                    dataChangeLastModifiedByDisplayName: ''
                    dataChangeCreatedTime: ''
                    dataChangeLastModifiedTime: ''
                    createItems:
                      - dataChangeCreatedBy: ''
                        dataChangeLastModifiedBy: ''
                        dataChangeCreatedByDisplayName: ''
                        dataChangeLastModifiedByDisplayName: ''
                        dataChangeCreatedTime: ''
                        dataChangeLastModifiedTime: ''
                        id: 0
                        namespaceId: 0
                        key: ''
                        type: 0
                        value: ''
                        comment: ''
                        lineNum: 0
                    updateItems:
                      - dataChangeCreatedBy: ''
                        dataChangeLastModifiedBy: ''
                        dataChangeCreatedByDisplayName: ''
                        dataChangeLastModifiedByDisplayName: ''
                        dataChangeCreatedTime: ''
                        dataChangeLastModifiedTime: ''
                        id: 0
                        namespaceId: 0
                        key: ''
                        type: 0
                        value: ''
                        comment: ''
                        lineNum: 0
                    deleteItems:
                      - dataChangeCreatedBy: ''
                        dataChangeLastModifiedBy: ''
                        dataChangeCreatedByDisplayName: ''
                        dataChangeLastModifiedByDisplayName: ''
                        dataChangeCreatedTime: ''
                        dataChangeLastModifiedTime: ''
                        id: 0
                        namespaceId: 0
                        key: ''
                        type: 0
                        value: ''
                        comment: ''
                        lineNum: 0
                  extInfo: ''
          headers: {}
  /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/sync:
    post:
      summary: 同步配置项到多个命名空间 (new added)
      operationId: syncItems
      deprecated: false
      description: >-
        POST
        /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/sync:
      tags:
        - Item Management
      parameters:
        - name: appId
          in: path
          description: '应用ID'
          required: true
          schema:
            type: string
        - name: env
          in: path
          description: '环境标识'
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: namespaceName
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: operator
          in: query
          description: '操作人用户名'
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenNamespaceSyncModel'
        required: true
      responses:
        '200':
          description: '配置项同步成功'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/SuccessEmptyResponse'
        '400':
          description: '请求参数错误'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
        '403':
          description: '权限不足'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
          headers: {}
  /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/validate:
    post:
      summary: 验证配置文本语法 (new added)
      operationId: validateItems
      deprecated: false
      description: >-
        POST
        /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/validate
      tags:
        - Item Management
      parameters:
        - name: appId
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: env
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: namespaceName
          in: path
          description: ''
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenNamespaceTextModel'
        required: true
      responses:
        '200':
          description: '配置文本语法验证通过'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/SuccessEmptyResponse'
        '400':
          description: '配置文本语法错误'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
          headers: {}
  /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/revert:
    post:
      summary: 撤销配置项更改 (new added)
      operationId: revertItems
      deprecated: false
      description: >-
        POST
        /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/revert
      tags:
        - Item Management
      parameters:
        - name: appId
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: env
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: namespaceName
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: operator
          in: query
          description: '操作人用户名'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '配置项更改撤销成功'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/SuccessEmptyResponse'
        '400':
          description: '请求参数错误'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
        '403':
          description: '权限不足'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
          headers: {}
  /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}:
    get:
      summary: 获取指定集群信息 (original openapi)
      operationId: getCluster
      deprecated: false
      description: GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}
      tags:
        - Cluster Management
      parameters:
        - name: appId
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: env
          in: path
          description: ''
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 成功获取集群信息
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenClusterDTO'
              example:
                dataChangeCreatedBy: apollo
                dataChangeLastModifiedBy: ops-user
                dataChangeCreatedTime: '2024-01-15T10:30:00.000Z'
                dataChangeLastModifiedTime: '2024-01-18T09:15:00.000Z'
                name: production
                appId: sample-app
          headers: {}
        '404':
          description: 集群不存在
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
    delete:
      summary: 删除集群 (new added)
      operationId: deleteCluster
      deprecated: false
      description: DELETE /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}
      tags:
        - Cluster Management
      parameters:
        - name: env
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: operator
          in: query
          description: '操作人用户名，openapi外部调用时需传入'
          required: false
          schema:
            type: string
      responses:
        '200':
          description: '集群删除成功'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/SuccessEmptyResponse'
        '400':
          description: '删除失败，集群可能包含配置'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
        '403':
          description: '权限不足'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
        '404':
          description: '集群不存在'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
          headers: {}
  /openapi/v1/envs/{env}/apps/{appId}/clusters:
    post:
      summary: 创建集群 (original openapi)
      operationId: createCluster
      deprecated: false
      description: POST /openapi/v1/envs/{env}/apps/{appId}/clusters
      tags:
        - Cluster Management
      parameters:
        - name: appId
          in: path
          description: 应用ID
          required: true
          schema:
            type: string
        - name: env
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenClusterDTO'
        required: true
      responses:
        '200':
          description: 集群创建成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenClusterDTO'
              example:
                dataChangeCreatedBy: apollo
                dataChangeLastModifiedBy: apollo
                dataChangeCreatedTime: '2024-01-15T10:30:00.000Z'
                dataChangeLastModifiedTime: '2024-01-15T10:30:00.000Z'
                name: test-cluster
                appId: sample-app
          headers: {}
        '400':
          description: 请求参数错误
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
        '403':
          description: 权限不足
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
  /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases:
    post:
      summary: 创建发布 (original openapi)
      operationId: createRelease
      deprecated: false
      description: '创建发布'
      tags:
        - Release Management
      parameters:
        - name: appId
          in: path
          description: 'app标识'
          required: true
          schema:
            type: string
        - name: env
          in: path
          description: '环境标识'
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: namespaceName
          in: path
          description: 命名空间名称
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NamespaceReleaseDTO'
        required: true
      responses:
        '200':
          description: 发布创建成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenReleaseDTO'
              example:
                dataChangeCreatedBy: 'apollo'
                dataChangeLastModifiedBy: 'apollo'
                dataChangeCreatedTime: '2024-01-15T10:30:00.000Z'
                dataChangeLastModifiedTime: '2024-01-15T10:30:00.000Z'
                id: 12345
                appId: 'sample-app'
                clusterName: 'default'
                namespaceName: 'application'
                name: 'Release v1.0.0'
                configurations:
                  'server.port': '8080'
                  'spring.datasource.url': 'jdbc:mysql://localhost:3306/apollo'
                  'logging.level.root': 'INFO'
                comment: '首次发布，包含基础配置'
          headers: {}
        '400':
          description: '发布参数错误'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
        '403':
          description: '权限不足'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
  /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases/latest:
    get:
      summary: 获取最新活跃发布 (original openapi)
      operationId: loadLatestActiveRelease
      deprecated: false
      description: '查询命名空间最新活跃发布'
      tags:
        - Release Management
      parameters:
        - name: appId
          in: path
          description: '应用ID'
          required: true
          schema:
            type: string
        - name: env
          in: path
          description: '环境标识'
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: '集群名称'
          required: true
          schema:
            type: string
        - name: namespaceName
          in: path
          description: '命名空间名称'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '成功获取最新活跃发布'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenReleaseDTO'
              example:
                dataChangeCreatedBy: 'apollo'
                dataChangeLastModifiedBy: 'apollo'
                dataChangeCreatedTime: '2024-01-15T10:30:00.000Z'
                dataChangeLastModifiedTime: '2024-01-15T10:30:00.000Z'
                id: 12345
                appId: 'sample-app'
                clusterName: 'default'
                namespaceName: 'application'
                name: 'Release v1.2.0'
                configurations:
                  'server.port': '8080'
                  'spring.datasource.url': 'jdbc:mysql://localhost:3306/apollo'
                  'logging.level.root': 'INFO'
                  'app.version': '1.2.0'
                comment: '最新生产发布版本，包含性能优化'
          headers: {}
        '404':
          description: '未找到活跃发布'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
  /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/merge:
    post:
      summary: 合并分支 (original openapi)
      operationId: merge
      deprecated: false
      description: '合并灰度分支并可选择删除分支'
      tags:
        - Release Management
      parameters:
        - name: appId
          in: path
          description: '应用ID'
          required: true
          schema:
            type: string
        - name: env
          in: path
          description: '环境标识'
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: '集群名称'
          required: true
          schema:
            type: string
        - name: namespaceName
          in: path
          description: '命名空间名称'
          required: true
          schema:
            type: string
        - name: branchName
          in: path
          description: '分支名称'
          required: true
          schema:
            type: string
        - name: deleteBranch
          in: query
          description: '合并后是否删除分支（true/false）'
          required: true
          example: 'true'
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NamespaceReleaseDTO'
        required: true
      responses:
        '200':
          description: '分支合并成功'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenReleaseDTO'
              example:
                dataChangeCreatedBy: 'apollo'
                dataChangeLastModifiedBy: 'apollo'
                dataChangeCreatedTime: '2024-01-15T10:30:00.000Z'
                dataChangeLastModifiedTime: '2024-01-15T10:30:00.000Z'
                id: 12346
                appId: 'sample-app'
                clusterName: 'default'
                namespaceName: 'application'
                name: 'Merge from branch feature-123'
                configurations:
                  'server.port': '8080'
                  'spring.datasource.url': 'jdbc:mysql://localhost:3306/apollo'
                  'logging.level.root': 'INFO'
                  'feature.new-feature': 'enabled'
                comment: '合并功能分支到主分支，包含新功能配置'
          headers: {}
        '400':
          description: '合并参数错误'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
        '403':
          description: '权限不足'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
  /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/releases:
    post:
      summary: 创建灰度发布 (original openapi)
      operationId: createGrayRelease
      deprecated: false
      description: '创建灰度发布'
      tags:
        - Release Management
      parameters:
        - name: appId
          in: path
          description: 'app标识'
          required: true
          schema:
            type: string
        - name: env
          in: path
          description: '环境标识'
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: '集群名称'
          required: true
          schema:
            type: string
        - name: namespaceName
          in: path
          description: '命名空间名称'
          required: true
          schema:
            type: string
        - name: branchName
          in: path
          description: '分支名称'
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NamespaceReleaseDTO'
        required: true
      responses:
        '200':
          description: 灰度发布创建成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenReleaseDTO'
              example:
                dataChangeCreatedBy: ''
                dataChangeLastModifiedBy: ''
                dataChangeCreatedTime: ''
                dataChangeLastModifiedTime: ''
                id: 0
                appId: ''
                clusterName: ''
                namespaceName: ''
                name: ''
                configurations:
                  '': ''
                comment: ''
          headers: {}
  /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/gray-del-releases:
    post:
      summary: 创建灰度删除发布 (original openapi)
      operationId: createGrayDelRelease
      deprecated: false
      description: ''
      tags:
        - Release Management
      parameters:
        - name: appId
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: env
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: namespaceName
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: branchName
          in: path
          description: ''
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NamespaceGrayDelReleaseDTO'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenReleaseDTO'
              example:
                dataChangeCreatedBy: ''
                dataChangeLastModifiedBy: ''
                dataChangeCreatedTime: ''
                dataChangeLastModifiedTime: ''
                id: 0
                appId: ''
                clusterName: ''
                namespaceName: ''
                name: ''
                configurations:
                  '': ''
                comment: ''
          headers: {}
  /openapi/v1/envs/{env}/releases/{releaseId}/rollback:
    put:
      summary: 回滚发布 (original openapi)
      operationId: rollback
      deprecated: false
      description: 回滚到指定的发布版本
      tags:
        - Release Management
      parameters:
        - name: env
          in: path
          description: '环境标识'
          required: true
          schema:
            type: string
        - name: releaseId
          in: path
          description: '发布ID'
          required: true
          schema:
            type: integer
            format: int64
        - name: operator
          in: query
          description: '操作人用户名'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '发布回滚成功'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/SuccessEmptyResponse'
          headers: {}
  /openapi/v1/envs/{env}/releases/{releaseId}:
    get:
      summary: 获取发布详情 (new added)
      operationId: getReleaseById
      deprecated: false
      description: GET /openapi/v1/envs/{env}/releases/{releaseId}
      tags:
        - Release Management
      parameters:
        - name: env
          in: path
          description: '环境标识'
          required: true
          schema:
            type: string
        - name: releaseId
          in: path
          description: '发布ID'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: '成功获取发布详情'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenReleaseDTO'
              example:
                dataChangeCreatedBy: ''
                dataChangeLastModifiedBy: ''
                dataChangeCreatedTime: ''
                dataChangeLastModifiedTime: ''
                id: 0
                appId: ''
                clusterName: ''
                namespaceName: ''
                name: ''
                configurations:
                  '': ''
                comment: ''
          headers: {}
  /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases/all:
    get:
      summary: 获取所有发布（分页） (new added)
      operationId: findAllReleases
      deprecated: false
      description: >-
        GET
        /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases/all
      tags:
        - Release Management
      parameters:
        - name: appId
          in: path
          description: '应用ID'
          required: true
          schema:
            type: string
        - name: env
          in: path
          description: '环境标识'
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: '集群名称'
          required: true
          schema:
            type: string
        - name: namespaceName
          in: path
          description: '命名空间名称'
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: '页码，从0开始'
          required: true
          example: 0
          schema:
            type: integer
        - name: size
          in: query
          description: '每页数量'
          required: true
          example: 5
          schema:
            type: integer
      responses:
        '200':
          description: '成功获取发布列表'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OpenReleaseBO'
              example:
                - baseInfo:
                    dataChangeCreatedBy: ''
                    dataChangeLastModifiedBy: ''
                    dataChangeCreatedByDisplayName: ''
                    dataChangeLastModifiedByDisplayName: ''
                    dataChangeCreatedTime: ''
                    dataChangeLastModifiedTime: ''
                    id: 0
                    releaseKey: ''
                    name: ''
                    appId: ''
                    clusterName: ''
                    namespaceName: ''
                    configurations: ''
                    comment: ''
                    isAbandoned: false
                  items:
                    - key: ''
                      value: ''
          headers: {}
  /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases/active:
    get:
      summary: 获取活跃发布（分页） (new added)
      operationId: findActiveReleases
      deprecated: false
      description: >-
        GET
        /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases/active
      tags:
        - Release Management
      parameters:
        - name: appId
          in: path
          description: '应用ID'
          required: true
          schema:
            type: string
        - name: env
          in: path
          description: '环境标识'
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: '集群名称'
          required: true
          schema:
            type: string
        - name: namespaceName
          in: path
          description: '命名空间名称'
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: '页码，从0开始'
          required: true
          example: 0
          schema:
            type: integer
        - name: size
          in: query
          description: '每页数量'
          required: true
          example: 5
          schema:
            type: integer
      responses:
        '200':
          description: '成功获取活跃发布列表'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OpenReleaseDTO'
              example:
                - dataChangeCreatedBy: ''
                  dataChangeLastModifiedBy: ''
                  dataChangeCreatedTime: ''
                  dataChangeLastModifiedTime: ''
                  id: 0
                  appId: ''
                  clusterName: ''
                  namespaceName: ''
                  name: ''
                  configurations:
                    '': ''
                  comment: ''
          headers: {}
  /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/instances:
    get:
      summary: 获取命名空间下的实例数量 (original openapi)
      operationId: getInstanceCountByNamespace
      deprecated: false
      description: GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/instances
      tags:
        - Instance Management
      parameters:
        - name: env
          in: path
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: '应用ID'
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: '集群名称'
          required: true
          schema:
            type: string
        - name: namespaceName
          in: path
          description: '命名空间名称'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '成功返回实例数量'
          content:
            application/json:
              schema:
                type: integer
          headers: {}
  /openapi/v1/envs/{env}/releases/{releaseId}/instances:
    get:
      summary: 根据发布版本查询实例（支持分页） (new added)
      operationId: getByRelease
      deprecated: false
      description: GET /openapi/v1/envs/{env}/releases/{releaseId}/instances
      tags:
        - Instance Management
      parameters:
        - name: env
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: releaseId
          in: path
          description: ''
          required: true
          schema:
            type: integer
        - name: page
          in: query
          description: ''
          required: true
          example: 0
          schema:
            type: integer
        - name: size
          in: query
          description: ''
          required: true
          example: 20
          schema:
            type: integer
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenPageDTOOpenInstanceDTO'
              example:
                page: 0
                size: 0
                total: 0
                content:
                  - id: 0
                    appId: ''
                    clusterName: ''
                    dataCenter: ''
                    ip: ''
                    configs:
                      - release:
                          dataChangeCreatedBy: ''
                          dataChangeLastModifiedBy: ''
                          dataChangeCreatedTime: ''
                          dataChangeLastModifiedTime: ''
                          id: 0
                          appId: ''
                          clusterName: ''
                          namespaceName: ''
                          name: ''
                          configurations:
                            '': ''
                          comment: ''
                        releaseDeliveryTime: ''
                        dataChangeLastModifiedTime: ''
                    dataChangeCreatedTime: ''
          headers: {}
  /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/instances_not_in: # avoidng confliction with other server endpoint
    get:
      summary: 查询不在指定发布版本中的实例 (new added)
      operationId: getByReleasesNotIn
      deprecated: false
      description: >-
        GET
        /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/instances?excludeReleases=1,2,3
      tags:
        - Instance Management
      parameters:
        - name: env
          in: path
          description: '环境标识'
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: '应用ID'
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: '集群名称'
          required: true
          schema:
            type: string
        - name: namespaceName
          in: path
          description: '命名空间名称'
          required: true
          schema:
            type: string
        - name: excludeReleases
          in: query
          description: '排除的发布ID列表，用逗号分隔'
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OpenInstanceDTO'
              example:
                - id: 0
                  appId: ''
                  clusterName: ''
                  dataCenter: ''
                  ip: ''
                  configs:
                    - release:
                        dataChangeCreatedBy: ''
                        dataChangeLastModifiedBy: ''
                        dataChangeCreatedTime: ''
                        dataChangeLastModifiedTime: ''
                        id: 0
                        appId: ''
                        clusterName: ''
                        namespaceName: ''
                        name: ''
                        configurations:
                          '': ''
                        comment: ''
                      releaseDeliveryTime: ''
                      dataChangeLastModifiedTime: ''
                  dataChangeCreatedTime: ''
          headers: {}
  /openapi/v1/apps/{appId}/appnamespaces:
    post:
      summary: 创建AppNamespace (original openapi)
      operationId: createNamespace
      deprecated: false
      description: POST /openapi/v1/apps/{appId}/appnamespaces
      tags:
        - Namespace Management
      parameters:
        - name: appId
          in: path
          description: ''
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenAppNamespaceDTO'
        required: true
      responses:
        '200':
          description: 'AppNamespace创建成功'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenAppNamespaceDTO'
              example:
                dataChangeCreatedBy: 'apollo'
                dataChangeLastModifiedBy: 'apollo'
                dataChangeCreatedTime: '2024-01-15T10:30:00.000Z'
                dataChangeLastModifiedTime: '2024-01-15T10:30:00.000Z'
                name: 'database'
                appId: 'sample-app'
                format: 'properties'
                isPublic: false
                appendNamespacePrefix: true
                comment: '数据库相关配置命名空间'
          headers: {}
        '400':
          description: '请求参数错误'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
        '403':
          description: '权限不足'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
    get:
      summary: 获取指定应用的AppNamespace (new added)
      operationId: getAppNamespacesByApp
      deprecated: false
      description: GET /openapi/v1/apps/{appId}/appnamespaces
      tags:
        - Namespace Management
      parameters:
        - name: appId
          in: path
          description: ''
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OpenAppNamespaceDTO'
              example:
                - dataChangeCreatedBy: ''
                  dataChangeLastModifiedBy: ''
                  dataChangeCreatedTime: ''
                  dataChangeLastModifiedTime: ''
                  name: ''
                  appId: ''
                  format: ''
                  isPublic: false
                  appendNamespacePrefix: false
                  comment: ''
          headers: {}
  /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces:
    get:
      summary: 获取指定集群下的所有Namespace (original openapi)
      operationId: findNamespaces
      deprecated: false
      description: GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces
      tags:
        - Namespace Management
      parameters:
        - name: appId
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: env
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: fillItemDetail
          in: query
          description: ''
          required: true
          example: 'true'
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OpenNamespaceDTO'
              example:
                - dataChangeCreatedBy: ''
                  dataChangeLastModifiedBy: ''
                  dataChangeCreatedTime: ''
                  dataChangeLastModifiedTime: ''
                  appId: ''
                  clusterName: ''
                  namespaceName: ''
                  comment: ''
                  format: ''
                  isPublic: false
                  items:
                    - dataChangeCreatedBy: ''
                      dataChangeLastModifiedBy: ''
                      dataChangeCreatedTime: ''
                      dataChangeLastModifiedTime: ''
                      key: ''
                      type: 0
                      value: ''
                      comment: ''
          headers: {}
  /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}:
    get:
      summary: 获取指定的Namespace (original openapi)
      operationId: loadNamespace
      deprecated: false
      description: GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}
      tags:
        - Namespace Management
      parameters:
        - name: appId
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: env
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: namespaceName
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: fillItemDetail
          in: query
          description: ''
          required: true
          example: 'true'
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenNamespaceDTO'
              example:
                dataChangeCreatedBy: ''
                dataChangeLastModifiedBy: ''
                dataChangeCreatedTime: ''
                dataChangeLastModifiedTime: ''
                appId: ''
                clusterName: ''
                namespaceName: ''
                comment: ''
                format: ''
                isPublic: false
                items:
                  - dataChangeCreatedBy: ''
                    dataChangeLastModifiedBy: ''
                    dataChangeCreatedTime: ''
                    dataChangeLastModifiedTime: ''
                    key: ''
                    type: 0
                    value: ''
                    comment: ''
          headers: {}
  /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/lock:
    get:
      summary: 获取Namespace的锁状态 (original openapi)
      operationId: getNamespaceLock
      deprecated: false
      description: GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/lock
      tags:
        - Namespace Management
      parameters:
        - name: appId
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: env
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: namespaceName
          in: path
          description: ''
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenNamespaceLockDTO'
              example:
                namespaceName: ''
                isLocked: false
                lockedBy: ''
          headers: {}
  /openapi/v1/appnamespaces:
    get:
      summary: 获取所有公共AppNamespace (new added)
      operationId: getAppNamespaces
      deprecated: false
      description: GET /openapi/v1/appnamespaces?public=true
      tags:
        - Namespace Management
      parameters:
        - name: publicOnly
          in: query
          description: ''
          required: true
          example: 'false'
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OpenAppNamespaceDTO'
              example:
                - dataChangeCreatedBy: ''
                  dataChangeLastModifiedBy: ''
                  dataChangeCreatedTime: ''
                  dataChangeLastModifiedTime: ''
                  name: ''
                  appId: ''
                  format: ''
                  isPublic: false
                  appendNamespacePrefix: false
                  comment: ''
          headers: {}
  /openapi/v1/apps/{appId}/appnamespaces/{namespaceName}:
    get:
      summary: 获取指定的AppNamespace (new added)
      operationId: getAppNamespace
      deprecated: false
      description: GET /openapi/v1/apps/{appId}/appnamespaces/{namespaceName}
      tags:
        - Namespace Management
      parameters:
        - name: appId
          in: path
          description: '应用ID'
          required: true
          schema:
            type: string
        - name: namespaceName
          in: path
          description: '命名空间名称'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '成功获取AppNamespace'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenAppNamespaceDTO'
              example:
                dataChangeCreatedBy: ''
                dataChangeLastModifiedBy: ''
                dataChangeCreatedTime: ''
                dataChangeLastModifiedTime: ''
                name: ''
                appId: ''
                format: ''
                isPublic: false
                appendNamespacePrefix: false
                comment: ''
          headers: {}
    delete:
      summary: 删除AppNamespace (new added)
      operationId: deleteAppNamespace
      deprecated: false
      description: DELETE /openapi/v1/apps/{appId}/appnamespaces/{namespaceName}
      tags:
        - Namespace Management
      parameters:
        - name: appId
          in: path
          description: '应用ID'
          required: true
          schema:
            type: string
        - name: namespaceName
          in: path
          description: '命名空间名称'
          required: true
          schema:
            type: string
        - name: operator
          in: query
          description: '操作人用户名'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'AppNamespace删除成功'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/SuccessEmptyResponse'
          headers: {}
  /openapi/v1/apps/{appId}/namespaces/releases/status:
    get:
      summary: 获取应用下所有Namespace的发布状态 (new added)
      operationId: getNamespacesReleaseStatus
      deprecated: false
      description: GET /openapi/v1/apps/{appId}/namespaces/releases/status
      tags:
        - Namespace Management
      parameters:
        - name: appId
          in: path
          description: '应用ID'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '成功获取发布状态映射'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringToStringBoolMap'
          headers: {}
  /openapi/v1/envs/{env}/appnamespaces/{publicNamespaceName}/instances:
    get:
      summary: 获取公共AppNamespace的所有实例 (new added)
      operationId: getPublicAppNamespaceInstances
      deprecated: false
      description: GET /openapi/v1/envs/{env}/appnamespaces/{publicNamespaceName}/instances
      tags:
        - Namespace Management
      parameters:
        - name: env
          in: path
          description: '环境标识'
          required: true
          schema:
            type: string
        - name: publicNamespaceName
          in: path
          description: '公共命名空间名称'
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: '页码，从0开始'
          required: true
          example: 0
          schema:
            type: integer
        - name: size
          in: query
          description: '每页数量'
          required: true
          example: 10
          schema:
            type: integer
      responses:
        '200':
          description: '成功获取实例列表'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OpenNamespaceDTO'
              example:
                - dataChangeCreatedBy: ''
                  dataChangeLastModifiedBy: ''
                  dataChangeCreatedTime: ''
                  dataChangeLastModifiedTime: ''
                  appId: ''
                  clusterName: ''
                  namespaceName: ''
                  comment: ''
                  format: ''
                  isPublic: false
                  items:
                    - dataChangeCreatedBy: ''
                      dataChangeLastModifiedBy: ''
                      dataChangeCreatedTime: ''
                      dataChangeLastModifiedTime: ''
                      key: ''
                      type: 0
                      value: ''
                      comment: ''
          headers: {}
  /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/public-association:
    get:
      summary: 获取关联的公共Namespace (new added)
      operationId: getPublicNamespaceAssociation
      deprecated: false
      description: >-
        GET
        /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/public-association
      tags:
        - Namespace Management
      parameters:
        - name: appId
          in: path
          description: '应用ID'
          required: true
          schema:
            type: string
        - name: env
          in: path
          description: '环境标识'
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: '集群名称'
          required: true
          schema:
            type: string
        - name: namespaceName
          in: path
          description: '命名空间名称'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '成功获取关联的公共Namespace'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenNamespaceDTO'
              example:
                dataChangeCreatedBy: ''
                dataChangeLastModifiedBy: ''
                dataChangeCreatedTime: ''
                dataChangeLastModifiedTime: ''
                appId: ''
                clusterName: ''
                namespaceName: ''
                comment: ''
                format: ''
                isPublic: false
                items:
                  - dataChangeCreatedBy: ''
                    dataChangeLastModifiedBy: ''
                    dataChangeCreatedTime: ''
                    dataChangeLastModifiedTime: ''
                    key: ''
                    type: 0
                    value: ''
                    comment: ''
          headers: {}
  /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/integrity-check:
    get:
      summary: 检查缺失的Namespace (new added)
      operationId: checkNamespaceIntegrity
      deprecated: false
      description: >-
        GET
        /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/integrity-check
      tags:
        - Namespace Management
      parameters:
        - name: appId
          in: path
          description: '应用ID'
          required: true
          schema:
            type: string
        - name: env
          in: path
          description: '环境标识'
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: '集群名称'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '缺失的命名空间名称列表'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
                - ''
          headers: {}
  /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/links:
    delete:
      summary: 删除关联的Namespace (new added)
      operationId: deleteNamespaceLinks
      deprecated: false
      description: >-
        DELETE
        /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/links
      tags:
        - Namespace Management
      parameters:
        - name: appId
          in: path
          description: '应用ID'
          required: true
          schema:
            type: string
        - name: env
          in: path
          description: '环境标识'
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: '集群名称'
          required: true
          schema:
            type: string
        - name: namespaceName
          in: path
          description: '命名空间名称'
          required: true
          schema:
            type: string
        - name: operator
          in: query
          description: '操作人用户名'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '解除关联成功'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/SuccessEmptyResponse'
          headers: {}
  /openapi/v1/organizations:
    get:
      summary: 获取所有组织信息 (original openapi)
      operationId: getOrganization
      deprecated: false
      description: GET /openapi/v1/organizations
      tags:
        - Organization Management
      responses:
        '200':
          description: '成功获取组织列表'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OpenOrganizationDto'
                description: 组织列表
              example:
                - orgId: 'default'
                  orgName: 'Default Organization'
                - orgId: 'microservices'
                  orgName: 'Microservices Team'
                - orgId: 'infrastructure'
                  orgName: 'Infrastructure Team'
          headers: {}
        '401':
          description: '未授权访问'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
  /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches:
    get:
      summary: 获取命名空间分支信息 (original openapi)
      operationId: findBranch
      deprecated: false
      description: GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches
      tags:
        - Namespace Branch Management
      parameters:
        - name: appId
          in: path
          description: '应用ID'
          required: true
          schema:
            type: string
        - name: env
          in: path
          description: '环境标识'
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: '集群名称'
          required: true
          schema:
            type: string
        - name: namespaceName
          in: path
          description: '命名空间名称'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '成功获取分支信息'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenNamespaceDTO'
              example:
                dataChangeCreatedBy: 'apollo'
                dataChangeLastModifiedBy: 'dev-user'
                dataChangeCreatedTime: '2024-01-15T10:30:00.000Z'
                dataChangeLastModifiedTime: '2024-01-20T14:25:00.000Z'
                appId: 'sample-app'
                clusterName: 'default'
                namespaceName: 'application'
                comment: '功能分支，用于测试新特性'
                format: 'properties'
                isPublic: false
                items:
                  - dataChangeCreatedBy: 'apollo'
                    dataChangeLastModifiedBy: 'dev-user'
                    dataChangeCreatedTime: '2024-01-15T10:30:00.000Z'
                    dataChangeLastModifiedTime: '2024-01-20T14:25:00.000Z'
                    key: 'feature.new-feature'
                    type: 0
                    value: 'enabled'
                    comment: '新功能开关'
                  - dataChangeCreatedBy: 'apollo'
                    dataChangeLastModifiedBy: 'dev-user'
                    dataChangeCreatedTime: '2024-01-15T10:30:00.000Z'
                    dataChangeLastModifiedTime: '2024-01-20T14:25:00.000Z'
                    key: 'test.mode'
                    type: 0
                    value: 'debug'
                    comment: '测试模式配置'
          headers: {}
        '404':
          description: '分支不存在'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ExceptionResponse'
    post:
      summary: 创建命名空间分支 (original openapi)
      deprecated: false
      operationId: createBranch
      description: POST /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches
      tags:
        - Namespace Branch Management
      parameters:
        - name: appId
          in: path
          description: 'app标识'
          required: true
          schema:
            type: string
        - name: env
          in: path
          description: '环境标识'
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: '集群名称'
          required: true
          schema:
            type: string
        - name: namespaceName
          in: path
          description: '命名空间名称'
          required: true
          schema:
            type: string
        - name: operator
          in: query
          description: '操作人用户名'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '命名空间分支创建成功'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenNamespaceDTO'
              example:
                dataChangeCreatedBy: ''
                dataChangeLastModifiedBy: ''
                dataChangeCreatedTime: ''
                dataChangeLastModifiedTime: ''
                appId: ''
                clusterName: ''
                namespaceName: ''
                comment: ''
                format: ''
                isPublic: false
                items:
                  - dataChangeCreatedBy: ''
                    dataChangeLastModifiedBy: ''
                    dataChangeCreatedTime: ''
                    dataChangeLastModifiedTime: ''
                    key: ''
                    type: 0
                    value: ''
                    comment: ''
          headers: {}
  /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}:
    delete:
      summary: 删除命名空间分支 (original openapi)
      deprecated: false
      operationId: deleteBranch
      description: DELETE /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}
      tags:
        - Namespace Branch Management
      parameters:
        - name: env
          in: path
          description: '环境标识'
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: '应用ID'
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: '集群名称'
          required: true
          schema:
            type: string
        - name: namespaceName
          in: path
          description: '命名空间名称'
          required: true
          schema:
            type: string
        - name: branchName
          in: path
          description: '分支名称'
          required: true
          schema:
            type: string
        - name: operator
          in: query
          description: 操作人用户名
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '分支删除成功'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/SuccessEmptyResponse'
          headers: {}
    patch:
      summary: 合并分支到主分支 (new added)
      operationId: mergeBranch
      deprecated: false
      description: >-
        PATCH
        /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}


        使用 PATCH 方法表示部分更新操作（将分支状态从"独立"更新为"合并"）
      tags:
        - Namespace Branch Management
      parameters:
        - name: env
          in: path
          description: '环境标识'
          required: true
          schema:
            type: string
        - name: appId
          in: path
          description: '应用ID'
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: '集群名称'
          required: true
          schema:
            type: string
        - name: namespaceName
          in: path
          description: '命名空间名称'
          required: true
          schema:
            type: string
        - name: branchName
          in: path
          description: '分支名称'
          required: true
          schema:
            type: string
        - name: deleteBranch
          in: query
          description: '合并后是否删除分支（true/false）'
          required: true
          example: 'true'
          schema:
            type: boolean
        - name: operator
          in: query
          description: '操作人用户名'
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NamespaceReleaseDTO'
        required: true
      responses:
        '200':
          description: '分支合并成功'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenReleaseDTO'
              example:
                dataChangeCreatedBy: ''
                dataChangeLastModifiedBy: ''
                dataChangeCreatedTime: ''
                dataChangeLastModifiedTime: ''
                id: 0
                appId: ''
                clusterName: ''
                namespaceName: ''
                name: ''
                configurations:
                  '': ''
                comment: ''
          headers: {}
  /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/rules:
    get:
      summary: 获取分支灰度发布规则 (original openapi)
      operationId: getBranchGrayRules
      deprecated: false
      description: GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/rules
      tags:
        - Namespace Branch Management
      parameters:
        - name: appId
          in: path
          description: 'app标识'
          required: true
          schema:
            type: string
        - name: env
          in: path
          description: '环境标识'
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: '集群名称'
          required: true
          schema:
            type: string
        - name: namespaceName
          in: path
          description: '命名空间名称'
          required: true
          schema:
            type: string
        - name: branchName
          in: path
          description: '分支名称'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '成功获取灰度发布规则'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenGrayReleaseRuleDTO'
              example:
                dataChangeCreatedBy: ''
                dataChangeLastModifiedBy: ''
                dataChangeCreatedTime: ''
                dataChangeLastModifiedTime: ''
                appId: ''
                clusterName: ''
                namespaceName: ''
                branchName: ''
                ruleItems:
                  - clientAppId: ''
                    clientIpList:
                      - ''
                    clientLabelList:
                      - ''
          headers: {}
    put:
      summary: 更新分支灰度发布规则 (original openapi)
      operationId: updateBranchRules
      deprecated: false
      description: PUT /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/rules
      tags:
        - Namespace Branch Management
      parameters:
        - name: appId
          in: path
          description: '应用ID'
          required: true
          schema:
            type: string
        - name: env
          in: path
          description: '环境标识'
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: '集群名称'
          required: true
          schema:
            type: string
        - name: namespaceName
          in: path
          description: '命名空间名称'
          required: true
          schema:
            type: string
        - name: branchName
          in: path
          description: '分支名称'
          required: true
          schema:
            type: string
        - name: operator
          in: query
          description: 操作人用户名
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenGrayReleaseRuleDTO'
        required: true
      responses:
        '200':
          description: '灰度规则更新成功'
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/SuccessEmptyResponse'
          headers: {}
  /openapi/v1/envs:
    get:
      summary: 获取所有环境
      operationId: getEnvs
      deprecated: false
      description: GET /openapi/v1/envs
      tags:
        - Environment Management
      responses:
        '200':
          description: 成功获取环境列表
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
                - 'DEV'
                - 'FAT'
                - 'UAT'
                - 'PRO'
          headers: {}
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: |
        Apollo OpenAPI访问令牌
        **获取方式：**
        1. 登录Apollo Portal管理界面
        2. 进入"管理员工具" -> "开放平台授权管理"
        3. 创建第三方应用，获取Token
        **使用格式：**
        ```
        Authorization: your_token_here
        ```
        **权限说明：**
        - Token具有对应应用的读写权限
        - 不同Token可能有不同的环境和命名空间权限
        - 建议为不同用途创建不同的Token
  schemas:
    OpenAppDTO:
      type: object
      properties:
        dataChangeCreatedBy:
          type: string
          description: 数据创建者用户名，记录是谁创建了这个应用
        dataChangeLastModifiedBy:
          type: string
          description: 数据最后修改者用户名，记录最后一次修改应用信息的用户
        dataChangeCreatedTime:
          type: string
          description: 数据创建时间，ISO 8601格式的时间戳
          example: "2025-09-29T12:34:56Z"
        dataChangeLastModifiedTime:
          type: string
          description: 数据最后修改时间，ISO 8601格式的时间戳
          example: "2025-09-29T12:34:56Z"
        name:
          type: string
          description: 应用名称，用于显示的友好名称
        appId:
          type: string
          description: 应用唯一标识符，全局唯一的应用ID
        orgId:
          type: string
          description: 组织ID，应用所属组织的唯一标识
        orgName:
          type: string
          description: 组织名称，应用所属组织的显示名称
        ownerName:
          type: string
          description: 应用负责人姓名，应用的主要负责人
        ownerEmail:
          type: string
          description: 应用负责人邮箱地址，用于接收应用相关通知
      description: Apollo应用信息数据传输对象，包含应用的基本信息和元数据
    OpenCreateAppDTO:
      type: object
      properties:
        assignAppRoleToSelf:
          type: boolean
          description: 是否将应用角色分配给当前用户。当设置为true时，当前token用户将获得该应用的完全操作权限
        admins:
          type: array
          items:
            type: string
          description: 应用管理员用户名列表。应用负责人默认具有项目管理员权限。管理员可以创建命名空间、集群并分配用户权限
        app:
          $ref: '#/components/schemas/OpenAppDTO'
      description: 创建Apollo应用的请求数据传输对象，包含创建应用所需的所有信息
    OpenItemDTO:
      type: object
      properties:
        dataChangeCreatedBy:
          type: string
          description: 配置项创建者用户名，记录是谁创建了这个配置项
        dataChangeLastModifiedBy:
          type: string
          description: 配置项最后修改者用户名，记录最后一次修改配置的用户
        dataChangeCreatedTime:
          type: string
          description: 配置项创建时间，ISO 8601格式的时间戳
          example: "2025-09-29T12:34:56Z"
        dataChangeLastModifiedTime:
          type: string
          description: 配置项最后修改时间，ISO 8601格式的时间戳
          example: "2025-09-29T12:34:56Z"
        key:
          type: string
          description: 配置项的键名，在同一命名空间内唯一标识一个配置项
        type:
          type: integer
          description: 配置项类型，0表示普通配置项，1表示文件类型配置项
        value:
          type: string
          description: 配置项的值，可以是字符串、数字、JSON等格式
        comment:
          type: string
          description: 配置项的注释说明，用于描述配置项的用途和含义
      description: Apollo配置项数据传输对象，表示一个具体的配置键值对及其元数据
    OpenPageDTOOpenItemDTO:
      type: object
      properties:
        page:
          type: integer
          description: 当前页码，从0开始计数
        size:
          type: integer
          description: 每页显示的记录数量
        total:
          type: integer
          description: 总记录数，符合查询条件的配置项总数量
          format: int64
        content:
          type: array
          items:
            $ref: '#/components/schemas/OpenItemDTO'
          description: 当前页的配置项列表，包含具体的配置项数据
      description: 分页配置项数据传输对象，用于返回分页查询的配置项列表结果
    OpenClusterDTO:
      type: object
      properties:
        dataChangeCreatedBy:
          type: string
          description: 集群创建者用户名，记录是谁创建了这个集群
        dataChangeLastModifiedBy:
          type: string
          description: 集群最后修改者用户名，记录最后一次修改集群信息的用户
        dataChangeCreatedTime:
          type: string
          description: 集群创建时间，ISO 8601格式的时间戳
          example: "2025-09-29T12:34:56Z"
        dataChangeLastModifiedTime:
          type: string
          description: 集群最后修改时间，ISO 8601格式的时间戳
          example: "2025-09-29T12:34:56Z"
        name:
          type: string
          description: 集群名称，在同一应用和环境下唯一标识一个集群
        appId:
          type: string
          description: 所属应用的唯一标识符
        id:
          type: integer
          description: 集群的唯一标识符
          format: int64
        parentClusterId:
          type: integer
          description: 父集群的ID
          format: int64
        comment:
          type: string
          description: 集群的备注说明
      description: Apollo集群信息数据传输对象，表示应用在特定环境下的集群配置
    MapString:
      type: object
      additionalProperties:
        type: string
    OpenReleaseDTO:
      type: object
      properties:
        dataChangeCreatedBy:
          type: string
          description: 发布创建者用户名，记录是谁创建了这次发布
        dataChangeLastModifiedBy:
          type: string
          description: 发布最后修改者用户名，记录最后一次修改发布信息的用户
        dataChangeCreatedTime:
          type: string
          description: 发布创建时间，ISO 8601格式的时间戳
          example: "2025-09-29T12:34:56Z"
        dataChangeLastModifiedTime:
          type: string
          description: 发布最后修改时间，ISO 8601格式的时间戳
          example: "2025-09-29T12:34:56Z"
        id:
          type: integer
          description: 发布记录的唯一标识符，系统自动生成
          format: int64
        appId:
          type: string
          description: 所属应用的唯一标识符
        clusterName:
          type: string
          description: 所属集群的名称
        namespaceName:
          type: string
          description: 所属命名空间的名称
        name:
          type: string
          description: 发布名称，用于标识这次发布的版本或描述
        configurations:
          $ref: '#/components/schemas/MapString'
        comment:
          type: string
          description: 发布备注，描述本次发布的变更内容和目的
      description: Apollo发布信息数据传输对象，表示一次配置发布的完整信息
    NamespaceReleaseDTO:
      type: object
      properties:
        releaseTitle:
          type: string
          description: 发布标题，用于标识这次发布的名称或版本号
        releaseComment:
          type: string
          description: 发布备注，详细描述本次发布的变更内容和目的
        releasedBy:
          type: string
          description: 发布操作者用户名，记录是谁执行了这次发布操作
        isEmergencyPublish:
          type: boolean
          description: 是否为紧急发布，紧急发布可能会跳过某些审核流程
      description: 命名空间发布请求数据传输对象，用于创建新的配置发布
    NamespaceGrayDelReleaseDTO:
      type: object
      properties:
        releaseTitle:
          type: string
          description: 发布标题，用于标识这次灰度删除发布的名称或版本号
        releaseComment:
          type: string
          description: 发布备注，详细描述本次灰度删除发布的目的和删除的配置项
        releasedBy:
          type: string
          description: 发布操作者用户名，记录是谁执行了这次灰度删除发布操作
        isEmergencyPublish:
          type: boolean
          description: 是否为紧急发布，紧急发布可能会跳过某些审核流程
        grayDelKeys:
          type: array
          items:
            type: string
          description: 需要在灰度发布中删除的配置项键名列表
      description: 命名空间灰度删除发布请求数据传输对象，用于创建删除特定配置项的灰度发布
    OpenAppNamespaceDTO:
      type: object
      properties:
        dataChangeCreatedBy:
          type: string
          description: 命名空间创建者用户名，记录是谁创建了这个应用命名空间
        dataChangeLastModifiedBy:
          type: string
          description: 命名空间最后修改者用户名，记录最后一次修改命名空间信息的用户
        dataChangeCreatedTime:
          type: string
          description: 命名空间创建时间，ISO 8601格式的时间戳
          example: "2025-09-29T12:34:56Z"
        dataChangeLastModifiedTime:
          type: string
          description: 命名空间最后修改时间，ISO 8601格式的时间戳
          example: "2025-09-29T12:34:56Z"
        name:
          type: string
          description: 命名空间名称，在同一应用内唯一标识一个命名空间
        appId:
          type: string
          description: 所属应用的唯一标识符
        format:
          type: string
          description: 命名空间格式类型，如properties、xml、json、yml等
        isPublic:
          type: boolean
          description: 是否为公共命名空间，公共命名空间可以被其他应用关联使用
        appendNamespacePrefix:
          type: boolean
          description: 对于公共命名空间，是否在命名空间名称前添加前缀
          default: true
        comment:
          type: string
          description: 命名空间备注说明，描述命名空间的用途和包含的配置类型
      description: Apollo应用命名空间数据传输对象，表示应用级别的命名空间配置信息
    OpenGrayReleaseRuleItemDTO:
      type: object
      properties:
        clientAppId:
          type: string
          description: 客户端应用ID，指定哪个应用可以获取灰度配置
        clientIpList:
          type: array
          items:
            type: string
          description: 客户端IP地址列表，指定哪些IP地址可以获取灰度配置
        clientLabelList:
          type: array
          items:
            type: string
          description: 客户端标签列表，通过标签来识别可以获取灰度配置的客户端
      description: Apollo灰度发布规则项数据传输对象，表示灰度发布的具体规则条件
    OpenGrayReleaseRuleDTO:
      type: object
      properties:
        dataChangeCreatedBy:
          type: string
          description: 灰度规则创建者用户名，记录是谁创建了这个灰度发布规则
        dataChangeLastModifiedBy:
          type: string
          description: 灰度规则最后修改者用户名，记录最后一次修改规则的用户
        dataChangeCreatedTime:
          type: string
          description: 灰度规则创建时间，ISO 8601格式的时间戳
          example: "2025-09-29T12:34:56Z"
        dataChangeLastModifiedTime:
          type: string
          description: 灰度规则最后修改时间，ISO 8601格式的时间戳
          example: "2025-09-29T12:34:56Z"
        appId:
          type: string
          description: 所属应用的唯一标识符
        clusterName:
          type: string
          description: 所属集群的名称
        namespaceName:
          type: string
          description: 所属命名空间的名称
        branchName:
          type: string
          description: 灰度分支名称，标识灰度发布的分支
        ruleItems:
          type: array
          items:
            $ref: '#/components/schemas/OpenGrayReleaseRuleItemDTO'
          description: 灰度发布规则项列表，包含具体的灰度规则条件
      description: Apollo灰度发布规则数据传输对象，表示完整的灰度发布规则配置
    OpenNamespaceDTO:
      type: object
      properties:
        dataChangeCreatedBy:
          type: string
          description: 命名空间创建者用户名，记录是谁创建了这个命名空间
        dataChangeLastModifiedBy:
          type: string
          description: 命名空间最后修改者用户名，记录最后一次修改命名空间信息的用户
        dataChangeCreatedTime:
          type: string
          description: 命名空间创建时间，ISO 8601格式的时间戳
          example: "2025-09-29T12:34:56Z"
        dataChangeLastModifiedTime:
          type: string
          description: 命名空间最后修改时间，ISO 8601格式的时间戳
          example: "2025-09-29T12:34:56Z"
        appId:
          type: string
          description: 所属应用的唯一标识符
        clusterName:
          type: string
          description: 所属集群的名称
        namespaceName:
          type: string
          description: 命名空间名称，在同一应用和集群下唯一标识一个命名空间
        comment:
          type: string
          description: 命名空间备注说明，描述命名空间的用途
        format:
          type: string
          description: 命名空间格式类型，如properties、xml、json、yml等
        isPublic:
          type: boolean
          description: 是否为公共命名空间，公共命名空间可以被其他应用关联使用
        items:
          type: array
          items:
            $ref: '#/components/schemas/OpenItemDTO'
          description: 命名空间包含的配置项列表
      description: Apollo命名空间数据传输对象，表示一个完整的命名空间及其配置项
    OpenNamespaceLockDTO:
      type: object
      properties:
        namespaceName:
          type: string
          description: 命名空间名称
        isLocked:
          type: boolean
          description: 是否被锁定
        lockedBy:
          type: string
          description: 锁定者用户名
      description: Apollo命名空间锁状态数据传输对象
    OpenPageDTOOpenInstanceDTO:
      type: object
      properties:
        page:
          type: integer
          description: 当前页码，从0开始计数
        size:
          type: integer
          description: 每页显示的记录数量
        total:
          type: integer
          description: 总记录数，符合查询条件的实例总数量
          format: int64
        content:
          type: array
          items:
            $ref: '#/components/schemas/OpenInstanceDTO'
          description: 当前页的实例列表，包含具体的实例数据
      description: 分页实例数据传输对象，用于返回分页查询的实例列表结果
    OpenEnvClusterDTO:
      type: object
      properties:
        env:
          type: string
          description: '环境标识，例如 DEV、FAT、UAT、PROD'
        clusters:
          type: array
          items:
            type: string
          description: 该环境下的集群名称列表
    OpenEnvClusterInfo:
      type: object
      properties:
        env:
          type: string
          description: '环境标识'
        clusters:
          type: array
          items:
            $ref: '#/components/schemas/OpenClusterDTO'
          description: '集群信息列表'
    OpenNamespaceTextModel:
      type: object
      properties:
        appId:
          type: string
          description: '应用唯一标识'
        env:
          type: string
          description: '环境标识'
        clusterName:
          type: string
          description: '集群名称'
        namespaceName:
          type: string
          description: '命名空间名称'
        namespaceId:
          type: integer
          description: '命名空间ID'
          format: int64
        format:
          type: string
          description: '命名空间格式类型（properties/xml/json/yml等）'
        configText:
          type: string
          description: '配置内容的原始文本'
        operator:
          type: string
          description: '操作者用户名'
    OpenNamespaceIdentifier:
      type: object
      properties:
        appId:
          type: string
          description: '应用唯一标识'
        env:
          type: string
          description: '环境标识'
        clusterName:
          type: string
          description: '集群名称'
        namespaceName:
          type: string
          description: '命名空间名称'
    OpenItemChangeSets:
      type: object
      properties:
        dataChangeCreatedBy:
          type: string
          description: '变更集合创建者用户名'
        dataChangeLastModifiedBy:
          type: string
          description: '变更集合最后修改者用户名'
        dataChangeCreatedByDisplayName:
          type: string
          description: '创建者显示名'
        dataChangeLastModifiedByDisplayName:
          type: string
          description: '最后修改者显示名'
        dataChangeCreatedTime:
          type: string
          description: '变更集合创建时间（ISO 8601）'
          example: "2025-09-29T12:34:56Z"
        dataChangeLastModifiedTime:
          type: string
          description: '变更集合最后修改时间（ISO 8601）'
          example: "2025-09-29T12:34:56Z"
        createItems:
          type: array
          items:
            $ref: '#/components/schemas/OpenItemDTO'
          description: '待创建的配置项列表'
          default: []
        updateItems:
          type: array
          items:
            $ref: '#/components/schemas/OpenItemDTO'
          description: '待更新的配置项列表'
          default: []
        deleteItems:
          type: array
          items:
            $ref: '#/components/schemas/OpenItemDTO'
          description: '待删除的配置项列表'
          default: []
    OpenItemDiffs:
      type: object
      properties:
        namespace:
          $ref: '#/components/schemas/OpenNamespaceIdentifier'
        diffs:
          $ref: '#/components/schemas/OpenItemChangeSets'
        extInfo:
          type: string
          description: '扩展信息'
    OpenNamespaceSyncModel:
      type: object
      properties:
        syncToNamespaces:
          type: array
          items:
            $ref: '#/components/schemas/OpenNamespaceIdentifier'
          description: 目标命名空间标识列表
        syncItems:
          type: array
          items:
            $ref: '#/components/schemas/OpenItemDTO'
          description: 需要同步的配置项列表
    KVEntity:
      type: object
      properties:
        key:
          type: string
          description: 键
        value:
          type: string
          description: 值
    OpenReleaseBO:
      type: object
      properties:
        baseInfo:
          $ref: '#/components/schemas/OpenReleaseDTO'
        items:
          type: array
          items:
            $ref: '#/components/schemas/KVEntity'
    OpenInstanceConfigDTO:
      type: object
      properties:
        release:
          $ref: '#/components/schemas/OpenReleaseDTO'
        releaseDeliveryTime:
          type: string
          description: 配置下发时间（ISO 8601）
          example: "2025-09-29T12:34:56Z"
        dataChangeLastModifiedTime:
          type: string
          description: 最后修改时间（ISO 8601）
          example: "2025-09-29T12:34:56Z"
    OpenInstanceDTO:
      type: object
      properties:
        id:
          type: integer
          description: 实例ID
          format: int64
        appId:
          type: string
          description: 实例所属应用ID
        clusterName:
          type: string
          description: 实例所属集群名称
        dataCenter:
          type: string
          description: 数据中心/机房标识
        ip:
          type: string
          description: 实例IP地址
        configs:
          type: array
          items:
            $ref: '#/components/schemas/OpenInstanceConfigDTO'
          description: 实例当前生效的配置列表
        dataChangeCreatedTime:
          type: string
          description: 数据创建时间（ISO 8601）
          example: "2025-09-29T12:34:56Z"
    OpenOrganizationDto:
      type: object
      properties:
        orgId:
          type: string
          description: 组织ID
        orgName:
          type: string
          description: 组织名称
    ExceptionResponse:
      type: object
      additionalProperties: true   # 对应 server 中 GlobalExceptionHandler返回Map<String,Object>
      description: >
        错误响应对象，表示为 Map<String,Object>。
        字段包括：
        - status: HTTP 状态码 (integer)
        - message: 错误信息 (string)
        - timestamp: 出错时间戳 (string)
        - exception: 异常类名或标识 (string)
      example:
        status: 404
        message: "Resource not found"
        timestamp: "2025-09-29T12:34:56Z"
        exception: "NotFoundException"
    SuccessEmptyResponse: # 对应 ResponseEntity<Void> 是一个通用的空返回数据模型，不带任何信息，用于成功时的返回
      type: object
      properties: {}
    StringToStringBoolMap: # Map<String, Map<String, Boolean>>
      type: object
      additionalProperties:
        type: object
        additionalProperties:
          type: boolean
      example:
        projectA:
          featureX: true
          featureY: false
        projectB:
          darkMode: true

    MultiResponseEntity:
      type: object
      description: A response container holding multiple RichResponseEntity objects
      properties:
        code:
          type: integer
          description: Overall HTTP status code
          example: 200
        entities:
          type: array
          description: List of rich response entities
          items:
            $ref: '#/components/schemas/RichResponseEntity'
      required:
        - code
        - entities

    RichResponseEntity:
      type: object
      description: A wrapper for a single response entity with code, message, and body
      properties:
        code:
          type: integer
          description: HTTP status code
          example: 200
        message:
          type: object
          description: Response message (can be string or object)
          example: "OK"
        body:
          type: object
          description: Response payload (generic type T)
      required:
        - code
        - message

servers: []
