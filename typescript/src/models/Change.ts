/* tslint:disable */
/* eslint-disable */
/**
 * Apollo OpenAPI
 * Apollo配置中心OpenAPI接口文档  ## 认证方式  所有API接口都需要通过Authorization header进行身份验证。  ### 获取Token的方式：  1. **Portal管理界面获取**：    - 登录Apollo Portal管理界面    - 进入\"管理员工具\" -> \"开放平台授权管理\"    - 创建第三方应用，获取Token  2. **Token格式**：    ```    Authorization: token_value    ```  3. **Token权限**：    - Token具有对应应用的读写权限    - 不同Token可能有不同的环境和命名空间权限    - 建议为不同用途创建不同的Token  ### 使用示例： ```bash curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\      -H \"Authorization: your_token_here\" ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EntityPairKVEntity } from './EntityPairKVEntity';
import {
    EntityPairKVEntityFromJSON,
    EntityPairKVEntityFromJSONTyped,
    EntityPairKVEntityToJSON,
    EntityPairKVEntityToJSONTyped,
} from './EntityPairKVEntity';

/**
 * 
 * @export
 * @interface Change
 */
export interface Change {
    /**
     * 
     * @type {string}
     * @memberof Change
     */
    type?: ChangeTypeEnum;
    /**
     * 
     * @type {EntityPairKVEntity}
     * @memberof Change
     */
    entity?: EntityPairKVEntity;
}


/**
 * @export
 */
export const ChangeTypeEnum = {
    Added: 'ADDED',
    Modified: 'MODIFIED',
    Deleted: 'DELETED'
} as const;
export type ChangeTypeEnum = typeof ChangeTypeEnum[keyof typeof ChangeTypeEnum];


/**
 * Check if a given object implements the Change interface.
 */
export function instanceOfChange(value: object): value is Change {
    return true;
}

export function ChangeFromJSON(json: any): Change {
    return ChangeFromJSONTyped(json, false);
}

export function ChangeFromJSONTyped(json: any, ignoreDiscriminator: boolean): Change {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'] == null ? undefined : json['type'],
        'entity': json['entity'] == null ? undefined : EntityPairKVEntityFromJSON(json['entity']),
    };
}

export function ChangeToJSON(json: any): Change {
    return ChangeToJSONTyped(json, false);
}

export function ChangeToJSONTyped(value?: Change | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'entity': EntityPairKVEntityToJSON(value['entity']),
    };
}

