/* tslint:disable */
/* eslint-disable */
/**
 * Apollo OpenAPI
 * <p>Apollo配置中心OpenAPI接口文档</p>  <h2>认证方式</h2> <p>所有 API 接口都需要通过 <code>Authorization</code> header 进行身份验证。</p>  <h3>获取 Token 的方式：</h3> <ol>   <li><b>Portal 管理界面获取</b>：登录 Portal → 管理员工具 → 开放平台授权管理 → 创建第三方应用，获取 Token。</li>   <li><b>Token 格式</b>：<code>Authorization: token_value</code></li>   <li><b>Token 权限</b>：按应用/环境/命名空间授予，建议不同用途分别创建。</li> </ol>  <h3>使用示例</h3> <pre><code class=\"language-bash\">curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\ -H \"Authorization: your_token_here\"</code></pre>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RichResponseEntity } from './RichResponseEntity';
import {
    RichResponseEntityFromJSON,
    RichResponseEntityFromJSONTyped,
    RichResponseEntityToJSON,
} from './RichResponseEntity';

/**
 * A response container holding multiple RichResponseEntity objects
 * @export
 * @interface MultiResponseEntity
 */
export interface MultiResponseEntity {
    /**
     * Overall HTTP status code
     * @type {number}
     * @memberof MultiResponseEntity
     */
    code: number;
    /**
     * List of rich response entities
     * @type {Array<RichResponseEntity>}
     * @memberof MultiResponseEntity
     */
    entities: Array<RichResponseEntity>;
}

/**
 * Check if a given object implements the MultiResponseEntity interface.
 */
export function instanceOfMultiResponseEntity(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "code" in value;
    isInstance = isInstance && "entities" in value;

    return isInstance;
}

export function MultiResponseEntityFromJSON(json: any): MultiResponseEntity {
    return MultiResponseEntityFromJSONTyped(json, false);
}

export function MultiResponseEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): MultiResponseEntity {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'code': json['code'],
        'entities': ((json['entities'] as Array<any>).map(RichResponseEntityFromJSON)),
    };
}

export function MultiResponseEntityToJSON(value?: MultiResponseEntity | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'code': value.code,
        'entities': ((value.entities as Array<any>).map(RichResponseEntityToJSON)),
    };
}
