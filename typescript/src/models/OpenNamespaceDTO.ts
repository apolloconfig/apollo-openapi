/* tslint:disable */
/* eslint-disable */
/**
 * Apollo OpenAPI
 * Apollo配置中心OpenAPI接口文档  ## 认证方式  所有API接口都需要通过Authorization header进行身份验证。  ### 获取Token的方式：  1. **Portal管理界面获取**：    - 登录Apollo Portal管理界面    - 进入\"管理员工具\" -> \"开放平台授权管理\"    - 创建第三方应用，获取Token  2. **Token格式**：    ```    Authorization: token_value    ```  3. **Token权限**：    - Token具有对应应用的读写权限    - 不同Token可能有不同的环境和命名空间权限    - 建议为不同用途创建不同的Token  ### 使用示例： ```bash curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\      -H \"Authorization: your_token_here\" ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OpenItemDTO } from './OpenItemDTO';
import {
    OpenItemDTOFromJSON,
    OpenItemDTOFromJSONTyped,
    OpenItemDTOToJSON,
    OpenItemDTOToJSONTyped,
} from './OpenItemDTO';

/**
 * Apollo命名空间数据传输对象，表示一个完整的命名空间及其配置项
 * @export
 * @interface OpenNamespaceDTO
 */
export interface OpenNamespaceDTO {
    /**
     * 命名空间创建者用户名，记录是谁创建了这个命名空间
     * @type {string}
     * @memberof OpenNamespaceDTO
     */
    dataChangeCreatedBy?: string;
    /**
     * 命名空间最后修改者用户名，记录最后一次修改命名空间信息的用户
     * @type {string}
     * @memberof OpenNamespaceDTO
     */
    dataChangeLastModifiedBy?: string;
    /**
     * 命名空间创建时间，ISO 8601格式的时间戳
     * @type {string}
     * @memberof OpenNamespaceDTO
     */
    dataChangeCreatedTime?: string;
    /**
     * 命名空间最后修改时间，ISO 8601格式的时间戳
     * @type {string}
     * @memberof OpenNamespaceDTO
     */
    dataChangeLastModifiedTime?: string;
    /**
     * 所属应用的唯一标识符
     * @type {string}
     * @memberof OpenNamespaceDTO
     */
    appId?: string;
    /**
     * 所属集群的名称
     * @type {string}
     * @memberof OpenNamespaceDTO
     */
    clusterName?: string;
    /**
     * 命名空间名称，在同一应用和集群下唯一标识一个命名空间
     * @type {string}
     * @memberof OpenNamespaceDTO
     */
    namespaceName?: string;
    /**
     * 命名空间备注说明，描述命名空间的用途
     * @type {string}
     * @memberof OpenNamespaceDTO
     */
    comment?: string;
    /**
     * 命名空间格式类型，如properties、xml、json、yml等
     * @type {string}
     * @memberof OpenNamespaceDTO
     */
    format?: string;
    /**
     * 是否为公共命名空间，公共命名空间可以被其他应用关联使用
     * @type {boolean}
     * @memberof OpenNamespaceDTO
     */
    isPublic?: boolean;
    /**
     * 命名空间包含的配置项列表
     * @type {Array<OpenItemDTO>}
     * @memberof OpenNamespaceDTO
     */
    items?: Array<OpenItemDTO>;
}

/**
 * Check if a given object implements the OpenNamespaceDTO interface.
 */
export function instanceOfOpenNamespaceDTO(value: object): value is OpenNamespaceDTO {
    return true;
}

export function OpenNamespaceDTOFromJSON(json: any): OpenNamespaceDTO {
    return OpenNamespaceDTOFromJSONTyped(json, false);
}

export function OpenNamespaceDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): OpenNamespaceDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'dataChangeCreatedBy': json['dataChangeCreatedBy'] == null ? undefined : json['dataChangeCreatedBy'],
        'dataChangeLastModifiedBy': json['dataChangeLastModifiedBy'] == null ? undefined : json['dataChangeLastModifiedBy'],
        'dataChangeCreatedTime': json['dataChangeCreatedTime'] == null ? undefined : json['dataChangeCreatedTime'],
        'dataChangeLastModifiedTime': json['dataChangeLastModifiedTime'] == null ? undefined : json['dataChangeLastModifiedTime'],
        'appId': json['appId'] == null ? undefined : json['appId'],
        'clusterName': json['clusterName'] == null ? undefined : json['clusterName'],
        'namespaceName': json['namespaceName'] == null ? undefined : json['namespaceName'],
        'comment': json['comment'] == null ? undefined : json['comment'],
        'format': json['format'] == null ? undefined : json['format'],
        'isPublic': json['isPublic'] == null ? undefined : json['isPublic'],
        'items': json['items'] == null ? undefined : ((json['items'] as Array<any>).map(OpenItemDTOFromJSON)),
    };
}

export function OpenNamespaceDTOToJSON(json: any): OpenNamespaceDTO {
    return OpenNamespaceDTOToJSONTyped(json, false);
}

export function OpenNamespaceDTOToJSONTyped(value?: OpenNamespaceDTO | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'dataChangeCreatedBy': value['dataChangeCreatedBy'],
        'dataChangeLastModifiedBy': value['dataChangeLastModifiedBy'],
        'dataChangeCreatedTime': value['dataChangeCreatedTime'],
        'dataChangeLastModifiedTime': value['dataChangeLastModifiedTime'],
        'appId': value['appId'],
        'clusterName': value['clusterName'],
        'namespaceName': value['namespaceName'],
        'comment': value['comment'],
        'format': value['format'],
        'isPublic': value['isPublic'],
        'items': value['items'] == null ? undefined : ((value['items'] as Array<any>).map(OpenItemDTOToJSON)),
    };
}

