/* tslint:disable */
/* eslint-disable */
/**
 * Apollo OpenAPI
 * <p>Apollo配置中心OpenAPI接口文档</p>  <h2>认证方式</h2> <p>所有 API 接口都需要通过 <code>Authorization</code> header 进行身份验证。</p>  <h3>获取 Token 的方式：</h3> <ol>   <li><b>Portal 管理界面获取</b>：登录 Portal → 管理员工具 → 开放平台授权管理 → 创建第三方应用，获取 Token。</li>   <li><b>Token 格式</b>：<code>Authorization: token_value</code></li>   <li><b>Token 权限</b>：按应用/环境/命名空间授予，建议不同用途分别创建。</li> </ol>  <h3>使用示例</h3> <pre><code class=\"language-bash\">curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\ -H \"Authorization: your_token_here\"</code></pre>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OpenItemDTO } from './OpenItemDTO';
import {
    OpenItemDTOFromJSON,
    OpenItemDTOFromJSONTyped,
    OpenItemDTOToJSON,
} from './OpenItemDTO';

/**
 * Apollo命名空间数据传输对象，表示一个完整的命名空间及其配置项
 * @export
 * @interface OpenNamespaceDTO
 */
export interface OpenNamespaceDTO {
    /**
     * 命名空间创建者用户名，记录是谁创建了这个命名空间
     * @type {string}
     * @memberof OpenNamespaceDTO
     */
    dataChangeCreatedBy?: string;
    /**
     * 命名空间最后修改者用户名，记录最后一次修改命名空间信息的用户
     * @type {string}
     * @memberof OpenNamespaceDTO
     */
    dataChangeLastModifiedBy?: string;
    /**
     * 命名空间创建时间，ISO 8601格式的时间戳
     * @type {string}
     * @memberof OpenNamespaceDTO
     */
    dataChangeCreatedTime?: string;
    /**
     * 命名空间最后修改时间，ISO 8601格式的时间戳
     * @type {string}
     * @memberof OpenNamespaceDTO
     */
    dataChangeLastModifiedTime?: string;
    /**
     * 所属应用的唯一标识符
     * @type {string}
     * @memberof OpenNamespaceDTO
     */
    appId?: string;
    /**
     * 所属集群的名称
     * @type {string}
     * @memberof OpenNamespaceDTO
     */
    clusterName?: string;
    /**
     * 命名空间名称，在同一应用和集群下唯一标识一个命名空间
     * @type {string}
     * @memberof OpenNamespaceDTO
     */
    namespaceName?: string;
    /**
     * 命名空间备注说明，描述命名空间的用途
     * @type {string}
     * @memberof OpenNamespaceDTO
     */
    comment?: string;
    /**
     * 命名空间格式类型，如properties、xml、json、yml等
     * @type {string}
     * @memberof OpenNamespaceDTO
     */
    format?: string;
    /**
     * 是否为公共命名空间，公共命名空间可以被其他应用关联使用
     * @type {boolean}
     * @memberof OpenNamespaceDTO
     */
    isPublic?: boolean;
    /**
     * 命名空间包含的配置项列表
     * @type {Array<OpenItemDTO>}
     * @memberof OpenNamespaceDTO
     */
    items?: Array<OpenItemDTO>;
}

/**
 * Check if a given object implements the OpenNamespaceDTO interface.
 */
export function instanceOfOpenNamespaceDTO(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OpenNamespaceDTOFromJSON(json: any): OpenNamespaceDTO {
    return OpenNamespaceDTOFromJSONTyped(json, false);
}

export function OpenNamespaceDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): OpenNamespaceDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'dataChangeCreatedBy': !exists(json, 'dataChangeCreatedBy') ? undefined : json['dataChangeCreatedBy'],
        'dataChangeLastModifiedBy': !exists(json, 'dataChangeLastModifiedBy') ? undefined : json['dataChangeLastModifiedBy'],
        'dataChangeCreatedTime': !exists(json, 'dataChangeCreatedTime') ? undefined : json['dataChangeCreatedTime'],
        'dataChangeLastModifiedTime': !exists(json, 'dataChangeLastModifiedTime') ? undefined : json['dataChangeLastModifiedTime'],
        'appId': !exists(json, 'appId') ? undefined : json['appId'],
        'clusterName': !exists(json, 'clusterName') ? undefined : json['clusterName'],
        'namespaceName': !exists(json, 'namespaceName') ? undefined : json['namespaceName'],
        'comment': !exists(json, 'comment') ? undefined : json['comment'],
        'format': !exists(json, 'format') ? undefined : json['format'],
        'isPublic': !exists(json, 'isPublic') ? undefined : json['isPublic'],
        'items': !exists(json, 'items') ? undefined : ((json['items'] as Array<any>).map(OpenItemDTOFromJSON)),
    };
}

export function OpenNamespaceDTOToJSON(value?: OpenNamespaceDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'dataChangeCreatedBy': value.dataChangeCreatedBy,
        'dataChangeLastModifiedBy': value.dataChangeLastModifiedBy,
        'dataChangeCreatedTime': value.dataChangeCreatedTime,
        'dataChangeLastModifiedTime': value.dataChangeLastModifiedTime,
        'appId': value.appId,
        'clusterName': value.clusterName,
        'namespaceName': value.namespaceName,
        'comment': value.comment,
        'format': value.format,
        'isPublic': value.isPublic,
        'items': value.items === undefined ? undefined : ((value.items as Array<any>).map(OpenItemDTOToJSON)),
    };
}
