/* tslint:disable */
/* eslint-disable */
/**
 * Apollo OpenAPI
 * <p>Apollo配置中心OpenAPI接口文档</p>  <h2>认证方式</h2> <p>所有 API 接口都需要通过 <code>Authorization</code> header 进行身份验证。</p>  <h3>获取 Token 的方式：</h3> <ol>   <li><b>Portal 管理界面获取</b>：登录 Portal → 管理员工具 → 开放平台授权管理 → 创建第三方应用，获取 Token。</li>   <li><b>Token 格式</b>：<code>Authorization: token_value</code></li>   <li><b>Token 权限</b>：按应用/环境/命名空间授予，建议不同用途分别创建。</li> </ol>  <h3>使用示例</h3> <pre><code class=\"language-bash\">curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\ -H \"Authorization: your_token_here\"</code></pre>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OpenAppDTO } from './OpenAppDTO';
import {
    OpenAppDTOFromJSON,
    OpenAppDTOFromJSONTyped,
    OpenAppDTOToJSON,
} from './OpenAppDTO';

/**
 * 创建Apollo应用的请求数据传输对象，包含创建应用所需的所有信息
 * @export
 * @interface OpenCreateAppDTO
 */
export interface OpenCreateAppDTO {
    /**
     * 是否将应用角色分配给当前用户。当设置为true时，当前token用户将获得该应用的完全操作权限
     * @type {boolean}
     * @memberof OpenCreateAppDTO
     */
    assignAppRoleToSelf?: boolean;
    /**
     * 应用管理员用户名列表。应用负责人默认具有项目管理员权限。管理员可以创建命名空间、集群并分配用户权限
     * @type {Set<string>}
     * @memberof OpenCreateAppDTO
     */
    admins?: Set<string>;
    /**
     *
     * @type {OpenAppDTO}
     * @memberof OpenCreateAppDTO
     */
    app?: OpenAppDTO;
}

/**
 * Check if a given object implements the OpenCreateAppDTO interface.
 */
export function instanceOfOpenCreateAppDTO(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OpenCreateAppDTOFromJSON(json: any): OpenCreateAppDTO {
    return OpenCreateAppDTOFromJSONTyped(json, false);
}

export function OpenCreateAppDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): OpenCreateAppDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'assignAppRoleToSelf': !exists(json, 'assignAppRoleToSelf') ? undefined : json['assignAppRoleToSelf'],
        'admins': !exists(json, 'admins') ? undefined : json['admins'],
        'app': !exists(json, 'app') ? undefined : OpenAppDTOFromJSON(json['app']),
    };
}

export function OpenCreateAppDTOToJSON(value?: OpenCreateAppDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'assignAppRoleToSelf': value.assignAppRoleToSelf,
        'admins': value.admins === undefined ? undefined : Array.from(value.admins as Set<any>),
        'app': OpenAppDTOToJSON(value.app),
    };
}
