/* tslint:disable */
/* eslint-disable */
/**
 * Apollo OpenAPI
 * <p>Apollo配置中心OpenAPI接口文档</p>  <h2>认证方式</h2> <p>所有 API 接口都需要通过 <code>Authorization</code> header 进行身份验证。</p>  <h3>获取 Token 的方式：</h3> <ol>   <li><b>Portal 管理界面获取</b>：登录 Portal → 管理员工具 → 开放平台授权管理 → 创建第三方应用，获取 Token。</li>   <li><b>Token 格式</b>：<code>Authorization: token_value</code></li>   <li><b>Token 权限</b>：按应用/环境/命名空间授予，建议不同用途分别创建。</li> </ol>  <h3>使用示例</h3> <pre><code class=\"language-bash\">curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\ -H \"Authorization: your_token_here\"</code></pre>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 命名空间发布请求数据传输对象，用于创建新的配置发布
 * @export
 * @interface NamespaceReleaseDTO
 */
export interface NamespaceReleaseDTO {
    /**
     * 发布标题，用于标识这次发布的名称或版本号
     * @type {string}
     * @memberof NamespaceReleaseDTO
     */
    releaseTitle?: string;
    /**
     * 发布备注，详细描述本次发布的变更内容和目的
     * @type {string}
     * @memberof NamespaceReleaseDTO
     */
    releaseComment?: string;
    /**
     * 发布操作者用户名，记录是谁执行了这次发布操作
     * @type {string}
     * @memberof NamespaceReleaseDTO
     */
    releasedBy?: string;
    /**
     * 是否为紧急发布，紧急发布可能会跳过某些审核流程
     * @type {boolean}
     * @memberof NamespaceReleaseDTO
     */
    isEmergencyPublish?: boolean;
}

/**
 * Check if a given object implements the NamespaceReleaseDTO interface.
 */
export function instanceOfNamespaceReleaseDTO(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function NamespaceReleaseDTOFromJSON(json: any): NamespaceReleaseDTO {
    return NamespaceReleaseDTOFromJSONTyped(json, false);
}

export function NamespaceReleaseDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): NamespaceReleaseDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'releaseTitle': !exists(json, 'releaseTitle') ? undefined : json['releaseTitle'],
        'releaseComment': !exists(json, 'releaseComment') ? undefined : json['releaseComment'],
        'releasedBy': !exists(json, 'releasedBy') ? undefined : json['releasedBy'],
        'isEmergencyPublish': !exists(json, 'isEmergencyPublish') ? undefined : json['isEmergencyPublish'],
    };
}

export function NamespaceReleaseDTOToJSON(value?: NamespaceReleaseDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'releaseTitle': value.releaseTitle,
        'releaseComment': value.releaseComment,
        'releasedBy': value.releasedBy,
        'isEmergencyPublish': value.isEmergencyPublish,
    };
}
