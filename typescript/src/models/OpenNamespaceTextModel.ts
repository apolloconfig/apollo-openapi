/* tslint:disable */
/* eslint-disable */
/**
 * Apollo OpenAPI
 * <p>Apollo配置中心OpenAPI接口文档</p>  <h2>认证方式</h2> <p>所有 API 接口都需要通过 <code>Authorization</code> header 进行身份验证。</p>  <h3>获取 Token 的方式：</h3> <ol>   <li><b>Portal 管理界面获取</b>：登录 Portal → 管理员工具 → 开放平台授权管理 → 创建第三方应用，获取 Token。</li>   <li><b>Token 格式</b>：<code>Authorization: token_value</code></li>   <li><b>Token 权限</b>：按应用/环境/命名空间授予，建议不同用途分别创建。</li> </ol>  <h3>使用示例</h3> <pre><code class=\"language-bash\">curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\ -H \"Authorization: your_token_here\"</code></pre>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 *
 * @export
 * @interface OpenNamespaceTextModel
 */
export interface OpenNamespaceTextModel {
    /**
     * 应用唯一标识
     * @type {string}
     * @memberof OpenNamespaceTextModel
     */
    appId?: string;
    /**
     * 环境标识
     * @type {string}
     * @memberof OpenNamespaceTextModel
     */
    env?: string;
    /**
     * 集群名称
     * @type {string}
     * @memberof OpenNamespaceTextModel
     */
    clusterName?: string;
    /**
     * 命名空间名称
     * @type {string}
     * @memberof OpenNamespaceTextModel
     */
    namespaceName?: string;
    /**
     * 命名空间ID
     * @type {number}
     * @memberof OpenNamespaceTextModel
     */
    namespaceId?: number;
    /**
     * 命名空间格式类型（properties/xml/json/yml等）
     * @type {string}
     * @memberof OpenNamespaceTextModel
     */
    format?: string;
    /**
     * 配置内容的原始文本
     * @type {string}
     * @memberof OpenNamespaceTextModel
     */
    configText?: string;
    /**
     * 操作者用户名
     * @type {string}
     * @memberof OpenNamespaceTextModel
     */
    operator?: string;
}

/**
 * Check if a given object implements the OpenNamespaceTextModel interface.
 */
export function instanceOfOpenNamespaceTextModel(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OpenNamespaceTextModelFromJSON(json: any): OpenNamespaceTextModel {
    return OpenNamespaceTextModelFromJSONTyped(json, false);
}

export function OpenNamespaceTextModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): OpenNamespaceTextModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'appId': !exists(json, 'appId') ? undefined : json['appId'],
        'env': !exists(json, 'env') ? undefined : json['env'],
        'clusterName': !exists(json, 'clusterName') ? undefined : json['clusterName'],
        'namespaceName': !exists(json, 'namespaceName') ? undefined : json['namespaceName'],
        'namespaceId': !exists(json, 'namespaceId') ? undefined : json['namespaceId'],
        'format': !exists(json, 'format') ? undefined : json['format'],
        'configText': !exists(json, 'configText') ? undefined : json['configText'],
        'operator': !exists(json, 'operator') ? undefined : json['operator'],
    };
}

export function OpenNamespaceTextModelToJSON(value?: OpenNamespaceTextModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'appId': value.appId,
        'env': value.env,
        'clusterName': value.clusterName,
        'namespaceName': value.namespaceName,
        'namespaceId': value.namespaceId,
        'format': value.format,
        'configText': value.configText,
        'operator': value.operator,
    };
}
