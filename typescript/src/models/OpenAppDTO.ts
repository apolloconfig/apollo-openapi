/* tslint:disable */
/* eslint-disable */
/**
 * Apollo OpenAPI
 * Apollo配置中心OpenAPI接口文档  ## 认证方式  所有API接口都需要通过Authorization header进行身份验证。  ### 获取Token的方式：  1. **Portal管理界面获取**：    - 登录Apollo Portal管理界面    - 进入\"管理员工具\" -> \"开放平台授权管理\"    - 创建第三方应用，获取Token  2. **Token格式**：    ```    Authorization: token_value    ```  3. **Token权限**：    - Token具有对应应用的读写权限    - 不同Token可能有不同的环境和命名空间权限    - 建议为不同用途创建不同的Token  ### 使用示例： ```bash curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\      -H \"Authorization: your_token_here\" ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Apollo应用信息数据传输对象，包含应用的基本信息和元数据
 * @export
 * @interface OpenAppDTO
 */
export interface OpenAppDTO {
    /**
     * 数据创建者用户名，记录是谁创建了这个应用
     * @type {string}
     * @memberof OpenAppDTO
     */
    dataChangeCreatedBy?: string;
    /**
     * 数据最后修改者用户名，记录最后一次修改应用信息的用户
     * @type {string}
     * @memberof OpenAppDTO
     */
    dataChangeLastModifiedBy?: string;
    /**
     * 数据创建时间，ISO 8601格式的时间戳
     * @type {string}
     * @memberof OpenAppDTO
     */
    dataChangeCreatedTime?: string;
    /**
     * 数据最后修改时间，ISO 8601格式的时间戳
     * @type {string}
     * @memberof OpenAppDTO
     */
    dataChangeLastModifiedTime?: string;
    /**
     * 应用名称，用于显示的友好名称
     * @type {string}
     * @memberof OpenAppDTO
     */
    name?: string;
    /**
     * 应用唯一标识符，全局唯一的应用ID
     * @type {string}
     * @memberof OpenAppDTO
     */
    appId?: string;
    /**
     * 组织ID，应用所属组织的唯一标识
     * @type {string}
     * @memberof OpenAppDTO
     */
    orgId?: string;
    /**
     * 组织名称，应用所属组织的显示名称
     * @type {string}
     * @memberof OpenAppDTO
     */
    orgName?: string;
    /**
     * 应用负责人姓名，应用的主要负责人
     * @type {string}
     * @memberof OpenAppDTO
     */
    ownerName?: string;
    /**
     * 应用负责人邮箱地址，用于接收应用相关通知
     * @type {string}
     * @memberof OpenAppDTO
     */
    ownerEmail?: string;
}

/**
 * Check if a given object implements the OpenAppDTO interface.
 */
export function instanceOfOpenAppDTO(value: object): value is OpenAppDTO {
    return true;
}

export function OpenAppDTOFromJSON(json: any): OpenAppDTO {
    return OpenAppDTOFromJSONTyped(json, false);
}

export function OpenAppDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): OpenAppDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'dataChangeCreatedBy': json['dataChangeCreatedBy'] == null ? undefined : json['dataChangeCreatedBy'],
        'dataChangeLastModifiedBy': json['dataChangeLastModifiedBy'] == null ? undefined : json['dataChangeLastModifiedBy'],
        'dataChangeCreatedTime': json['dataChangeCreatedTime'] == null ? undefined : json['dataChangeCreatedTime'],
        'dataChangeLastModifiedTime': json['dataChangeLastModifiedTime'] == null ? undefined : json['dataChangeLastModifiedTime'],
        'name': json['name'] == null ? undefined : json['name'],
        'appId': json['appId'] == null ? undefined : json['appId'],
        'orgId': json['orgId'] == null ? undefined : json['orgId'],
        'orgName': json['orgName'] == null ? undefined : json['orgName'],
        'ownerName': json['ownerName'] == null ? undefined : json['ownerName'],
        'ownerEmail': json['ownerEmail'] == null ? undefined : json['ownerEmail'],
    };
}

export function OpenAppDTOToJSON(json: any): OpenAppDTO {
    return OpenAppDTOToJSONTyped(json, false);
}

export function OpenAppDTOToJSONTyped(value?: OpenAppDTO | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'dataChangeCreatedBy': value['dataChangeCreatedBy'],
        'dataChangeLastModifiedBy': value['dataChangeLastModifiedBy'],
        'dataChangeCreatedTime': value['dataChangeCreatedTime'],
        'dataChangeLastModifiedTime': value['dataChangeLastModifiedTime'],
        'name': value['name'],
        'appId': value['appId'],
        'orgId': value['orgId'],
        'orgName': value['orgName'],
        'ownerName': value['ownerName'],
        'ownerEmail': value['ownerEmail'],
    };
}

