/* tslint:disable */
/* eslint-disable */
/**
 * Apollo OpenAPI
 * <p>Apollo配置中心OpenAPI接口文档</p>  <h2>认证方式</h2> <p>所有 API 接口都需要通过 <code>Authorization</code> header 进行身份验证。</p>  <h3>获取 Token 的方式：</h3> <ol>   <li><b>Portal 管理界面获取</b>：登录 Portal → 管理员工具 → 开放平台授权管理 → 创建第三方应用，获取 Token。</li>   <li><b>Token 格式</b>：<code>Authorization: token_value</code></li>   <li><b>Token 权限</b>：按应用/环境/命名空间授予，建议不同用途分别创建。</li> </ol>  <h3>使用示例</h3> <pre><code class=\"language-bash\">curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\ -H \"Authorization: your_token_here\"</code></pre>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Apollo应用信息数据传输对象，包含应用的基本信息和元数据
 * @export
 * @interface OpenAppDTO
 */
export interface OpenAppDTO {
    /**
     * 数据创建者用户名，记录是谁创建了这个应用
     * @type {string}
     * @memberof OpenAppDTO
     */
    dataChangeCreatedBy?: string;
    /**
     * 数据最后修改者用户名，记录最后一次修改应用信息的用户
     * @type {string}
     * @memberof OpenAppDTO
     */
    dataChangeLastModifiedBy?: string;
    /**
     * 数据创建时间，ISO 8601格式的时间戳
     * @type {string}
     * @memberof OpenAppDTO
     */
    dataChangeCreatedTime?: string;
    /**
     * 数据最后修改时间，ISO 8601格式的时间戳
     * @type {string}
     * @memberof OpenAppDTO
     */
    dataChangeLastModifiedTime?: string;
    /**
     * 应用名称，用于显示的友好名称
     * @type {string}
     * @memberof OpenAppDTO
     */
    name?: string;
    /**
     * 应用唯一标识符，全局唯一的应用ID
     * @type {string}
     * @memberof OpenAppDTO
     */
    appId?: string;
    /**
     * 组织ID，应用所属组织的唯一标识
     * @type {string}
     * @memberof OpenAppDTO
     */
    orgId?: string;
    /**
     * 组织名称，应用所属组织的显示名称
     * @type {string}
     * @memberof OpenAppDTO
     */
    orgName?: string;
    /**
     * 应用负责人姓名，应用的主要负责人
     * @type {string}
     * @memberof OpenAppDTO
     */
    ownerName?: string;
    /**
     * 应用负责人邮箱地址，用于接收应用相关通知
     * @type {string}
     * @memberof OpenAppDTO
     */
    ownerEmail?: string;
}

/**
 * Check if a given object implements the OpenAppDTO interface.
 */
export function instanceOfOpenAppDTO(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OpenAppDTOFromJSON(json: any): OpenAppDTO {
    return OpenAppDTOFromJSONTyped(json, false);
}

export function OpenAppDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): OpenAppDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'dataChangeCreatedBy': !exists(json, 'dataChangeCreatedBy') ? undefined : json['dataChangeCreatedBy'],
        'dataChangeLastModifiedBy': !exists(json, 'dataChangeLastModifiedBy') ? undefined : json['dataChangeLastModifiedBy'],
        'dataChangeCreatedTime': !exists(json, 'dataChangeCreatedTime') ? undefined : json['dataChangeCreatedTime'],
        'dataChangeLastModifiedTime': !exists(json, 'dataChangeLastModifiedTime') ? undefined : json['dataChangeLastModifiedTime'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'appId': !exists(json, 'appId') ? undefined : json['appId'],
        'orgId': !exists(json, 'orgId') ? undefined : json['orgId'],
        'orgName': !exists(json, 'orgName') ? undefined : json['orgName'],
        'ownerName': !exists(json, 'ownerName') ? undefined : json['ownerName'],
        'ownerEmail': !exists(json, 'ownerEmail') ? undefined : json['ownerEmail'],
    };
}

export function OpenAppDTOToJSON(value?: OpenAppDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'dataChangeCreatedBy': value.dataChangeCreatedBy,
        'dataChangeLastModifiedBy': value.dataChangeLastModifiedBy,
        'dataChangeCreatedTime': value.dataChangeCreatedTime,
        'dataChangeLastModifiedTime': value.dataChangeLastModifiedTime,
        'name': value.name,
        'appId': value.appId,
        'orgId': value.orgId,
        'orgName': value.orgName,
        'ownerName': value.ownerName,
        'ownerEmail': value.ownerEmail,
    };
}
