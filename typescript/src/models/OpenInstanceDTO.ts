/* tslint:disable */
/* eslint-disable */
/**
 * Apollo OpenAPI
 * Apollo配置中心OpenAPI接口文档  ## 认证方式  所有API接口都需要通过Authorization header进行身份验证。  ### 获取Token的方式：  1. **Portal管理界面获取**：    - 登录Apollo Portal管理界面    - 进入\"管理员工具\" -> \"开放平台授权管理\"    - 创建第三方应用，获取Token  2. **Token格式**：    ```    Authorization: token_value    ```  3. **Token权限**：    - Token具有对应应用的读写权限    - 不同Token可能有不同的环境和命名空间权限    - 建议为不同用途创建不同的Token  ### 使用示例： ```bash curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\      -H \"Authorization: your_token_here\" ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OpenInstanceConfigDTO } from './OpenInstanceConfigDTO';
import {
    OpenInstanceConfigDTOFromJSON,
    OpenInstanceConfigDTOFromJSONTyped,
    OpenInstanceConfigDTOToJSON,
    OpenInstanceConfigDTOToJSONTyped,
} from './OpenInstanceConfigDTO';

/**
 * 
 * @export
 * @interface OpenInstanceDTO
 */
export interface OpenInstanceDTO {
    /**
     * 
     * @type {number}
     * @memberof OpenInstanceDTO
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof OpenInstanceDTO
     */
    appId?: string;
    /**
     * 
     * @type {string}
     * @memberof OpenInstanceDTO
     */
    clusterName?: string;
    /**
     * 
     * @type {string}
     * @memberof OpenInstanceDTO
     */
    dataCenter?: string;
    /**
     * 
     * @type {string}
     * @memberof OpenInstanceDTO
     */
    ip?: string;
    /**
     * 
     * @type {Array<OpenInstanceConfigDTO>}
     * @memberof OpenInstanceDTO
     */
    configs?: Array<OpenInstanceConfigDTO>;
    /**
     * 
     * @type {string}
     * @memberof OpenInstanceDTO
     */
    dataChangeCreatedTime?: string;
}

/**
 * Check if a given object implements the OpenInstanceDTO interface.
 */
export function instanceOfOpenInstanceDTO(value: object): value is OpenInstanceDTO {
    return true;
}

export function OpenInstanceDTOFromJSON(json: any): OpenInstanceDTO {
    return OpenInstanceDTOFromJSONTyped(json, false);
}

export function OpenInstanceDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): OpenInstanceDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'appId': json['appId'] == null ? undefined : json['appId'],
        'clusterName': json['clusterName'] == null ? undefined : json['clusterName'],
        'dataCenter': json['dataCenter'] == null ? undefined : json['dataCenter'],
        'ip': json['ip'] == null ? undefined : json['ip'],
        'configs': json['configs'] == null ? undefined : ((json['configs'] as Array<any>).map(OpenInstanceConfigDTOFromJSON)),
        'dataChangeCreatedTime': json['dataChangeCreatedTime'] == null ? undefined : json['dataChangeCreatedTime'],
    };
}

export function OpenInstanceDTOToJSON(json: any): OpenInstanceDTO {
    return OpenInstanceDTOToJSONTyped(json, false);
}

export function OpenInstanceDTOToJSONTyped(value?: OpenInstanceDTO | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'appId': value['appId'],
        'clusterName': value['clusterName'],
        'dataCenter': value['dataCenter'],
        'ip': value['ip'],
        'configs': value['configs'] == null ? undefined : ((value['configs'] as Array<any>).map(OpenInstanceConfigDTOToJSON)),
        'dataChangeCreatedTime': value['dataChangeCreatedTime'],
    };
}

