/* tslint:disable */
/* eslint-disable */
/**
 * Apollo OpenAPI
 * <p>Apollo配置中心OpenAPI接口文档</p>  <h2>认证方式</h2> <p>所有 API 接口都需要通过 <code>Authorization</code> header 进行身份验证。</p>  <h3>获取 Token 的方式：</h3> <ol>   <li><b>Portal 管理界面获取</b>：登录 Portal → 管理员工具 → 开放平台授权管理 → 创建第三方应用，获取 Token。</li>   <li><b>Token 格式</b>：<code>Authorization: token_value</code></li>   <li><b>Token 权限</b>：按应用/环境/命名空间授予，建议不同用途分别创建。</li> </ol>  <h3>使用示例</h3> <pre><code class=\"language-bash\">curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\ -H \"Authorization: your_token_here\"</code></pre>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OpenInstanceConfigDTO } from './OpenInstanceConfigDTO';
import {
    OpenInstanceConfigDTOFromJSON,
    OpenInstanceConfigDTOFromJSONTyped,
    OpenInstanceConfigDTOToJSON,
} from './OpenInstanceConfigDTO';

/**
 *
 * @export
 * @interface OpenInstanceDTO
 */
export interface OpenInstanceDTO {
    /**
     * 实例ID
     * @type {number}
     * @memberof OpenInstanceDTO
     */
    id?: number;
    /**
     * 实例所属应用ID
     * @type {string}
     * @memberof OpenInstanceDTO
     */
    appId?: string;
    /**
     * 实例所属集群名称
     * @type {string}
     * @memberof OpenInstanceDTO
     */
    clusterName?: string;
    /**
     * 数据中心/机房标识
     * @type {string}
     * @memberof OpenInstanceDTO
     */
    dataCenter?: string;
    /**
     * 实例IP地址
     * @type {string}
     * @memberof OpenInstanceDTO
     */
    ip?: string;
    /**
     * 实例当前生效的配置列表
     * @type {Array<OpenInstanceConfigDTO>}
     * @memberof OpenInstanceDTO
     */
    configs?: Array<OpenInstanceConfigDTO>;
    /**
     * 数据创建时间（ISO 8601）
     * @type {string}
     * @memberof OpenInstanceDTO
     */
    dataChangeCreatedTime?: string;
}

/**
 * Check if a given object implements the OpenInstanceDTO interface.
 */
export function instanceOfOpenInstanceDTO(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OpenInstanceDTOFromJSON(json: any): OpenInstanceDTO {
    return OpenInstanceDTOFromJSONTyped(json, false);
}

export function OpenInstanceDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): OpenInstanceDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'id': !exists(json, 'id') ? undefined : json['id'],
        'appId': !exists(json, 'appId') ? undefined : json['appId'],
        'clusterName': !exists(json, 'clusterName') ? undefined : json['clusterName'],
        'dataCenter': !exists(json, 'dataCenter') ? undefined : json['dataCenter'],
        'ip': !exists(json, 'ip') ? undefined : json['ip'],
        'configs': !exists(json, 'configs') ? undefined : ((json['configs'] as Array<any>).map(OpenInstanceConfigDTOFromJSON)),
        'dataChangeCreatedTime': !exists(json, 'dataChangeCreatedTime') ? undefined : json['dataChangeCreatedTime'],
    };
}

export function OpenInstanceDTOToJSON(value?: OpenInstanceDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'id': value.id,
        'appId': value.appId,
        'clusterName': value.clusterName,
        'dataCenter': value.dataCenter,
        'ip': value.ip,
        'configs': value.configs === undefined ? undefined : ((value.configs as Array<any>).map(OpenInstanceConfigDTOToJSON)),
        'dataChangeCreatedTime': value.dataChangeCreatedTime,
    };
}
