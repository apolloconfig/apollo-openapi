/* tslint:disable */
/* eslint-disable */
/**
 * Apollo OpenAPI
 * <p>Apollo配置中心OpenAPI接口文档</p>  <h2>认证方式</h2> <p>所有 API 接口都需要通过 <code>Authorization</code> header 进行身份验证。</p>  <h3>获取 Token 的方式：</h3> <ol>   <li><b>Portal 管理界面获取</b>：登录 Portal → 管理员工具 → 开放平台授权管理 → 创建第三方应用，获取 Token。</li>   <li><b>Token 格式</b>：<code>Authorization: token_value</code></li>   <li><b>Token 权限</b>：按应用/环境/命名空间授予，建议不同用途分别创建。</li> </ol>  <h3>使用示例</h3> <pre><code class=\"language-bash\">curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\ -H \"Authorization: your_token_here\"</code></pre>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OpenItemDTO } from './OpenItemDTO';
import {
    OpenItemDTOFromJSON,
    OpenItemDTOFromJSONTyped,
    OpenItemDTOToJSON,
} from './OpenItemDTO';

/**
 * 分页配置项数据传输对象，用于返回分页查询的配置项列表结果
 * @export
 * @interface OpenPageDTOOpenItemDTO
 */
export interface OpenPageDTOOpenItemDTO {
    /**
     * 当前页码，从0开始计数
     * @type {number}
     * @memberof OpenPageDTOOpenItemDTO
     */
    page?: number;
    /**
     * 每页显示的记录数量
     * @type {number}
     * @memberof OpenPageDTOOpenItemDTO
     */
    size?: number;
    /**
     * 总记录数，符合查询条件的配置项总数量
     * @type {number}
     * @memberof OpenPageDTOOpenItemDTO
     */
    total?: number;
    /**
     * 当前页的配置项列表，包含具体的配置项数据
     * @type {Array<OpenItemDTO>}
     * @memberof OpenPageDTOOpenItemDTO
     */
    content?: Array<OpenItemDTO>;
}

/**
 * Check if a given object implements the OpenPageDTOOpenItemDTO interface.
 */
export function instanceOfOpenPageDTOOpenItemDTO(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OpenPageDTOOpenItemDTOFromJSON(json: any): OpenPageDTOOpenItemDTO {
    return OpenPageDTOOpenItemDTOFromJSONTyped(json, false);
}

export function OpenPageDTOOpenItemDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): OpenPageDTOOpenItemDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'page': !exists(json, 'page') ? undefined : json['page'],
        'size': !exists(json, 'size') ? undefined : json['size'],
        'total': !exists(json, 'total') ? undefined : json['total'],
        'content': !exists(json, 'content') ? undefined : ((json['content'] as Array<any>).map(OpenItemDTOFromJSON)),
    };
}

export function OpenPageDTOOpenItemDTOToJSON(value?: OpenPageDTOOpenItemDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'page': value.page,
        'size': value.size,
        'total': value.total,
        'content': value.content === undefined ? undefined : ((value.content as Array<any>).map(OpenItemDTOToJSON)),
    };
}
