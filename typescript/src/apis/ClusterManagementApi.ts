/* tslint:disable */
/* eslint-disable */
/**
 * Apollo OpenAPI
 * <p>Apollo配置中心OpenAPI接口文档</p>  <h2>认证方式</h2> <p>所有 API 接口都需要通过 <code>Authorization</code> header 进行身份验证。</p>  <h3>获取 Token 的方式：</h3> <ol>   <li><b>Portal 管理界面获取</b>：登录 Portal → 管理员工具 → 开放平台授权管理 → 创建第三方应用，获取 Token。</li>   <li><b>Token 格式</b>：<code>Authorization: token_value</code></li>   <li><b>Token 权限</b>：按应用/环境/命名空间授予，建议不同用途分别创建。</li> </ol>  <h3>使用示例</h3> <pre><code class=\"language-bash\">curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\ -H \"Authorization: your_token_here\"</code></pre>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OpenClusterDTO,
} from '../models';
import {
    OpenClusterDTOFromJSON,
    OpenClusterDTOToJSON,
} from '../models';

export interface CreateClusterRequest {
    appId: string;
    env: string;
    openClusterDTO: OpenClusterDTO;
}

export interface DeleteClusterRequest {
    env: string;
    appId: string;
    clusterName: string;
    operator?: string;
}

export interface GetClusterRequest {
    appId: string;
    clusterName: string;
    env: string;
}

/**
 *
 */
export class ClusterManagementApi extends runtime.BaseAPI {

    /**
     * POST /openapi/v1/envs/{env}/apps/{appId}/clusters
     * 创建集群 (original openapi)
     */
    async createClusterRaw(requestParameters: CreateClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenClusterDTO>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling createCluster.');
        }

        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling createCluster.');
        }

        if (requestParameters.openClusterDTO === null || requestParameters.openClusterDTO === undefined) {
            throw new runtime.RequiredError('openClusterDTO','Required parameter requestParameters.openClusterDTO was null or undefined when calling createCluster.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/envs/{env}/apps/{appId}/clusters`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OpenClusterDTOToJSON(requestParameters.openClusterDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenClusterDTOFromJSON(jsonValue));
    }

    /**
     * POST /openapi/v1/envs/{env}/apps/{appId}/clusters
     * 创建集群 (original openapi)
     */
    async createCluster(requestParameters: CreateClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenClusterDTO> {
        const response = await this.createClusterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * DELETE /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}
     * 删除集群 (new added)
     */
    async deleteClusterRaw(requestParameters: DeleteClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling deleteCluster.');
        }

        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling deleteCluster.');
        }

        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling deleteCluster.');
        }

        const queryParameters: any = {};

        if (requestParameters.operator !== undefined) {
            queryParameters['operator'] = requestParameters.operator;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}`.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))).replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * DELETE /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}
     * 删除集群 (new added)
     */
    async deleteCluster(requestParameters: DeleteClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteClusterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}
     * 获取指定集群信息 (original openapi)
     */
    async getClusterRaw(requestParameters: GetClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenClusterDTO>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling getCluster.');
        }

        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling getCluster.');
        }

        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling getCluster.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))).replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenClusterDTOFromJSON(jsonValue));
    }

    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}
     * 获取指定集群信息 (original openapi)
     */
    async getCluster(requestParameters: GetClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenClusterDTO> {
        const response = await this.getClusterRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
