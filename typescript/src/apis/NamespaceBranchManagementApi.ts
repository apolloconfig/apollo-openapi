/* tslint:disable */
/* eslint-disable */
/**
 * Apollo OpenAPI
 * <p>Apollo配置中心OpenAPI接口文档</p>  <h2>认证方式</h2> <p>所有 API 接口都需要通过 <code>Authorization</code> header 进行身份验证。</p>  <h3>获取 Token 的方式：</h3> <ol>   <li><b>Portal 管理界面获取</b>：登录 Portal → 管理员工具 → 开放平台授权管理 → 创建第三方应用，获取 Token。</li>   <li><b>Token 格式</b>：<code>Authorization: token_value</code></li>   <li><b>Token 权限</b>：按应用/环境/命名空间授予，建议不同用途分别创建。</li> </ol>  <h3>使用示例</h3> <pre><code class=\"language-bash\">curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\ -H \"Authorization: your_token_here\"</code></pre>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  NamespaceReleaseDTO,
  OpenGrayReleaseRuleDTO,
  OpenNamespaceDTO,
  OpenReleaseDTO,
} from '../models';
import {
    NamespaceReleaseDTOFromJSON,
    NamespaceReleaseDTOToJSON,
    OpenGrayReleaseRuleDTOFromJSON,
    OpenGrayReleaseRuleDTOToJSON,
    OpenNamespaceDTOFromJSON,
    OpenNamespaceDTOToJSON,
    OpenReleaseDTOFromJSON,
    OpenReleaseDTOToJSON,
} from '../models';

export interface CreateBranchRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    operator: string;
}

export interface DeleteBranchRequest {
    env: string;
    appId: string;
    clusterName: string;
    namespaceName: string;
    branchName: string;
    operator: string;
}

export interface FindBranchRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
}

export interface GetBranchGrayRulesRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    branchName: string;
}

export interface MergeBranchRequest {
    env: string;
    appId: string;
    clusterName: string;
    namespaceName: string;
    branchName: string;
    deleteBranch: boolean;
    operator: string;
    namespaceReleaseDTO: NamespaceReleaseDTO;
}

export interface UpdateBranchRulesRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    branchName: string;
    operator: string;
    openGrayReleaseRuleDTO: OpenGrayReleaseRuleDTO;
}

/**
 *
 */
export class NamespaceBranchManagementApi extends runtime.BaseAPI {

    /**
     * POST /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches
     * 创建命名空间分支 (original openapi)
     */
    async createBranchRaw(requestParameters: CreateBranchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenNamespaceDTO>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling createBranch.');
        }

        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling createBranch.');
        }

        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling createBranch.');
        }

        if (requestParameters.namespaceName === null || requestParameters.namespaceName === undefined) {
            throw new runtime.RequiredError('namespaceName','Required parameter requestParameters.namespaceName was null or undefined when calling createBranch.');
        }

        if (requestParameters.operator === null || requestParameters.operator === undefined) {
            throw new runtime.RequiredError('operator','Required parameter requestParameters.operator was null or undefined when calling createBranch.');
        }

        const queryParameters: any = {};

        if (requestParameters.operator !== undefined) {
            queryParameters['operator'] = requestParameters.operator;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))).replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))).replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters.namespaceName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenNamespaceDTOFromJSON(jsonValue));
    }

    /**
     * POST /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches
     * 创建命名空间分支 (original openapi)
     */
    async createBranch(requestParameters: CreateBranchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenNamespaceDTO> {
        const response = await this.createBranchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * DELETE /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}
     * 删除命名空间分支 (original openapi)
     */
    async deleteBranchRaw(requestParameters: DeleteBranchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling deleteBranch.');
        }

        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling deleteBranch.');
        }

        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling deleteBranch.');
        }

        if (requestParameters.namespaceName === null || requestParameters.namespaceName === undefined) {
            throw new runtime.RequiredError('namespaceName','Required parameter requestParameters.namespaceName was null or undefined when calling deleteBranch.');
        }

        if (requestParameters.branchName === null || requestParameters.branchName === undefined) {
            throw new runtime.RequiredError('branchName','Required parameter requestParameters.branchName was null or undefined when calling deleteBranch.');
        }

        if (requestParameters.operator === null || requestParameters.operator === undefined) {
            throw new runtime.RequiredError('operator','Required parameter requestParameters.operator was null or undefined when calling deleteBranch.');
        }

        const queryParameters: any = {};

        if (requestParameters.operator !== undefined) {
            queryParameters['operator'] = requestParameters.operator;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}`.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))).replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))).replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters.namespaceName))).replace(`{${"branchName"}}`, encodeURIComponent(String(requestParameters.branchName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * DELETE /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}
     * 删除命名空间分支 (original openapi)
     */
    async deleteBranch(requestParameters: DeleteBranchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteBranchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches
     * 获取命名空间分支信息 (original openapi)
     */
    async findBranchRaw(requestParameters: FindBranchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenNamespaceDTO>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling findBranch.');
        }

        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling findBranch.');
        }

        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling findBranch.');
        }

        if (requestParameters.namespaceName === null || requestParameters.namespaceName === undefined) {
            throw new runtime.RequiredError('namespaceName','Required parameter requestParameters.namespaceName was null or undefined when calling findBranch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))).replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))).replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters.namespaceName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenNamespaceDTOFromJSON(jsonValue));
    }

    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches
     * 获取命名空间分支信息 (original openapi)
     */
    async findBranch(requestParameters: FindBranchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenNamespaceDTO> {
        const response = await this.findBranchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/rules
     * 获取分支灰度发布规则 (original openapi)
     */
    async getBranchGrayRulesRaw(requestParameters: GetBranchGrayRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenGrayReleaseRuleDTO>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling getBranchGrayRules.');
        }

        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling getBranchGrayRules.');
        }

        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling getBranchGrayRules.');
        }

        if (requestParameters.namespaceName === null || requestParameters.namespaceName === undefined) {
            throw new runtime.RequiredError('namespaceName','Required parameter requestParameters.namespaceName was null or undefined when calling getBranchGrayRules.');
        }

        if (requestParameters.branchName === null || requestParameters.branchName === undefined) {
            throw new runtime.RequiredError('branchName','Required parameter requestParameters.branchName was null or undefined when calling getBranchGrayRules.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/rules`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))).replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))).replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters.namespaceName))).replace(`{${"branchName"}}`, encodeURIComponent(String(requestParameters.branchName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenGrayReleaseRuleDTOFromJSON(jsonValue));
    }

    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/rules
     * 获取分支灰度发布规则 (original openapi)
     */
    async getBranchGrayRules(requestParameters: GetBranchGrayRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenGrayReleaseRuleDTO> {
        const response = await this.getBranchGrayRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PATCH /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}  使用 PATCH 方法表示部分更新操作（将分支状态从\"独立\"更新为\"合并\"）
     * 合并分支到主分支 (new added)
     */
    async mergeBranchRaw(requestParameters: MergeBranchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenReleaseDTO>> {
        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling mergeBranch.');
        }

        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling mergeBranch.');
        }

        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling mergeBranch.');
        }

        if (requestParameters.namespaceName === null || requestParameters.namespaceName === undefined) {
            throw new runtime.RequiredError('namespaceName','Required parameter requestParameters.namespaceName was null or undefined when calling mergeBranch.');
        }

        if (requestParameters.branchName === null || requestParameters.branchName === undefined) {
            throw new runtime.RequiredError('branchName','Required parameter requestParameters.branchName was null or undefined when calling mergeBranch.');
        }

        if (requestParameters.deleteBranch === null || requestParameters.deleteBranch === undefined) {
            throw new runtime.RequiredError('deleteBranch','Required parameter requestParameters.deleteBranch was null or undefined when calling mergeBranch.');
        }

        if (requestParameters.operator === null || requestParameters.operator === undefined) {
            throw new runtime.RequiredError('operator','Required parameter requestParameters.operator was null or undefined when calling mergeBranch.');
        }

        if (requestParameters.namespaceReleaseDTO === null || requestParameters.namespaceReleaseDTO === undefined) {
            throw new runtime.RequiredError('namespaceReleaseDTO','Required parameter requestParameters.namespaceReleaseDTO was null or undefined when calling mergeBranch.');
        }

        const queryParameters: any = {};

        if (requestParameters.deleteBranch !== undefined) {
            queryParameters['deleteBranch'] = requestParameters.deleteBranch;
        }

        if (requestParameters.operator !== undefined) {
            queryParameters['operator'] = requestParameters.operator;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}`.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))).replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))).replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters.namespaceName))).replace(`{${"branchName"}}`, encodeURIComponent(String(requestParameters.branchName))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: NamespaceReleaseDTOToJSON(requestParameters.namespaceReleaseDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenReleaseDTOFromJSON(jsonValue));
    }

    /**
     * PATCH /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}  使用 PATCH 方法表示部分更新操作（将分支状态从\"独立\"更新为\"合并\"）
     * 合并分支到主分支 (new added)
     */
    async mergeBranch(requestParameters: MergeBranchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenReleaseDTO> {
        const response = await this.mergeBranchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PUT /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/rules
     * 更新分支灰度发布规则 (original openapi)
     */
    async updateBranchRulesRaw(requestParameters: UpdateBranchRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling updateBranchRules.');
        }

        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling updateBranchRules.');
        }

        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling updateBranchRules.');
        }

        if (requestParameters.namespaceName === null || requestParameters.namespaceName === undefined) {
            throw new runtime.RequiredError('namespaceName','Required parameter requestParameters.namespaceName was null or undefined when calling updateBranchRules.');
        }

        if (requestParameters.branchName === null || requestParameters.branchName === undefined) {
            throw new runtime.RequiredError('branchName','Required parameter requestParameters.branchName was null or undefined when calling updateBranchRules.');
        }

        if (requestParameters.operator === null || requestParameters.operator === undefined) {
            throw new runtime.RequiredError('operator','Required parameter requestParameters.operator was null or undefined when calling updateBranchRules.');
        }

        if (requestParameters.openGrayReleaseRuleDTO === null || requestParameters.openGrayReleaseRuleDTO === undefined) {
            throw new runtime.RequiredError('openGrayReleaseRuleDTO','Required parameter requestParameters.openGrayReleaseRuleDTO was null or undefined when calling updateBranchRules.');
        }

        const queryParameters: any = {};

        if (requestParameters.operator !== undefined) {
            queryParameters['operator'] = requestParameters.operator;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/rules`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))).replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))).replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters.namespaceName))).replace(`{${"branchName"}}`, encodeURIComponent(String(requestParameters.branchName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OpenGrayReleaseRuleDTOToJSON(requestParameters.openGrayReleaseRuleDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * PUT /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/rules
     * 更新分支灰度发布规则 (original openapi)
     */
    async updateBranchRules(requestParameters: UpdateBranchRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.updateBranchRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
