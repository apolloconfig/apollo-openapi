/* tslint:disable */
/* eslint-disable */
/**
 * Apollo OpenAPI
 * <p>Apollo配置中心OpenAPI接口文档</p>  <h2>认证方式</h2> <p>所有 API 接口都需要通过 <code>Authorization</code> header 进行身份验证。</p>  <h3>获取 Token 的方式：</h3> <ol>   <li><b>Portal 管理界面获取</b>：登录 Portal → 管理员工具 → 开放平台授权管理 → 创建第三方应用，获取 Token。</li>   <li><b>Token 格式</b>：<code>Authorization: token_value</code></li>   <li><b>Token 权限</b>：按应用/环境/命名空间授予，建议不同用途分别创建。</li> </ol>  <h3>使用示例</h3> <pre><code class=\"language-bash\">curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\ -H \"Authorization: your_token_here\"</code></pre>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OpenAppNamespaceDTO,
  OpenNamespaceDTO,
  OpenNamespaceLockDTO,
} from '../models';
import {
    OpenAppNamespaceDTOFromJSON,
    OpenAppNamespaceDTOToJSON,
    OpenNamespaceDTOFromJSON,
    OpenNamespaceDTOToJSON,
    OpenNamespaceLockDTOFromJSON,
    OpenNamespaceLockDTOToJSON,
} from '../models';

export interface CheckNamespaceIntegrityRequest {
    appId: string;
    env: string;
    clusterName: string;
}

export interface CreateNamespaceRequest {
    appId: string;
    openAppNamespaceDTO: OpenAppNamespaceDTO;
}

export interface DeleteAppNamespaceRequest {
    appId: string;
    namespaceName: string;
    operator: string;
}

export interface DeleteNamespaceLinksRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    operator: string;
}

export interface FindNamespacesRequest {
    appId: string;
    env: string;
    clusterName: string;
    fillItemDetail: boolean;
}

export interface GetAppNamespaceRequest {
    appId: string;
    namespaceName: string;
}

export interface GetAppNamespacesRequest {
    publicOnly: boolean;
}

export interface GetAppNamespacesByAppRequest {
    appId: string;
}

export interface GetNamespaceLockRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
}

export interface GetNamespacesReleaseStatusRequest {
    appId: string;
}

export interface GetPublicAppNamespaceInstancesRequest {
    env: string;
    publicNamespaceName: string;
    page: number;
    size: number;
}

export interface GetPublicNamespaceAssociationRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
}

export interface LoadNamespaceRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    fillItemDetail: boolean;
}

/**
 *
 */
export class NamespaceManagementApi extends runtime.BaseAPI {

    /**
     * GET /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/integrity-check
     * 检查缺失的Namespace (new added)
     */
    async checkNamespaceIntegrityRaw(requestParameters: CheckNamespaceIntegrityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling checkNamespaceIntegrity.');
        }

        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling checkNamespaceIntegrity.');
        }

        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling checkNamespaceIntegrity.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/integrity-check`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))).replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * GET /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/integrity-check
     * 检查缺失的Namespace (new added)
     */
    async checkNamespaceIntegrity(requestParameters: CheckNamespaceIntegrityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.checkNamespaceIntegrityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * POST /openapi/v1/apps/{appId}/appnamespaces
     * 创建AppNamespace (original openapi)
     */
    async createNamespaceRaw(requestParameters: CreateNamespaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenAppNamespaceDTO>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling createNamespace.');
        }

        if (requestParameters.openAppNamespaceDTO === null || requestParameters.openAppNamespaceDTO === undefined) {
            throw new runtime.RequiredError('openAppNamespaceDTO','Required parameter requestParameters.openAppNamespaceDTO was null or undefined when calling createNamespace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/apps/{appId}/appnamespaces`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OpenAppNamespaceDTOToJSON(requestParameters.openAppNamespaceDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenAppNamespaceDTOFromJSON(jsonValue));
    }

    /**
     * POST /openapi/v1/apps/{appId}/appnamespaces
     * 创建AppNamespace (original openapi)
     */
    async createNamespace(requestParameters: CreateNamespaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenAppNamespaceDTO> {
        const response = await this.createNamespaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * DELETE /openapi/v1/apps/{appId}/appnamespaces/{namespaceName}
     * 删除AppNamespace (new added)
     */
    async deleteAppNamespaceRaw(requestParameters: DeleteAppNamespaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling deleteAppNamespace.');
        }

        if (requestParameters.namespaceName === null || requestParameters.namespaceName === undefined) {
            throw new runtime.RequiredError('namespaceName','Required parameter requestParameters.namespaceName was null or undefined when calling deleteAppNamespace.');
        }

        if (requestParameters.operator === null || requestParameters.operator === undefined) {
            throw new runtime.RequiredError('operator','Required parameter requestParameters.operator was null or undefined when calling deleteAppNamespace.');
        }

        const queryParameters: any = {};

        if (requestParameters.operator !== undefined) {
            queryParameters['operator'] = requestParameters.operator;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/apps/{appId}/appnamespaces/{namespaceName}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters.namespaceName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * DELETE /openapi/v1/apps/{appId}/appnamespaces/{namespaceName}
     * 删除AppNamespace (new added)
     */
    async deleteAppNamespace(requestParameters: DeleteAppNamespaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteAppNamespaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * DELETE /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/links
     * 删除关联的Namespace (new added)
     */
    async deleteNamespaceLinksRaw(requestParameters: DeleteNamespaceLinksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling deleteNamespaceLinks.');
        }

        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling deleteNamespaceLinks.');
        }

        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling deleteNamespaceLinks.');
        }

        if (requestParameters.namespaceName === null || requestParameters.namespaceName === undefined) {
            throw new runtime.RequiredError('namespaceName','Required parameter requestParameters.namespaceName was null or undefined when calling deleteNamespaceLinks.');
        }

        if (requestParameters.operator === null || requestParameters.operator === undefined) {
            throw new runtime.RequiredError('operator','Required parameter requestParameters.operator was null or undefined when calling deleteNamespaceLinks.');
        }

        const queryParameters: any = {};

        if (requestParameters.operator !== undefined) {
            queryParameters['operator'] = requestParameters.operator;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/links`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))).replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))).replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters.namespaceName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * DELETE /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/links
     * 删除关联的Namespace (new added)
     */
    async deleteNamespaceLinks(requestParameters: DeleteNamespaceLinksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteNamespaceLinksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces
     * 获取指定集群下的所有Namespace (original openapi)
     */
    async findNamespacesRaw(requestParameters: FindNamespacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OpenNamespaceDTO>>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling findNamespaces.');
        }

        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling findNamespaces.');
        }

        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling findNamespaces.');
        }

        if (requestParameters.fillItemDetail === null || requestParameters.fillItemDetail === undefined) {
            throw new runtime.RequiredError('fillItemDetail','Required parameter requestParameters.fillItemDetail was null or undefined when calling findNamespaces.');
        }

        const queryParameters: any = {};

        if (requestParameters.fillItemDetail !== undefined) {
            queryParameters['fillItemDetail'] = requestParameters.fillItemDetail;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))).replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OpenNamespaceDTOFromJSON));
    }

    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces
     * 获取指定集群下的所有Namespace (original openapi)
     */
    async findNamespaces(requestParameters: FindNamespacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OpenNamespaceDTO>> {
        const response = await this.findNamespacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/apps/{appId}/appnamespaces/{namespaceName}
     * 获取指定的AppNamespace (new added)
     */
    async getAppNamespaceRaw(requestParameters: GetAppNamespaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenAppNamespaceDTO>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling getAppNamespace.');
        }

        if (requestParameters.namespaceName === null || requestParameters.namespaceName === undefined) {
            throw new runtime.RequiredError('namespaceName','Required parameter requestParameters.namespaceName was null or undefined when calling getAppNamespace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/apps/{appId}/appnamespaces/{namespaceName}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters.namespaceName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenAppNamespaceDTOFromJSON(jsonValue));
    }

    /**
     * GET /openapi/v1/apps/{appId}/appnamespaces/{namespaceName}
     * 获取指定的AppNamespace (new added)
     */
    async getAppNamespace(requestParameters: GetAppNamespaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenAppNamespaceDTO> {
        const response = await this.getAppNamespaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/appnamespaces?public=true
     * 获取所有公共AppNamespace (new added)
     */
    async getAppNamespacesRaw(requestParameters: GetAppNamespacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OpenAppNamespaceDTO>>> {
        if (requestParameters.publicOnly === null || requestParameters.publicOnly === undefined) {
            throw new runtime.RequiredError('publicOnly','Required parameter requestParameters.publicOnly was null or undefined when calling getAppNamespaces.');
        }

        const queryParameters: any = {};

        if (requestParameters.publicOnly !== undefined) {
            queryParameters['publicOnly'] = requestParameters.publicOnly;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/appnamespaces`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OpenAppNamespaceDTOFromJSON));
    }

    /**
     * GET /openapi/v1/appnamespaces?public=true
     * 获取所有公共AppNamespace (new added)
     */
    async getAppNamespaces(requestParameters: GetAppNamespacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OpenAppNamespaceDTO>> {
        const response = await this.getAppNamespacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/apps/{appId}/appnamespaces
     * 获取指定应用的AppNamespace (new added)
     */
    async getAppNamespacesByAppRaw(requestParameters: GetAppNamespacesByAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OpenAppNamespaceDTO>>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling getAppNamespacesByApp.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/apps/{appId}/appnamespaces`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OpenAppNamespaceDTOFromJSON));
    }

    /**
     * GET /openapi/v1/apps/{appId}/appnamespaces
     * 获取指定应用的AppNamespace (new added)
     */
    async getAppNamespacesByApp(requestParameters: GetAppNamespacesByAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OpenAppNamespaceDTO>> {
        const response = await this.getAppNamespacesByAppRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/lock
     * 获取Namespace的锁状态 (original openapi)
     */
    async getNamespaceLockRaw(requestParameters: GetNamespaceLockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenNamespaceLockDTO>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling getNamespaceLock.');
        }

        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling getNamespaceLock.');
        }

        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling getNamespaceLock.');
        }

        if (requestParameters.namespaceName === null || requestParameters.namespaceName === undefined) {
            throw new runtime.RequiredError('namespaceName','Required parameter requestParameters.namespaceName was null or undefined when calling getNamespaceLock.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/lock`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))).replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))).replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters.namespaceName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenNamespaceLockDTOFromJSON(jsonValue));
    }

    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/lock
     * 获取Namespace的锁状态 (original openapi)
     */
    async getNamespaceLock(requestParameters: GetNamespaceLockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenNamespaceLockDTO> {
        const response = await this.getNamespaceLockRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/apps/{appId}/namespaces/releases/status
     * 获取应用下所有Namespace的发布状态 (new added)
     */
    async getNamespacesReleaseStatusRaw(requestParameters: GetNamespacesReleaseStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: { [key: string]: boolean; }; }>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling getNamespacesReleaseStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/apps/{appId}/namespaces/releases/status`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * GET /openapi/v1/apps/{appId}/namespaces/releases/status
     * 获取应用下所有Namespace的发布状态 (new added)
     */
    async getNamespacesReleaseStatus(requestParameters: GetNamespacesReleaseStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: { [key: string]: boolean; }; }> {
        const response = await this.getNamespacesReleaseStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/envs/{env}/appnamespaces/{publicNamespaceName}/instances
     * 获取公共AppNamespace的所有实例 (new added)
     */
    async getPublicAppNamespaceInstancesRaw(requestParameters: GetPublicAppNamespaceInstancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OpenNamespaceDTO>>> {
        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling getPublicAppNamespaceInstances.');
        }

        if (requestParameters.publicNamespaceName === null || requestParameters.publicNamespaceName === undefined) {
            throw new runtime.RequiredError('publicNamespaceName','Required parameter requestParameters.publicNamespaceName was null or undefined when calling getPublicAppNamespaceInstances.');
        }

        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling getPublicAppNamespaceInstances.');
        }

        if (requestParameters.size === null || requestParameters.size === undefined) {
            throw new runtime.RequiredError('size','Required parameter requestParameters.size was null or undefined when calling getPublicAppNamespaceInstances.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/envs/{env}/appnamespaces/{publicNamespaceName}/instances`.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))).replace(`{${"publicNamespaceName"}}`, encodeURIComponent(String(requestParameters.publicNamespaceName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OpenNamespaceDTOFromJSON));
    }

    /**
     * GET /openapi/v1/envs/{env}/appnamespaces/{publicNamespaceName}/instances
     * 获取公共AppNamespace的所有实例 (new added)
     */
    async getPublicAppNamespaceInstances(requestParameters: GetPublicAppNamespaceInstancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OpenNamespaceDTO>> {
        const response = await this.getPublicAppNamespaceInstancesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/public-association
     * 获取关联的公共Namespace (new added)
     */
    async getPublicNamespaceAssociationRaw(requestParameters: GetPublicNamespaceAssociationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenNamespaceDTO>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling getPublicNamespaceAssociation.');
        }

        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling getPublicNamespaceAssociation.');
        }

        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling getPublicNamespaceAssociation.');
        }

        if (requestParameters.namespaceName === null || requestParameters.namespaceName === undefined) {
            throw new runtime.RequiredError('namespaceName','Required parameter requestParameters.namespaceName was null or undefined when calling getPublicNamespaceAssociation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/public-association`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))).replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))).replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters.namespaceName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenNamespaceDTOFromJSON(jsonValue));
    }

    /**
     * GET /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/public-association
     * 获取关联的公共Namespace (new added)
     */
    async getPublicNamespaceAssociation(requestParameters: GetPublicNamespaceAssociationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenNamespaceDTO> {
        const response = await this.getPublicNamespaceAssociationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}
     * 获取指定的Namespace (original openapi)
     */
    async loadNamespaceRaw(requestParameters: LoadNamespaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenNamespaceDTO>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling loadNamespace.');
        }

        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling loadNamespace.');
        }

        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling loadNamespace.');
        }

        if (requestParameters.namespaceName === null || requestParameters.namespaceName === undefined) {
            throw new runtime.RequiredError('namespaceName','Required parameter requestParameters.namespaceName was null or undefined when calling loadNamespace.');
        }

        if (requestParameters.fillItemDetail === null || requestParameters.fillItemDetail === undefined) {
            throw new runtime.RequiredError('fillItemDetail','Required parameter requestParameters.fillItemDetail was null or undefined when calling loadNamespace.');
        }

        const queryParameters: any = {};

        if (requestParameters.fillItemDetail !== undefined) {
            queryParameters['fillItemDetail'] = requestParameters.fillItemDetail;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))).replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))).replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters.namespaceName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenNamespaceDTOFromJSON(jsonValue));
    }

    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}
     * 获取指定的Namespace (original openapi)
     */
    async loadNamespace(requestParameters: LoadNamespaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenNamespaceDTO> {
        const response = await this.loadNamespaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
