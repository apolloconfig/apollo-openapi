/* tslint:disable */
/* eslint-disable */
/**
 * Apollo OpenAPI
 * <p>Apollo配置中心OpenAPI接口文档</p>  <h2>认证方式</h2> <p>所有 API 接口都需要通过 <code>Authorization</code> header 进行身份验证。</p>  <h3>获取 Token 的方式：</h3> <ol>   <li><b>Portal 管理界面获取</b>：登录 Portal → 管理员工具 → 开放平台授权管理 → 创建第三方应用，获取 Token。</li>   <li><b>Token 格式</b>：<code>Authorization: token_value</code></li>   <li><b>Token 权限</b>：按应用/环境/命名空间授予，建议不同用途分别创建。</li> </ol>  <h3>使用示例</h3> <pre><code class=\"language-bash\">curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\ -H \"Authorization: your_token_here\"</code></pre>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MultiResponseEntity,
  OpenAppDTO,
  OpenCreateAppDTO,
  OpenEnvClusterDTO,
} from '../models';
import {
    MultiResponseEntityFromJSON,
    MultiResponseEntityToJSON,
    OpenAppDTOFromJSON,
    OpenAppDTOToJSON,
    OpenCreateAppDTOFromJSON,
    OpenCreateAppDTOToJSON,
    OpenEnvClusterDTOFromJSON,
    OpenEnvClusterDTOToJSON,
} from '../models';

export interface CreateAppRequest {
    openCreateAppDTO: OpenCreateAppDTO;
}

export interface CreateAppInEnvRequest {
    env: string;
    operator: string;
    openAppDTO: OpenAppDTO;
}

export interface DeleteAppRequest {
    appId: string;
    operator: string;
}

export interface FindAppsRequest {
    appIds?: string;
}

export interface FindMissEnvsRequest {
    appId: string;
}

export interface GetAppRequest {
    appId: string;
}

export interface GetAppNavTreeRequest {
    appId: string;
}

export interface GetAppsBySelfRequest {
    page: number;
    size: number;
}

export interface GetEnvClusterInfoRequest {
    appId: string;
}

export interface UpdateAppRequest {
    appId: string;
    operator: string;
    openAppDTO: OpenAppDTO;
}

/**
 *
 */
export class AppManagementApi extends runtime.BaseAPI {

    /**
     * POST /openapi/v1/apps
     * 创建应用 (original openapi)
     */
    async createAppRaw(requestParameters: CreateAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.openCreateAppDTO === null || requestParameters.openCreateAppDTO === undefined) {
            throw new runtime.RequiredError('openCreateAppDTO','Required parameter requestParameters.openCreateAppDTO was null or undefined when calling createApp.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/apps`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OpenCreateAppDTOToJSON(requestParameters.openCreateAppDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * POST /openapi/v1/apps
     * 创建应用 (original openapi)
     */
    async createApp(requestParameters: CreateAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.createAppRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * POST /openapi/v1/apps/envs/{env}
     * 在指定环境创建应用(new added)
     */
    async createAppInEnvRaw(requestParameters: CreateAppInEnvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling createAppInEnv.');
        }

        if (requestParameters.operator === null || requestParameters.operator === undefined) {
            throw new runtime.RequiredError('operator','Required parameter requestParameters.operator was null or undefined when calling createAppInEnv.');
        }

        if (requestParameters.openAppDTO === null || requestParameters.openAppDTO === undefined) {
            throw new runtime.RequiredError('openAppDTO','Required parameter requestParameters.openAppDTO was null or undefined when calling createAppInEnv.');
        }

        const queryParameters: any = {};

        if (requestParameters.operator !== undefined) {
            queryParameters['operator'] = requestParameters.operator;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/apps/envs/{env}`.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OpenAppDTOToJSON(requestParameters.openAppDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * POST /openapi/v1/apps/envs/{env}
     * 在指定环境创建应用(new added)
     */
    async createAppInEnv(requestParameters: CreateAppInEnvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.createAppInEnvRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * DELETE /openapi/v1/apps/{appId}
     * 删除应用(new added)
     */
    async deleteAppRaw(requestParameters: DeleteAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling deleteApp.');
        }

        if (requestParameters.operator === null || requestParameters.operator === undefined) {
            throw new runtime.RequiredError('operator','Required parameter requestParameters.operator was null or undefined when calling deleteApp.');
        }

        const queryParameters: any = {};

        if (requestParameters.operator !== undefined) {
            queryParameters['operator'] = requestParameters.operator;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/apps/{appId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * DELETE /openapi/v1/apps/{appId}
     * 删除应用(new added)
     */
    async deleteApp(requestParameters: DeleteAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteAppRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * POST /openapi/v1/apps
     * 查找应用 (original openapi)
     */
    async findAppsRaw(requestParameters: FindAppsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OpenAppDTO>>> {
        const queryParameters: any = {};

        if (requestParameters.appIds !== undefined) {
            queryParameters['appIds'] = requestParameters.appIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/apps`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OpenAppDTOFromJSON));
    }

    /**
     * POST /openapi/v1/apps
     * 查找应用 (original openapi)
     */
    async findApps(requestParameters: FindAppsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OpenAppDTO>> {
        const response = await this.findAppsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/apps/authorized
     * 获取当前Consumer授权的应用列表 (original openapi)
     */
    async findAppsAuthorizedRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OpenAppDTO>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/apps/authorized`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OpenAppDTOFromJSON));
    }

    /**
     * GET /openapi/v1/apps/authorized
     * 获取当前Consumer授权的应用列表 (original openapi)
     */
    async findAppsAuthorized(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OpenAppDTO>> {
        const response = await this.findAppsAuthorizedRaw(initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/apps/{appId}/miss_envs
     * 查找缺失的环境(new added)
     */
    async findMissEnvsRaw(requestParameters: FindMissEnvsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MultiResponseEntity>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling findMissEnvs.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/apps/{appId}/miss_envs`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MultiResponseEntityFromJSON(jsonValue));
    }

    /**
     * GET /openapi/v1/apps/{appId}/miss_envs
     * 查找缺失的环境(new added)
     */
    async findMissEnvs(requestParameters: FindMissEnvsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MultiResponseEntity> {
        const response = await this.findMissEnvsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/apps/{appId}
     * 获取单个应用信息(new added)
     */
    async getAppRaw(requestParameters: GetAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenAppDTO>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling getApp.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/apps/{appId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenAppDTOFromJSON(jsonValue));
    }

    /**
     * GET /openapi/v1/apps/{appId}
     * 获取单个应用信息(new added)
     */
    async getApp(requestParameters: GetAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenAppDTO> {
        const response = await this.getAppRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/apps/{appId}/navtree
     * 获取应用导航树(new added)
     */
    async getAppNavTreeRaw(requestParameters: GetAppNavTreeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MultiResponseEntity>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling getAppNavTree.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/apps/{appId}/navtree`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MultiResponseEntityFromJSON(jsonValue));
    }

    /**
     * GET /openapi/v1/apps/{appId}/navtree
     * 获取应用导航树(new added)
     */
    async getAppNavTree(requestParameters: GetAppNavTreeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MultiResponseEntity> {
        const response = await this.getAppNavTreeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/apps/by-self
     * 获取当前Consumer的应用列表（分页）(new added)
     */
    async getAppsBySelfRaw(requestParameters: GetAppsBySelfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OpenAppDTO>>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling getAppsBySelf.');
        }

        if (requestParameters.size === null || requestParameters.size === undefined) {
            throw new runtime.RequiredError('size','Required parameter requestParameters.size was null or undefined when calling getAppsBySelf.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/apps/by-self`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OpenAppDTOFromJSON));
    }

    /**
     * GET /openapi/v1/apps/by-self
     * 获取当前Consumer的应用列表（分页）(new added)
     */
    async getAppsBySelf(requestParameters: GetAppsBySelfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OpenAppDTO>> {
        const response = await this.getAppsBySelfRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/apps/{appId}/envclusters
     * 获取应用的环境集群信息 (original openapi)
     */
    async getEnvClusterInfoRaw(requestParameters: GetEnvClusterInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OpenEnvClusterDTO>>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling getEnvClusterInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/apps/{appId}/envclusters`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OpenEnvClusterDTOFromJSON));
    }

    /**
     * GET /openapi/v1/apps/{appId}/envclusters
     * 获取应用的环境集群信息 (original openapi)
     */
    async getEnvClusterInfo(requestParameters: GetEnvClusterInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OpenEnvClusterDTO>> {
        const response = await this.getEnvClusterInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PUT /openapi/v1/apps/{appId}
     * 更新应用(new added)
     */
    async updateAppRaw(requestParameters: UpdateAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenAppDTO>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling updateApp.');
        }

        if (requestParameters.operator === null || requestParameters.operator === undefined) {
            throw new runtime.RequiredError('operator','Required parameter requestParameters.operator was null or undefined when calling updateApp.');
        }

        if (requestParameters.openAppDTO === null || requestParameters.openAppDTO === undefined) {
            throw new runtime.RequiredError('openAppDTO','Required parameter requestParameters.openAppDTO was null or undefined when calling updateApp.');
        }

        const queryParameters: any = {};

        if (requestParameters.operator !== undefined) {
            queryParameters['operator'] = requestParameters.operator;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/apps/{appId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OpenAppDTOToJSON(requestParameters.openAppDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenAppDTOFromJSON(jsonValue));
    }

    /**
     * PUT /openapi/v1/apps/{appId}
     * 更新应用(new added)
     */
    async updateApp(requestParameters: UpdateAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenAppDTO> {
        const response = await this.updateAppRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
