/* tslint:disable */
/* eslint-disable */
/**
 * Apollo OpenAPI
 * <p>Apollo配置中心OpenAPI接口文档</p>  <h2>认证方式</h2> <p>所有 API 接口都需要通过 <code>Authorization</code> header 进行身份验证。</p>  <h3>获取 Token 的方式：</h3> <ol>   <li><b>Portal 管理界面获取</b>：登录 Portal → 管理员工具 → 开放平台授权管理 → 创建第三方应用，获取 Token。</li>   <li><b>Token 格式</b>：<code>Authorization: token_value</code></li>   <li><b>Token 权限</b>：按应用/环境/命名空间授予，建议不同用途分别创建。</li> </ol>  <h3>使用示例</h3> <pre><code class=\"language-bash\">curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\ -H \"Authorization: your_token_here\"</code></pre>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  NamespaceGrayDelReleaseDTO,
  NamespaceReleaseDTO,
  OpenReleaseBO,
  OpenReleaseDTO,
} from '../models';
import {
    NamespaceGrayDelReleaseDTOFromJSON,
    NamespaceGrayDelReleaseDTOToJSON,
    NamespaceReleaseDTOFromJSON,
    NamespaceReleaseDTOToJSON,
    OpenReleaseBOFromJSON,
    OpenReleaseBOToJSON,
    OpenReleaseDTOFromJSON,
    OpenReleaseDTOToJSON,
} from '../models';

export interface CreateGrayDelReleaseRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    branchName: string;
    namespaceGrayDelReleaseDTO: NamespaceGrayDelReleaseDTO;
}

export interface CreateGrayReleaseRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    branchName: string;
    namespaceReleaseDTO: NamespaceReleaseDTO;
}

export interface CreateReleaseRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    namespaceReleaseDTO: NamespaceReleaseDTO;
}

export interface FindActiveReleasesRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    page: number;
    size: number;
}

export interface FindAllReleasesRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    page: number;
    size: number;
}

export interface GetReleaseByIdRequest {
    env: string;
    releaseId: number;
}

export interface LoadLatestActiveReleaseRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
}

export interface MergeRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    branchName: string;
    deleteBranch: boolean;
    namespaceReleaseDTO: NamespaceReleaseDTO;
}

export interface RollbackRequest {
    env: string;
    releaseId: number;
    operator: string;
}

/**
 *
 */
export class ReleaseManagementApi extends runtime.BaseAPI {

    /**
     *
     * 创建灰度删除发布 (original openapi)
     */
    async createGrayDelReleaseRaw(requestParameters: CreateGrayDelReleaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenReleaseDTO>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling createGrayDelRelease.');
        }

        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling createGrayDelRelease.');
        }

        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling createGrayDelRelease.');
        }

        if (requestParameters.namespaceName === null || requestParameters.namespaceName === undefined) {
            throw new runtime.RequiredError('namespaceName','Required parameter requestParameters.namespaceName was null or undefined when calling createGrayDelRelease.');
        }

        if (requestParameters.branchName === null || requestParameters.branchName === undefined) {
            throw new runtime.RequiredError('branchName','Required parameter requestParameters.branchName was null or undefined when calling createGrayDelRelease.');
        }

        if (requestParameters.namespaceGrayDelReleaseDTO === null || requestParameters.namespaceGrayDelReleaseDTO === undefined) {
            throw new runtime.RequiredError('namespaceGrayDelReleaseDTO','Required parameter requestParameters.namespaceGrayDelReleaseDTO was null or undefined when calling createGrayDelRelease.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/gray-del-releases`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))).replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))).replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters.namespaceName))).replace(`{${"branchName"}}`, encodeURIComponent(String(requestParameters.branchName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NamespaceGrayDelReleaseDTOToJSON(requestParameters.namespaceGrayDelReleaseDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenReleaseDTOFromJSON(jsonValue));
    }

    /**
     *
     * 创建灰度删除发布 (original openapi)
     */
    async createGrayDelRelease(requestParameters: CreateGrayDelReleaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenReleaseDTO> {
        const response = await this.createGrayDelReleaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 创建灰度发布
     * 创建灰度发布 (original openapi)
     */
    async createGrayReleaseRaw(requestParameters: CreateGrayReleaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenReleaseDTO>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling createGrayRelease.');
        }

        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling createGrayRelease.');
        }

        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling createGrayRelease.');
        }

        if (requestParameters.namespaceName === null || requestParameters.namespaceName === undefined) {
            throw new runtime.RequiredError('namespaceName','Required parameter requestParameters.namespaceName was null or undefined when calling createGrayRelease.');
        }

        if (requestParameters.branchName === null || requestParameters.branchName === undefined) {
            throw new runtime.RequiredError('branchName','Required parameter requestParameters.branchName was null or undefined when calling createGrayRelease.');
        }

        if (requestParameters.namespaceReleaseDTO === null || requestParameters.namespaceReleaseDTO === undefined) {
            throw new runtime.RequiredError('namespaceReleaseDTO','Required parameter requestParameters.namespaceReleaseDTO was null or undefined when calling createGrayRelease.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/releases`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))).replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))).replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters.namespaceName))).replace(`{${"branchName"}}`, encodeURIComponent(String(requestParameters.branchName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NamespaceReleaseDTOToJSON(requestParameters.namespaceReleaseDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenReleaseDTOFromJSON(jsonValue));
    }

    /**
     * 创建灰度发布
     * 创建灰度发布 (original openapi)
     */
    async createGrayRelease(requestParameters: CreateGrayReleaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenReleaseDTO> {
        const response = await this.createGrayReleaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 创建发布
     * 创建发布 (original openapi)
     */
    async createReleaseRaw(requestParameters: CreateReleaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenReleaseDTO>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling createRelease.');
        }

        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling createRelease.');
        }

        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling createRelease.');
        }

        if (requestParameters.namespaceName === null || requestParameters.namespaceName === undefined) {
            throw new runtime.RequiredError('namespaceName','Required parameter requestParameters.namespaceName was null or undefined when calling createRelease.');
        }

        if (requestParameters.namespaceReleaseDTO === null || requestParameters.namespaceReleaseDTO === undefined) {
            throw new runtime.RequiredError('namespaceReleaseDTO','Required parameter requestParameters.namespaceReleaseDTO was null or undefined when calling createRelease.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))).replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))).replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters.namespaceName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NamespaceReleaseDTOToJSON(requestParameters.namespaceReleaseDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenReleaseDTOFromJSON(jsonValue));
    }

    /**
     * 创建发布
     * 创建发布 (original openapi)
     */
    async createRelease(requestParameters: CreateReleaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenReleaseDTO> {
        const response = await this.createReleaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases/active
     * 获取活跃发布（分页） (new added)
     */
    async findActiveReleasesRaw(requestParameters: FindActiveReleasesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OpenReleaseDTO>>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling findActiveReleases.');
        }

        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling findActiveReleases.');
        }

        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling findActiveReleases.');
        }

        if (requestParameters.namespaceName === null || requestParameters.namespaceName === undefined) {
            throw new runtime.RequiredError('namespaceName','Required parameter requestParameters.namespaceName was null or undefined when calling findActiveReleases.');
        }

        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling findActiveReleases.');
        }

        if (requestParameters.size === null || requestParameters.size === undefined) {
            throw new runtime.RequiredError('size','Required parameter requestParameters.size was null or undefined when calling findActiveReleases.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases/active`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))).replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))).replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters.namespaceName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OpenReleaseDTOFromJSON));
    }

    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases/active
     * 获取活跃发布（分页） (new added)
     */
    async findActiveReleases(requestParameters: FindActiveReleasesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OpenReleaseDTO>> {
        const response = await this.findActiveReleasesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases/all
     * 获取所有发布（分页） (new added)
     */
    async findAllReleasesRaw(requestParameters: FindAllReleasesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OpenReleaseBO>>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling findAllReleases.');
        }

        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling findAllReleases.');
        }

        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling findAllReleases.');
        }

        if (requestParameters.namespaceName === null || requestParameters.namespaceName === undefined) {
            throw new runtime.RequiredError('namespaceName','Required parameter requestParameters.namespaceName was null or undefined when calling findAllReleases.');
        }

        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling findAllReleases.');
        }

        if (requestParameters.size === null || requestParameters.size === undefined) {
            throw new runtime.RequiredError('size','Required parameter requestParameters.size was null or undefined when calling findAllReleases.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases/all`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))).replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))).replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters.namespaceName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OpenReleaseBOFromJSON));
    }

    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases/all
     * 获取所有发布（分页） (new added)
     */
    async findAllReleases(requestParameters: FindAllReleasesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OpenReleaseBO>> {
        const response = await this.findAllReleasesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/envs/{env}/releases/{releaseId}
     * 获取发布详情 (new added)
     */
    async getReleaseByIdRaw(requestParameters: GetReleaseByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenReleaseDTO>> {
        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling getReleaseById.');
        }

        if (requestParameters.releaseId === null || requestParameters.releaseId === undefined) {
            throw new runtime.RequiredError('releaseId','Required parameter requestParameters.releaseId was null or undefined when calling getReleaseById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/envs/{env}/releases/{releaseId}`.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))).replace(`{${"releaseId"}}`, encodeURIComponent(String(requestParameters.releaseId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenReleaseDTOFromJSON(jsonValue));
    }

    /**
     * GET /openapi/v1/envs/{env}/releases/{releaseId}
     * 获取发布详情 (new added)
     */
    async getReleaseById(requestParameters: GetReleaseByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenReleaseDTO> {
        const response = await this.getReleaseByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 查询命名空间最新活跃发布
     * 获取最新活跃发布 (original openapi)
     */
    async loadLatestActiveReleaseRaw(requestParameters: LoadLatestActiveReleaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenReleaseDTO>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling loadLatestActiveRelease.');
        }

        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling loadLatestActiveRelease.');
        }

        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling loadLatestActiveRelease.');
        }

        if (requestParameters.namespaceName === null || requestParameters.namespaceName === undefined) {
            throw new runtime.RequiredError('namespaceName','Required parameter requestParameters.namespaceName was null or undefined when calling loadLatestActiveRelease.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases/latest`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))).replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))).replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters.namespaceName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenReleaseDTOFromJSON(jsonValue));
    }

    /**
     * 查询命名空间最新活跃发布
     * 获取最新活跃发布 (original openapi)
     */
    async loadLatestActiveRelease(requestParameters: LoadLatestActiveReleaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenReleaseDTO> {
        const response = await this.loadLatestActiveReleaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 合并灰度分支并可选择删除分支
     * 合并分支 (original openapi)
     */
    async mergeRaw(requestParameters: MergeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenReleaseDTO>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling merge.');
        }

        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling merge.');
        }

        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling merge.');
        }

        if (requestParameters.namespaceName === null || requestParameters.namespaceName === undefined) {
            throw new runtime.RequiredError('namespaceName','Required parameter requestParameters.namespaceName was null or undefined when calling merge.');
        }

        if (requestParameters.branchName === null || requestParameters.branchName === undefined) {
            throw new runtime.RequiredError('branchName','Required parameter requestParameters.branchName was null or undefined when calling merge.');
        }

        if (requestParameters.deleteBranch === null || requestParameters.deleteBranch === undefined) {
            throw new runtime.RequiredError('deleteBranch','Required parameter requestParameters.deleteBranch was null or undefined when calling merge.');
        }

        if (requestParameters.namespaceReleaseDTO === null || requestParameters.namespaceReleaseDTO === undefined) {
            throw new runtime.RequiredError('namespaceReleaseDTO','Required parameter requestParameters.namespaceReleaseDTO was null or undefined when calling merge.');
        }

        const queryParameters: any = {};

        if (requestParameters.deleteBranch !== undefined) {
            queryParameters['deleteBranch'] = requestParameters.deleteBranch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/merge`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))).replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))).replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters.namespaceName))).replace(`{${"branchName"}}`, encodeURIComponent(String(requestParameters.branchName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NamespaceReleaseDTOToJSON(requestParameters.namespaceReleaseDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenReleaseDTOFromJSON(jsonValue));
    }

    /**
     * 合并灰度分支并可选择删除分支
     * 合并分支 (original openapi)
     */
    async merge(requestParameters: MergeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenReleaseDTO> {
        const response = await this.mergeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 回滚到指定的发布版本
     * 回滚发布 (original openapi)
     */
    async rollbackRaw(requestParameters: RollbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling rollback.');
        }

        if (requestParameters.releaseId === null || requestParameters.releaseId === undefined) {
            throw new runtime.RequiredError('releaseId','Required parameter requestParameters.releaseId was null or undefined when calling rollback.');
        }

        if (requestParameters.operator === null || requestParameters.operator === undefined) {
            throw new runtime.RequiredError('operator','Required parameter requestParameters.operator was null or undefined when calling rollback.');
        }

        const queryParameters: any = {};

        if (requestParameters.operator !== undefined) {
            queryParameters['operator'] = requestParameters.operator;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/envs/{env}/releases/{releaseId}/rollback`.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))).replace(`{${"releaseId"}}`, encodeURIComponent(String(requestParameters.releaseId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 回滚到指定的发布版本
     * 回滚发布 (original openapi)
     */
    async rollback(requestParameters: RollbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.rollbackRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
