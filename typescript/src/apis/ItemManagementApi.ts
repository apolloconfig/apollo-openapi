/* tslint:disable */
/* eslint-disable */
/**
 * Apollo OpenAPI
 * <p>Apollo配置中心OpenAPI接口文档</p>  <h2>认证方式</h2> <p>所有 API 接口都需要通过 <code>Authorization</code> header 进行身份验证。</p>  <h3>获取 Token 的方式：</h3> <ol>   <li><b>Portal 管理界面获取</b>：登录 Portal → 管理员工具 → 开放平台授权管理 → 创建第三方应用，获取 Token。</li>   <li><b>Token 格式</b>：<code>Authorization: token_value</code></li>   <li><b>Token 权限</b>：按应用/环境/命名空间授予，建议不同用途分别创建。</li> </ol>  <h3>使用示例</h3> <pre><code class=\"language-bash\">curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\ -H \"Authorization: your_token_here\"</code></pre>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OpenItemDTO,
  OpenItemDiffs,
  OpenNamespaceSyncModel,
  OpenNamespaceTextModel,
  OpenPageDTOOpenItemDTO,
} from '../models';
import {
    OpenItemDTOFromJSON,
    OpenItemDTOToJSON,
    OpenItemDiffsFromJSON,
    OpenItemDiffsToJSON,
    OpenNamespaceSyncModelFromJSON,
    OpenNamespaceSyncModelToJSON,
    OpenNamespaceTextModelFromJSON,
    OpenNamespaceTextModelToJSON,
    OpenPageDTOOpenItemDTOFromJSON,
    OpenPageDTOOpenItemDTOToJSON,
} from '../models';

export interface BatchUpdateItemsByTextRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    operator: string;
    openNamespaceTextModel: OpenNamespaceTextModel;
}

export interface CompareItemsRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    openNamespaceSyncModel: OpenNamespaceSyncModel;
}

export interface CreateItemRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    operator: string;
    openItemDTO: OpenItemDTO;
}

export interface DeleteItemRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    key: string;
    operator: string;
}

export interface DeleteItemByEncodedKeyRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    key: string;
    operator: string;
}

export interface FindItemsByNamespaceRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    page: number;
    size: number;
}

export interface GetBranchItemsRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    branchName: string;
}

export interface GetItemRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    key: string;
}

export interface GetItemByEncodedKeyRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    key: string;
}

export interface RevertItemsRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    operator: string;
}

export interface SyncItemsRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    operator: string;
    openNamespaceSyncModel: OpenNamespaceSyncModel;
}

export interface UpdateItemRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    key: string;
    createIfNotExists: boolean;
    openItemDTO: OpenItemDTO;
}

export interface UpdateItemByEncodedKeyRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    key: string;
    createIfNotExists: boolean;
    openItemDTO: OpenItemDTO;
}

export interface ValidateItemsRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    openNamespaceTextModel: OpenNamespaceTextModel;
}

/**
 *
 */
export class ItemManagementApi extends runtime.BaseAPI {

    /**
     * PUT /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/batchUpdate:
     * 通过文本批量修改配置项 (new added)
     */
    async batchUpdateItemsByTextRaw(requestParameters: BatchUpdateItemsByTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling batchUpdateItemsByText.');
        }

        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling batchUpdateItemsByText.');
        }

        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling batchUpdateItemsByText.');
        }

        if (requestParameters.namespaceName === null || requestParameters.namespaceName === undefined) {
            throw new runtime.RequiredError('namespaceName','Required parameter requestParameters.namespaceName was null or undefined when calling batchUpdateItemsByText.');
        }

        if (requestParameters.operator === null || requestParameters.operator === undefined) {
            throw new runtime.RequiredError('operator','Required parameter requestParameters.operator was null or undefined when calling batchUpdateItemsByText.');
        }

        if (requestParameters.openNamespaceTextModel === null || requestParameters.openNamespaceTextModel === undefined) {
            throw new runtime.RequiredError('openNamespaceTextModel','Required parameter requestParameters.openNamespaceTextModel was null or undefined when calling batchUpdateItemsByText.');
        }

        const queryParameters: any = {};

        if (requestParameters.operator !== undefined) {
            queryParameters['operator'] = requestParameters.operator;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/batchUpdate`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))).replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))).replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters.namespaceName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OpenNamespaceTextModelToJSON(requestParameters.openNamespaceTextModel),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * PUT /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/batchUpdate:
     * 通过文本批量修改配置项 (new added)
     */
    async batchUpdateItemsByText(requestParameters: BatchUpdateItemsByTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.batchUpdateItemsByTextRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/compare
     * 对比命名空间配置差异 (new added)
     */
    async compareItemsRaw(requestParameters: CompareItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OpenItemDiffs>>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling compareItems.');
        }

        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling compareItems.');
        }

        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling compareItems.');
        }

        if (requestParameters.namespaceName === null || requestParameters.namespaceName === undefined) {
            throw new runtime.RequiredError('namespaceName','Required parameter requestParameters.namespaceName was null or undefined when calling compareItems.');
        }

        if (requestParameters.openNamespaceSyncModel === null || requestParameters.openNamespaceSyncModel === undefined) {
            throw new runtime.RequiredError('openNamespaceSyncModel','Required parameter requestParameters.openNamespaceSyncModel was null or undefined when calling compareItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/compare`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))).replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))).replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters.namespaceName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OpenNamespaceSyncModelToJSON(requestParameters.openNamespaceSyncModel),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OpenItemDiffsFromJSON));
    }

    /**
     * POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/compare
     * 对比命名空间配置差异 (new added)
     */
    async compareItems(requestParameters: CompareItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OpenItemDiffs>> {
        const response = await this.compareItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * POST /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items
     * 创建新的配置项 (original openapi)
     */
    async createItemRaw(requestParameters: CreateItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenItemDTO>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling createItem.');
        }

        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling createItem.');
        }

        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling createItem.');
        }

        if (requestParameters.namespaceName === null || requestParameters.namespaceName === undefined) {
            throw new runtime.RequiredError('namespaceName','Required parameter requestParameters.namespaceName was null or undefined when calling createItem.');
        }

        if (requestParameters.operator === null || requestParameters.operator === undefined) {
            throw new runtime.RequiredError('operator','Required parameter requestParameters.operator was null or undefined when calling createItem.');
        }

        if (requestParameters.openItemDTO === null || requestParameters.openItemDTO === undefined) {
            throw new runtime.RequiredError('openItemDTO','Required parameter requestParameters.openItemDTO was null or undefined when calling createItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.operator !== undefined) {
            queryParameters['operator'] = requestParameters.operator;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))).replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))).replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters.namespaceName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OpenItemDTOToJSON(requestParameters.openItemDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenItemDTOFromJSON(jsonValue));
    }

    /**
     * POST /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items
     * 创建新的配置项 (original openapi)
     */
    async createItem(requestParameters: CreateItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenItemDTO> {
        const response = await this.createItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * DELETE /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}
     * 删除配置项 (original openapi)
     */
    async deleteItemRaw(requestParameters: DeleteItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling deleteItem.');
        }

        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling deleteItem.');
        }

        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling deleteItem.');
        }

        if (requestParameters.namespaceName === null || requestParameters.namespaceName === undefined) {
            throw new runtime.RequiredError('namespaceName','Required parameter requestParameters.namespaceName was null or undefined when calling deleteItem.');
        }

        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling deleteItem.');
        }

        if (requestParameters.operator === null || requestParameters.operator === undefined) {
            throw new runtime.RequiredError('operator','Required parameter requestParameters.operator was null or undefined when calling deleteItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.operator !== undefined) {
            queryParameters['operator'] = requestParameters.operator;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))).replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))).replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters.namespaceName))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * DELETE /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}
     * 删除配置项 (original openapi)
     */
    async deleteItem(requestParameters: DeleteItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * DELETE /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}
     * 通过编码的key删除配置项 (original openapi)
     */
    async deleteItemByEncodedKeyRaw(requestParameters: DeleteItemByEncodedKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling deleteItemByEncodedKey.');
        }

        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling deleteItemByEncodedKey.');
        }

        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling deleteItemByEncodedKey.');
        }

        if (requestParameters.namespaceName === null || requestParameters.namespaceName === undefined) {
            throw new runtime.RequiredError('namespaceName','Required parameter requestParameters.namespaceName was null or undefined when calling deleteItemByEncodedKey.');
        }

        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling deleteItemByEncodedKey.');
        }

        if (requestParameters.operator === null || requestParameters.operator === undefined) {
            throw new runtime.RequiredError('operator','Required parameter requestParameters.operator was null or undefined when calling deleteItemByEncodedKey.');
        }

        const queryParameters: any = {};

        if (requestParameters.operator !== undefined) {
            queryParameters['operator'] = requestParameters.operator;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))).replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))).replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters.namespaceName))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * DELETE /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}
     * 通过编码的key删除配置项 (original openapi)
     */
    async deleteItemByEncodedKey(requestParameters: DeleteItemByEncodedKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteItemByEncodedKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取指定命名空间的配置项列表，支持分页
     * 获取命名空间下的配置项列表 (original openapi)
     */
    async findItemsByNamespaceRaw(requestParameters: FindItemsByNamespaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenPageDTOOpenItemDTO>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling findItemsByNamespace.');
        }

        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling findItemsByNamespace.');
        }

        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling findItemsByNamespace.');
        }

        if (requestParameters.namespaceName === null || requestParameters.namespaceName === undefined) {
            throw new runtime.RequiredError('namespaceName','Required parameter requestParameters.namespaceName was null or undefined when calling findItemsByNamespace.');
        }

        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling findItemsByNamespace.');
        }

        if (requestParameters.size === null || requestParameters.size === undefined) {
            throw new runtime.RequiredError('size','Required parameter requestParameters.size was null or undefined when calling findItemsByNamespace.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))).replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))).replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters.namespaceName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenPageDTOOpenItemDTOFromJSON(jsonValue));
    }

    /**
     * 获取指定命名空间的配置项列表，支持分页
     * 获取命名空间下的配置项列表 (original openapi)
     */
    async findItemsByNamespace(requestParameters: FindItemsByNamespaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenPageDTOOpenItemDTO> {
        const response = await this.findItemsByNamespaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/items:
     * 获取分支下的配置项 (new added)
     */
    async getBranchItemsRaw(requestParameters: GetBranchItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OpenItemDTO>>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling getBranchItems.');
        }

        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling getBranchItems.');
        }

        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling getBranchItems.');
        }

        if (requestParameters.namespaceName === null || requestParameters.namespaceName === undefined) {
            throw new runtime.RequiredError('namespaceName','Required parameter requestParameters.namespaceName was null or undefined when calling getBranchItems.');
        }

        if (requestParameters.branchName === null || requestParameters.branchName === undefined) {
            throw new runtime.RequiredError('branchName','Required parameter requestParameters.branchName was null or undefined when calling getBranchItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/items`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))).replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))).replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters.namespaceName))).replace(`{${"branchName"}}`, encodeURIComponent(String(requestParameters.branchName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OpenItemDTOFromJSON));
    }

    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/items:
     * 获取分支下的配置项 (new added)
     */
    async getBranchItems(requestParameters: GetBranchItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OpenItemDTO>> {
        const response = await this.getBranchItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}
     * 获取单个配置项 (original openapi)
     */
    async getItemRaw(requestParameters: GetItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenItemDTO>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling getItem.');
        }

        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling getItem.');
        }

        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling getItem.');
        }

        if (requestParameters.namespaceName === null || requestParameters.namespaceName === undefined) {
            throw new runtime.RequiredError('namespaceName','Required parameter requestParameters.namespaceName was null or undefined when calling getItem.');
        }

        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling getItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))).replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))).replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters.namespaceName))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenItemDTOFromJSON(jsonValue));
    }

    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}
     * 获取单个配置项 (original openapi)
     */
    async getItem(requestParameters: GetItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenItemDTO> {
        const response = await this.getItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}
     * 通过查询参数获取配置项（支持编码的key） (original openapi)
     */
    async getItemByEncodedKeyRaw(requestParameters: GetItemByEncodedKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenItemDTO>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling getItemByEncodedKey.');
        }

        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling getItemByEncodedKey.');
        }

        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling getItemByEncodedKey.');
        }

        if (requestParameters.namespaceName === null || requestParameters.namespaceName === undefined) {
            throw new runtime.RequiredError('namespaceName','Required parameter requestParameters.namespaceName was null or undefined when calling getItemByEncodedKey.');
        }

        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling getItemByEncodedKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))).replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))).replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters.namespaceName))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenItemDTOFromJSON(jsonValue));
    }

    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}
     * 通过查询参数获取配置项（支持编码的key） (original openapi)
     */
    async getItemByEncodedKey(requestParameters: GetItemByEncodedKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenItemDTO> {
        const response = await this.getItemByEncodedKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * POST /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/revert
     * 撤销配置项更改 (new added)
     */
    async revertItemsRaw(requestParameters: RevertItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling revertItems.');
        }

        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling revertItems.');
        }

        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling revertItems.');
        }

        if (requestParameters.namespaceName === null || requestParameters.namespaceName === undefined) {
            throw new runtime.RequiredError('namespaceName','Required parameter requestParameters.namespaceName was null or undefined when calling revertItems.');
        }

        if (requestParameters.operator === null || requestParameters.operator === undefined) {
            throw new runtime.RequiredError('operator','Required parameter requestParameters.operator was null or undefined when calling revertItems.');
        }

        const queryParameters: any = {};

        if (requestParameters.operator !== undefined) {
            queryParameters['operator'] = requestParameters.operator;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/revert`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))).replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))).replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters.namespaceName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * POST /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/revert
     * 撤销配置项更改 (new added)
     */
    async revertItems(requestParameters: RevertItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.revertItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * POST /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/sync:
     * 同步配置项到多个命名空间 (new added)
     */
    async syncItemsRaw(requestParameters: SyncItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling syncItems.');
        }

        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling syncItems.');
        }

        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling syncItems.');
        }

        if (requestParameters.namespaceName === null || requestParameters.namespaceName === undefined) {
            throw new runtime.RequiredError('namespaceName','Required parameter requestParameters.namespaceName was null or undefined when calling syncItems.');
        }

        if (requestParameters.operator === null || requestParameters.operator === undefined) {
            throw new runtime.RequiredError('operator','Required parameter requestParameters.operator was null or undefined when calling syncItems.');
        }

        if (requestParameters.openNamespaceSyncModel === null || requestParameters.openNamespaceSyncModel === undefined) {
            throw new runtime.RequiredError('openNamespaceSyncModel','Required parameter requestParameters.openNamespaceSyncModel was null or undefined when calling syncItems.');
        }

        const queryParameters: any = {};

        if (requestParameters.operator !== undefined) {
            queryParameters['operator'] = requestParameters.operator;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/sync`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))).replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))).replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters.namespaceName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OpenNamespaceSyncModelToJSON(requestParameters.openNamespaceSyncModel),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * POST /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/sync:
     * 同步配置项到多个命名空间 (new added)
     */
    async syncItems(requestParameters: SyncItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.syncItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PUT /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}
     * 更新配置项 (original openapi)
     */
    async updateItemRaw(requestParameters: UpdateItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling updateItem.');
        }

        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling updateItem.');
        }

        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling updateItem.');
        }

        if (requestParameters.namespaceName === null || requestParameters.namespaceName === undefined) {
            throw new runtime.RequiredError('namespaceName','Required parameter requestParameters.namespaceName was null or undefined when calling updateItem.');
        }

        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling updateItem.');
        }

        if (requestParameters.createIfNotExists === null || requestParameters.createIfNotExists === undefined) {
            throw new runtime.RequiredError('createIfNotExists','Required parameter requestParameters.createIfNotExists was null or undefined when calling updateItem.');
        }

        if (requestParameters.openItemDTO === null || requestParameters.openItemDTO === undefined) {
            throw new runtime.RequiredError('openItemDTO','Required parameter requestParameters.openItemDTO was null or undefined when calling updateItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.createIfNotExists !== undefined) {
            queryParameters['createIfNotExists'] = requestParameters.createIfNotExists;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))).replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))).replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters.namespaceName))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OpenItemDTOToJSON(requestParameters.openItemDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * PUT /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}
     * 更新配置项 (original openapi)
     */
    async updateItem(requestParameters: UpdateItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.updateItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PUT /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}
     * 通过编码的key更新配置项 (original openapi)
     */
    async updateItemByEncodedKeyRaw(requestParameters: UpdateItemByEncodedKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling updateItemByEncodedKey.');
        }

        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling updateItemByEncodedKey.');
        }

        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling updateItemByEncodedKey.');
        }

        if (requestParameters.namespaceName === null || requestParameters.namespaceName === undefined) {
            throw new runtime.RequiredError('namespaceName','Required parameter requestParameters.namespaceName was null or undefined when calling updateItemByEncodedKey.');
        }

        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling updateItemByEncodedKey.');
        }

        if (requestParameters.createIfNotExists === null || requestParameters.createIfNotExists === undefined) {
            throw new runtime.RequiredError('createIfNotExists','Required parameter requestParameters.createIfNotExists was null or undefined when calling updateItemByEncodedKey.');
        }

        if (requestParameters.openItemDTO === null || requestParameters.openItemDTO === undefined) {
            throw new runtime.RequiredError('openItemDTO','Required parameter requestParameters.openItemDTO was null or undefined when calling updateItemByEncodedKey.');
        }

        const queryParameters: any = {};

        if (requestParameters.createIfNotExists !== undefined) {
            queryParameters['createIfNotExists'] = requestParameters.createIfNotExists;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))).replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))).replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters.namespaceName))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OpenItemDTOToJSON(requestParameters.openItemDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * PUT /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}
     * 通过编码的key更新配置项 (original openapi)
     */
    async updateItemByEncodedKey(requestParameters: UpdateItemByEncodedKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.updateItemByEncodedKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * POST /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/validate
     * 验证配置文本语法 (new added)
     */
    async validateItemsRaw(requestParameters: ValidateItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling validateItems.');
        }

        if (requestParameters.env === null || requestParameters.env === undefined) {
            throw new runtime.RequiredError('env','Required parameter requestParameters.env was null or undefined when calling validateItems.');
        }

        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling validateItems.');
        }

        if (requestParameters.namespaceName === null || requestParameters.namespaceName === undefined) {
            throw new runtime.RequiredError('namespaceName','Required parameter requestParameters.namespaceName was null or undefined when calling validateItems.');
        }

        if (requestParameters.openNamespaceTextModel === null || requestParameters.openNamespaceTextModel === undefined) {
            throw new runtime.RequiredError('openNamespaceTextModel','Required parameter requestParameters.openNamespaceTextModel was null or undefined when calling validateItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/validate`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"env"}}`, encodeURIComponent(String(requestParameters.env))).replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))).replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters.namespaceName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OpenNamespaceTextModelToJSON(requestParameters.openNamespaceTextModel),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * POST /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/validate
     * 验证配置文本语法 (new added)
     */
    async validateItems(requestParameters: ValidateItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.validateItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
